
RTOS_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00004990  00004a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000490  00800082  00800082  00004a46  2**0
                  ALLOC
  3 .stab         000062ac  00000000  00000000  00004a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000364d  00000000  00000000  0000acf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e341  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e481  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000e5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00011125  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00012034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000122c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012a8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 23 	call	0x4664	; 0x4664 <main>
      8a:	0c 94 c6 24 	jmp	0x498c	; 0x498c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7c 24 	jmp	0x48f8	; 0x48f8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
#include "UART_Config.h"
#include "UART_Private.h"
static void(*UART_AppFun)(void)=NULL;
//static volatile u8 *UART_AppParameter=NULL;
void UART_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(DDRD,0);
     b4e:	a1 e3       	ldi	r26, 0x31	; 49
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e3       	ldi	r30, 0x31	; 49
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	8c 93       	st	X, r24
	SET_BIT(DDRD,1);
     b5c:	a1 e3       	ldi	r26, 0x31	; 49
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e1 e3       	ldi	r30, 0x31	; 49
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8c 93       	st	X, r24
	/*Enable Rx*/
	SET_BIT(UCSRB,4);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 61       	ori	r24, 0x10	; 16
     b76:	8c 93       	st	X, r24
	/*Enable Tx*/
	SET_BIT(UCSRB,3);
     b78:	aa e2       	ldi	r26, 0x2A	; 42
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ea e2       	ldi	r30, 0x2A	; 42
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 93       	st	X, r24
	
	/*UCSRC Select*/	/*Asynchronous mode*/	/*Parity mode disabled*/			/*1-bit stop*/		/*8-bits character size*/			/*Clock Polarity*/
	SET_BIT(UCSRC,7);	CLR_BIT(UCSRC,6);		CLR_BIT(UCSRC,5);CLR_BIT(UCSRC,4);	CLR_BIT(UCSRC,3);	SET_BIT(UCSRC,2);SET_BIT(UCSRC,1);	CLR_BIT(UCSRC,0);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 68       	ori	r24, 0x80	; 128
     b92:	8c 93       	st	X, r24
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	8c 93       	st	X, r24
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	8c 93       	st	X, r24
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7e       	andi	r24, 0xEF	; 239
     bbc:	8c 93       	st	X, r24
     bbe:	a0 e4       	ldi	r26, 0x40	; 64
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e4       	ldi	r30, 0x40	; 64
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	87 7f       	andi	r24, 0xF7	; 247
     bca:	8c 93       	st	X, r24
     bcc:	a0 e4       	ldi	r26, 0x40	; 64
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e0 e4       	ldi	r30, 0x40	; 64
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	8c 93       	st	X, r24
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	82 60       	ori	r24, 0x02	; 2
     be6:	8c 93       	st	X, r24
     be8:	a0 e4       	ldi	r26, 0x40	; 64
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e0 e4       	ldi	r30, 0x40	; 64
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8e 7f       	andi	r24, 0xFE	; 254
     bf4:	8c 93       	st	X, r24
	
	
	/*Baud Rate 9600*/
	UBRRL = 51;
     bf6:	e9 e2       	ldi	r30, 0x29	; 41
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	83 e3       	ldi	r24, 0x33	; 51
     bfc:	80 83       	st	Z, r24

	/*Interreupt ON receive*/
	SET_BIT(UCSRB,7);
     bfe:	aa e2       	ldi	r26, 0x2A	; 42
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ea e2       	ldi	r30, 0x2A	; 42
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	8c 93       	st	X, r24
}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <UART_Send>:
void UART_Send(u8 data)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	0f 92       	push	r0
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	89 83       	std	Y+1, r24	; 0x01
	/*Wait till buffer is empty*/
	while((GET_BIT(UCSRA,5)) == 0);
     c1e:	eb e2       	ldi	r30, 0x2B	; 43
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	82 95       	swap	r24
     c26:	86 95       	lsr	r24
     c28:	87 70       	andi	r24, 0x07	; 7
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	a1 f3       	breq	.-24     	; 0xc1e <UART_Send+0xc>
	/*Transmit data*/
	UDR = data;
     c36:	ec e2       	ldi	r30, 0x2C	; 44
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	80 83       	st	Z, r24
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <UART_Receive>:
u8 UART_Receive(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	/*Wait for data to be received*/
	//while((GET_BIT(UCSRA,7)) == 0);
	/*Return the received data*/
	return UDR;
     c4e:	ec e2       	ldi	r30, 0x2C	; 44
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
}
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <UART_Callback>:
void UART_Callback(void (*pAppFun)(void))
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <UART_Callback+0x6>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
	UART_AppFun=pAppFun;
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	90 93 83 00 	sts	0x0083, r25
     c70:	80 93 82 00 	sts	0x0082, r24
	//UART_AppParameter = pAppParameter;
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <__vector_13>:
ISR(USART_RXC_vect_13)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	2f 93       	push	r18
     c8a:	3f 93       	push	r19
     c8c:	4f 93       	push	r20
     c8e:	5f 93       	push	r21
     c90:	6f 93       	push	r22
     c92:	7f 93       	push	r23
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
     c9c:	ef 93       	push	r30
     c9e:	ff 93       	push	r31
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	//*UART_AppParameter=UDR;
	UART_AppFun();
     ca8:	e0 91 82 00 	lds	r30, 0x0082
     cac:	f0 91 83 00 	lds	r31, 0x0083
     cb0:	09 95       	icall
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <LCD_enuInit>:

#include <util\delay.h>


ES_t LCD_enuInit(void)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	ab 97       	sbiw	r28, 0x2b	; 43
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
     cec:	1b a6       	std	Y+43, r1	; 0x2b
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	ac e0       	ldi	r26, 0x0C	; 12
     cf4:	b2 e4       	ldi	r27, 0x42	; 66
     cf6:	8f a3       	std	Y+39, r24	; 0x27
     cf8:	98 a7       	std	Y+40, r25	; 0x28
     cfa:	a9 a7       	std	Y+41, r26	; 0x29
     cfc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfe:	6f a1       	ldd	r22, Y+39	; 0x27
     d00:	78 a5       	ldd	r23, Y+40	; 0x28
     d02:	89 a5       	ldd	r24, Y+41	; 0x29
     d04:	9a a5       	ldd	r25, Y+42	; 0x2a
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a ef       	ldi	r20, 0xFA	; 250
     d0c:	54 e4       	ldi	r21, 0x44	; 68
     d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	8b a3       	std	Y+35, r24	; 0x23
     d18:	9c a3       	std	Y+36, r25	; 0x24
     d1a:	ad a3       	std	Y+37, r26	; 0x25
     d1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d1e:	6b a1       	ldd	r22, Y+35	; 0x23
     d20:	7c a1       	ldd	r23, Y+36	; 0x24
     d22:	8d a1       	ldd	r24, Y+37	; 0x25
     d24:	9e a1       	ldd	r25, Y+38	; 0x26
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	2c f4       	brge	.+10     	; 0xd40 <LCD_enuInit+0x68>
		__ticks = 1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9a a3       	std	Y+34, r25	; 0x22
     d3c:	89 a3       	std	Y+33, r24	; 0x21
     d3e:	3f c0       	rjmp	.+126    	; 0xdbe <LCD_enuInit+0xe6>
	else if (__tmp > 65535)
     d40:	6b a1       	ldd	r22, Y+35	; 0x23
     d42:	7c a1       	ldd	r23, Y+36	; 0x24
     d44:	8d a1       	ldd	r24, Y+37	; 0x25
     d46:	9e a1       	ldd	r25, Y+38	; 0x26
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	3f ef       	ldi	r19, 0xFF	; 255
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	4c f5       	brge	.+82     	; 0xdaa <LCD_enuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d58:	6f a1       	ldd	r22, Y+39	; 0x27
     d5a:	78 a5       	ldd	r23, Y+40	; 0x28
     d5c:	89 a5       	ldd	r24, Y+41	; 0x29
     d5e:	9a a5       	ldd	r25, Y+42	; 0x2a
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e2       	ldi	r20, 0x20	; 32
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	9a a3       	std	Y+34, r25	; 0x22
     d7e:	89 a3       	std	Y+33, r24	; 0x21
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <LCD_enuInit+0xc8>
     d82:	88 ec       	ldi	r24, 0xC8	; 200
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	98 a3       	std	Y+32, r25	; 0x20
     d88:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d8c:	98 a1       	ldd	r25, Y+32	; 0x20
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <LCD_enuInit+0xb6>
     d92:	98 a3       	std	Y+32, r25	; 0x20
     d94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d96:	89 a1       	ldd	r24, Y+33	; 0x21
     d98:	9a a1       	ldd	r25, Y+34	; 0x22
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	9a a3       	std	Y+34, r25	; 0x22
     d9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da0:	89 a1       	ldd	r24, Y+33	; 0x21
     da2:	9a a1       	ldd	r25, Y+34	; 0x22
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	69 f7       	brne	.-38     	; 0xd82 <LCD_enuInit+0xaa>
     da8:	14 c0       	rjmp	.+40     	; 0xdd2 <LCD_enuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     daa:	6b a1       	ldd	r22, Y+35	; 0x23
     dac:	7c a1       	ldd	r23, Y+36	; 0x24
     dae:	8d a1       	ldd	r24, Y+37	; 0x25
     db0:	9e a1       	ldd	r25, Y+38	; 0x26
     db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	9a a3       	std	Y+34, r25	; 0x22
     dbc:	89 a3       	std	Y+33, r24	; 0x21
     dbe:	89 a1       	ldd	r24, Y+33	; 0x21
     dc0:	9a a1       	ldd	r25, Y+34	; 0x22
     dc2:	9e 8f       	std	Y+30, r25	; 0x1e
     dc4:	8d 8f       	std	Y+29, r24	; 0x1d
     dc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <LCD_enuInit+0xf2>
     dce:	9e 8f       	std	Y+30, r25	; 0x1e
     dd0:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(35);

	DIO_enuSetPinDirection(RS_GRP, RS_PIN, DIO_u8OUTPUT);
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	67 e0       	ldi	r22, 0x07	; 7
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 2e 20 	call	0x405c	; 0x405c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_GRP, RW_PIN, DIO_u8OUTPUT);
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	0e 94 2e 20 	call	0x405c	; 0x405c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_GRP, EN_PIN, DIO_u8OUTPUT);
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	62 e0       	ldi	r22, 0x02	; 2
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	0e 94 2e 20 	call	0x405c	; 0x405c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP, D7_PIN, DIO_u8OUTPUT);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	66 e0       	ldi	r22, 0x06	; 6
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	0e 94 2e 20 	call	0x405c	; 0x405c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP, D6_PIN, DIO_u8OUTPUT);
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	65 e0       	ldi	r22, 0x05	; 5
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	0e 94 2e 20 	call	0x405c	; 0x405c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP, D5_PIN, DIO_u8OUTPUT);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	64 e0       	ldi	r22, 0x04	; 4
     e08:	41 e0       	ldi	r20, 0x01	; 1
     e0a:	0e 94 2e 20 	call	0x405c	; 0x405c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP, D4_PIN, DIO_u8OUTPUT);
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	63 e0       	ldi	r22, 0x03	; 3
     e12:	41 e0       	ldi	r20, 0x01	; 1
     e14:	0e 94 2e 20 	call	0x405c	; 0x405c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch(0x38);

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	67 e0       	ldi	r22, 0x07	; 7
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_GRP, D7_PIN,  0  );
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	66 e0       	ldi	r22, 0x06	; 6
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  0  );
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	65 e0       	ldi	r22, 0x05	; 5
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  1  );
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	64 e0       	ldi	r22, 0x04	; 4
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  0  );
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	63 e0       	ldi	r22, 0x03	; 3
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	62 e0       	ldi	r22, 0x02	; 2
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a0 e2       	ldi	r26, 0x20	; 32
     e5a:	b1 e4       	ldi	r27, 0x41	; 65
     e5c:	89 8f       	std	Y+25, r24	; 0x19
     e5e:	9a 8f       	std	Y+26, r25	; 0x1a
     e60:	ab 8f       	std	Y+27, r26	; 0x1b
     e62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e64:	69 8d       	ldd	r22, Y+25	; 0x19
     e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	4a ef       	ldi	r20, 0xFA	; 250
     e72:	54 e4       	ldi	r21, 0x44	; 68
     e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	8d 8b       	std	Y+21, r24	; 0x15
     e7e:	9e 8b       	std	Y+22, r25	; 0x16
     e80:	af 8b       	std	Y+23, r26	; 0x17
     e82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e84:	6d 89       	ldd	r22, Y+21	; 0x15
     e86:	7e 89       	ldd	r23, Y+22	; 0x16
     e88:	8f 89       	ldd	r24, Y+23	; 0x17
     e8a:	98 8d       	ldd	r25, Y+24	; 0x18
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e8       	ldi	r20, 0x80	; 128
     e92:	5f e3       	ldi	r21, 0x3F	; 63
     e94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e98:	88 23       	and	r24, r24
     e9a:	2c f4       	brge	.+10     	; 0xea6 <LCD_enuInit+0x1ce>
		__ticks = 1;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	9c 8b       	std	Y+20, r25	; 0x14
     ea2:	8b 8b       	std	Y+19, r24	; 0x13
     ea4:	3f c0       	rjmp	.+126    	; 0xf24 <LCD_enuInit+0x24c>
	else if (__tmp > 65535)
     ea6:	6d 89       	ldd	r22, Y+21	; 0x15
     ea8:	7e 89       	ldd	r23, Y+22	; 0x16
     eaa:	8f 89       	ldd	r24, Y+23	; 0x17
     eac:	98 8d       	ldd	r25, Y+24	; 0x18
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	4c f5       	brge	.+82     	; 0xf10 <LCD_enuInit+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebe:	69 8d       	ldd	r22, Y+25	; 0x19
     ec0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e2       	ldi	r20, 0x20	; 32
     ecc:	51 e4       	ldi	r21, 0x41	; 65
     ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	bc 01       	movw	r22, r24
     ed8:	cd 01       	movw	r24, r26
     eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	9c 8b       	std	Y+20, r25	; 0x14
     ee4:	8b 8b       	std	Y+19, r24	; 0x13
     ee6:	0f c0       	rjmp	.+30     	; 0xf06 <LCD_enuInit+0x22e>
     ee8:	88 ec       	ldi	r24, 0xC8	; 200
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9a 8b       	std	Y+18, r25	; 0x12
     eee:	89 8b       	std	Y+17, r24	; 0x11
     ef0:	89 89       	ldd	r24, Y+17	; 0x11
     ef2:	9a 89       	ldd	r25, Y+18	; 0x12
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <LCD_enuInit+0x21c>
     ef8:	9a 8b       	std	Y+18, r25	; 0x12
     efa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efc:	8b 89       	ldd	r24, Y+19	; 0x13
     efe:	9c 89       	ldd	r25, Y+20	; 0x14
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	9c 8b       	std	Y+20, r25	; 0x14
     f04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f06:	8b 89       	ldd	r24, Y+19	; 0x13
     f08:	9c 89       	ldd	r25, Y+20	; 0x14
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	69 f7       	brne	.-38     	; 0xee8 <LCD_enuInit+0x210>
     f0e:	14 c0       	rjmp	.+40     	; 0xf38 <LCD_enuInit+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f10:	6d 89       	ldd	r22, Y+21	; 0x15
     f12:	7e 89       	ldd	r23, Y+22	; 0x16
     f14:	8f 89       	ldd	r24, Y+23	; 0x17
     f16:	98 8d       	ldd	r25, Y+24	; 0x18
     f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	9c 8b       	std	Y+20, r25	; 0x14
     f22:	8b 8b       	std	Y+19, r24	; 0x13
     f24:	8b 89       	ldd	r24, Y+19	; 0x13
     f26:	9c 89       	ldd	r25, Y+20	; 0x14
     f28:	98 8b       	std	Y+16, r25	; 0x10
     f2a:	8f 87       	std	Y+15, r24	; 0x0f
     f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2e:	98 89       	ldd	r25, Y+16	; 0x10
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <LCD_enuInit+0x258>
     f34:	98 8b       	std	Y+16, r25	; 0x10
     f36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	62 e0       	ldi	r22, 0x02	; 2
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a0 e2       	ldi	r26, 0x20	; 32
     f48:	b1 e4       	ldi	r27, 0x41	; 65
     f4a:	8b 87       	std	Y+11, r24	; 0x0b
     f4c:	9c 87       	std	Y+12, r25	; 0x0c
     f4e:	ad 87       	std	Y+13, r26	; 0x0d
     f50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f52:	6b 85       	ldd	r22, Y+11	; 0x0b
     f54:	7c 85       	ldd	r23, Y+12	; 0x0c
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	4a ef       	ldi	r20, 0xFA	; 250
     f60:	54 e4       	ldi	r21, 0x44	; 68
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	8f 83       	std	Y+7, r24	; 0x07
     f6c:	98 87       	std	Y+8, r25	; 0x08
     f6e:	a9 87       	std	Y+9, r26	; 0x09
     f70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f86:	88 23       	and	r24, r24
     f88:	2c f4       	brge	.+10     	; 0xf94 <LCD_enuInit+0x2bc>
		__ticks = 1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	3f c0       	rjmp	.+126    	; 0x1012 <LCD_enuInit+0x33a>
	else if (__tmp > 65535)
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fa8:	18 16       	cp	r1, r24
     faa:	4c f5       	brge	.+82     	; 0xffe <LCD_enuInit+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9e 83       	std	Y+6, r25	; 0x06
     fd2:	8d 83       	std	Y+5, r24	; 0x05
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <LCD_enuInit+0x31c>
     fd6:	88 ec       	ldi	r24, 0xC8	; 200
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9c 83       	std	Y+4, r25	; 0x04
     fdc:	8b 83       	std	Y+3, r24	; 0x03
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <LCD_enuInit+0x30a>
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	69 f7       	brne	.-38     	; 0xfd6 <LCD_enuInit+0x2fe>
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <LCD_enuInit+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    1000:	78 85       	ldd	r23, Y+8	; 0x08
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <LCD_enuInit+0x346>
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	LCD_enuWriteNLatch(0x28);
    1026:	88 e2       	ldi	r24, 0x28	; 40
    1028:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>
#else
#error "LCD Mode Configuration is wrong\n it must be EIGHT_BIT or FOUR_BIT"
#endif

	//display on/off
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	67 e0       	ldi	r22, 0x07	; 7
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0F);
    1036:	8f e0       	ldi	r24, 0x0F	; 15
    1038:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>

	//clear display
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	67 e0       	ldi	r22, 0x07	; 7
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>

	//Entry set mode
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	67 e0       	ldi	r22, 0x07	; 7
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x06);
    1056:	86 e0       	ldi	r24, 0x06	; 6
    1058:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    105c:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    105e:	ab 96       	adiw	r28, 0x2b	; 43
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <LCD_enuWriteData+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    107c:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	67 e0       	ldi	r22, 0x07	; 7
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch (Copy_u8Data);
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Command)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <LCD_enuWriteCommand+0x6>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    10a6:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	67 e0       	ldi	r22, 0x07	; 7
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Command);
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString )
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <LCD_enuWriteString+0x6>
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	9b 83       	std	Y+3, r25	; 0x03
    10d2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    10d4:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pcString != NULL)
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	b9 f0       	breq	.+46     	; 0x110c <LCD_enuWriteString+0x48>
    10de:	10 c0       	rjmp	.+32     	; 0x1100 <LCD_enuWriteString+0x3c>
	{
		while (*Copy_pcString)
		{
			DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	67 e0       	ldi	r22, 0x07	; 7
    10e4:	41 e0       	ldi	r20, 0x01	; 1
    10e6:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
			LCD_enuWriteNLatch (*Copy_pcString++);
    10ea:	ea 81       	ldd	r30, Y+2	; 0x02
    10ec:	fb 81       	ldd	r31, Y+3	; 0x03
    10ee:	20 81       	ld	r18, Z
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	9b 81       	ldd	r25, Y+3	; 0x03
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	9b 83       	std	Y+3, r25	; 0x03
    10f8:	8a 83       	std	Y+2, r24	; 0x02
    10fa:	82 2f       	mov	r24, r18
    10fc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>
ES_t LCD_enuWriteString(const char * Copy_pcString )
{
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	80 81       	ld	r24, Z
    1106:	88 23       	and	r24, r24
    1108:	59 f7       	brne	.-42     	; 0x10e0 <LCD_enuWriteString+0x1c>
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <LCD_enuWriteString+0x4c>
			LCD_enuWriteNLatch (*Copy_pcString++);
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    110c:	83 e0       	ldi	r24, 0x03	; 3
    110e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <LCD_enuWriteIntegerNum>:

ES_t LCD_enuWriteIntegerNum(s32 Copy_s32Num)
{
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	62 97       	sbiw	r28, 0x12	; 18
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	6f 87       	std	Y+15, r22	; 0x0f
    1138:	78 8b       	std	Y+16, r23	; 0x10
    113a:	89 8b       	std	Y+17, r24	; 0x11
    113c:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t Local_enuErrorState = ES_NOK;
    113e:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_Au8Digits[12]={0}, Local_u8Digit = 0;
    1140:	8c e0       	ldi	r24, 0x0C	; 12
    1142:	fe 01       	movw	r30, r28
    1144:	33 96       	adiw	r30, 0x03	; 3
    1146:	df 01       	movw	r26, r30
    1148:	98 2f       	mov	r25, r24
    114a:	1d 92       	st	X+, r1
    114c:	9a 95       	dec	r25
    114e:	e9 f7       	brne	.-6      	; 0x114a <LCD_enuWriteIntegerNum+0x2c>
    1150:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_s32Num==0)
    1152:	8f 85       	ldd	r24, Y+15	; 0x0f
    1154:	98 89       	ldd	r25, Y+16	; 0x10
    1156:	a9 89       	ldd	r26, Y+17	; 0x11
    1158:	ba 89       	ldd	r27, Y+18	; 0x12
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	a1 05       	cpc	r26, r1
    115e:	b1 05       	cpc	r27, r1
    1160:	41 f4       	brne	.+16     	; 0x1172 <LCD_enuWriteIntegerNum+0x54>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	67 e0       	ldi	r22, 0x07	; 7
    1166:	41 e0       	ldi	r20, 0x01	; 1
    1168:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch ('0');
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>
	}
	if (Copy_s32Num <0)
    1172:	8f 85       	ldd	r24, Y+15	; 0x0f
    1174:	98 89       	ldd	r25, Y+16	; 0x10
    1176:	a9 89       	ldd	r26, Y+17	; 0x11
    1178:	ba 89       	ldd	r27, Y+18	; 0x12
    117a:	bb 23       	and	r27, r27
    117c:	0c f0       	brlt	.+2      	; 0x1180 <LCD_enuWriteIntegerNum+0x62>
    117e:	46 c0       	rjmp	.+140    	; 0x120c <LCD_enuWriteIntegerNum+0xee>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	67 e0       	ldi	r22, 0x07	; 7
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch ('-');
    118a:	8d e2       	ldi	r24, 0x2D	; 45
    118c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>
		Copy_s32Num *= -1;
    1190:	8f 85       	ldd	r24, Y+15	; 0x0f
    1192:	98 89       	ldd	r25, Y+16	; 0x10
    1194:	a9 89       	ldd	r26, Y+17	; 0x11
    1196:	ba 89       	ldd	r27, Y+18	; 0x12
    1198:	b0 95       	com	r27
    119a:	a0 95       	com	r26
    119c:	90 95       	com	r25
    119e:	81 95       	neg	r24
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	af 4f       	sbci	r26, 0xFF	; 255
    11a4:	bf 4f       	sbci	r27, 0xFF	; 255
    11a6:	8f 87       	std	Y+15, r24	; 0x0f
    11a8:	98 8b       	std	Y+16, r25	; 0x10
    11aa:	a9 8b       	std	Y+17, r26	; 0x11
    11ac:	ba 8b       	std	Y+18, r27	; 0x12
    11ae:	2e c0       	rjmp	.+92     	; 0x120c <LCD_enuWriteIntegerNum+0xee>
	}
	while (Copy_s32Num)
	{
		Local_u8Digit ++;
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	89 83       	std	Y+1, r24	; 0x01
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	08 2f       	mov	r16, r24
    11ba:	10 e0       	ldi	r17, 0x00	; 0
    11bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11be:	98 89       	ldd	r25, Y+16	; 0x10
    11c0:	a9 89       	ldd	r26, Y+17	; 0x11
    11c2:	ba 89       	ldd	r27, Y+18	; 0x12
    11c4:	2a e0       	ldi	r18, 0x0A	; 10
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 33 24 	call	0x4866	; 0x4866 <__divmodsi4>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	28 2f       	mov	r18, r24
    11da:	20 5d       	subi	r18, 0xD0	; 208
    11dc:	ce 01       	movw	r24, r28
    11de:	03 96       	adiw	r24, 0x03	; 3
    11e0:	fc 01       	movw	r30, r24
    11e2:	e0 0f       	add	r30, r16
    11e4:	f1 1f       	adc	r31, r17
    11e6:	20 83       	st	Z, r18
		Copy_s32Num /=10;
    11e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ea:	98 89       	ldd	r25, Y+16	; 0x10
    11ec:	a9 89       	ldd	r26, Y+17	; 0x11
    11ee:	ba 89       	ldd	r27, Y+18	; 0x12
    11f0:	2a e0       	ldi	r18, 0x0A	; 10
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 33 24 	call	0x4866	; 0x4866 <__divmodsi4>
    1200:	da 01       	movw	r26, r20
    1202:	c9 01       	movw	r24, r18
    1204:	8f 87       	std	Y+15, r24	; 0x0f
    1206:	98 8b       	std	Y+16, r25	; 0x10
    1208:	a9 8b       	std	Y+17, r26	; 0x11
    120a:	ba 8b       	std	Y+18, r27	; 0x12
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch ('-');
		Copy_s32Num *= -1;
	}
	while (Copy_s32Num)
    120c:	8f 85       	ldd	r24, Y+15	; 0x0f
    120e:	98 89       	ldd	r25, Y+16	; 0x10
    1210:	a9 89       	ldd	r26, Y+17	; 0x11
    1212:	ba 89       	ldd	r27, Y+18	; 0x12
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	a1 05       	cpc	r26, r1
    1218:	b1 05       	cpc	r27, r1
    121a:	51 f6       	brne	.-108    	; 0x11b0 <LCD_enuWriteIntegerNum+0x92>
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <LCD_enuWriteIntegerNum+0x128>
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
		Copy_s32Num /=10;
	}
	while (Local_u8Digit)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	67 e0       	ldi	r22, 0x07	; 7
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch (Local_Au8Digits[Local_u8Digit--]);
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	ce 01       	movw	r24, r28
    1230:	03 96       	adiw	r24, 0x03	; 3
    1232:	fc 01       	movw	r30, r24
    1234:	e2 0f       	add	r30, r18
    1236:	f3 1f       	adc	r31, r19
    1238:	90 81       	ld	r25, Z
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	81 50       	subi	r24, 0x01	; 1
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	89 2f       	mov	r24, r25
    1242:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>
	{
		Local_u8Digit ++;
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
		Copy_s32Num /=10;
	}
	while (Local_u8Digit)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 23       	and	r24, r24
    124a:	49 f7       	brne	.-46     	; 0x121e <LCD_enuWriteIntegerNum+0x100>
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch (Local_Au8Digits[Local_u8Digit--]);
	}


	return Local_enuErrorState;
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    124e:	62 96       	adiw	r28, 0x12	; 18
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	08 95       	ret

00001264 <LCD_enuGoToPosition>:
ES_t LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Col)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <LCD_enuGoToPosition+0x6>
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8a 83       	std	Y+2, r24	; 0x02
    1272:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1274:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Row >=1 && Copy_u8Row <=2 &&
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	88 23       	and	r24, r24
    127a:	11 f1       	breq	.+68     	; 0x12c0 <LCD_enuGoToPosition+0x5c>
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	f8 f4       	brcc	.+62     	; 0x12c0 <LCD_enuGoToPosition+0x5c>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 23       	and	r24, r24
    1286:	e1 f0       	breq	.+56     	; 0x12c0 <LCD_enuGoToPosition+0x5c>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	81 31       	cpi	r24, 0x11	; 17
    128c:	c8 f4       	brcc	.+50     	; 0x12c0 <LCD_enuGoToPosition+0x5c>
			Copy_u8Col >=1 && Copy_u8Col <=16 )
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	67 e0       	ldi	r22, 0x07	; 7
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(0x80 + (Copy_u8Row-1)*0x40 + (Copy_u8Col-1));
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	00 24       	eor	r0, r0
    12a2:	96 95       	lsr	r25
    12a4:	87 95       	ror	r24
    12a6:	07 94       	ror	r0
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
    12ac:	07 94       	ror	r0
    12ae:	98 2f       	mov	r25, r24
    12b0:	80 2d       	mov	r24, r0
    12b2:	98 2f       	mov	r25, r24
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	89 0f       	add	r24, r25
    12b8:	81 50       	subi	r24, 0x01	; 1
    12ba:	0e 94 69 09 	call	0x12d2	; 0x12d2 <LCD_enuWriteNLatch>
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <LCD_enuGoToPosition+0x60>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch (u8 Copy_u8Byte)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	ea 97       	sbiw	r28, 0x3a	; 58
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	8a af       	std	Y+58, r24	; 0x3a
	ES_t Local_enuErrorState = ES_NOK;
    12e8:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	62 e0       	ldi	r22, 0x02	; 2
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
	_delay_ms(10);

#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP, D7_PIN,  ((Copy_u8Byte>>7)&1)  );
    12fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1300:	98 2f       	mov	r25, r24
    1302:	99 1f       	adc	r25, r25
    1304:	99 27       	eor	r25, r25
    1306:	99 1f       	adc	r25, r25
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	66 e0       	ldi	r22, 0x06	; 6
    130c:	49 2f       	mov	r20, r25
    130e:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  ((Copy_u8Byte>>6)&1)  );
    1312:	8a ad       	ldd	r24, Y+58	; 0x3a
    1314:	82 95       	swap	r24
    1316:	86 95       	lsr	r24
    1318:	86 95       	lsr	r24
    131a:	83 70       	andi	r24, 0x03	; 3
    131c:	98 2f       	mov	r25, r24
    131e:	91 70       	andi	r25, 0x01	; 1
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	65 e0       	ldi	r22, 0x05	; 5
    1324:	49 2f       	mov	r20, r25
    1326:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  ((Copy_u8Byte>>5)&1)  );
    132a:	8a ad       	ldd	r24, Y+58	; 0x3a
    132c:	82 95       	swap	r24
    132e:	86 95       	lsr	r24
    1330:	87 70       	andi	r24, 0x07	; 7
    1332:	98 2f       	mov	r25, r24
    1334:	91 70       	andi	r25, 0x01	; 1
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	64 e0       	ldi	r22, 0x04	; 4
    133a:	49 2f       	mov	r20, r25
    133c:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  ((Copy_u8Byte>>4)&1)  );
    1340:	8a ad       	ldd	r24, Y+58	; 0x3a
    1342:	82 95       	swap	r24
    1344:	8f 70       	andi	r24, 0x0F	; 15
    1346:	98 2f       	mov	r25, r24
    1348:	91 70       	andi	r25, 0x01	; 1
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	63 e0       	ldi	r22, 0x03	; 3
    134e:	49 2f       	mov	r20, r25
    1350:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	62 e0       	ldi	r22, 0x02	; 2
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a0 e2       	ldi	r26, 0x20	; 32
    1364:	b1 e4       	ldi	r27, 0x41	; 65
    1366:	8d ab       	std	Y+53, r24	; 0x35
    1368:	9e ab       	std	Y+54, r25	; 0x36
    136a:	af ab       	std	Y+55, r26	; 0x37
    136c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136e:	6d a9       	ldd	r22, Y+53	; 0x35
    1370:	7e a9       	ldd	r23, Y+54	; 0x36
    1372:	8f a9       	ldd	r24, Y+55	; 0x37
    1374:	98 ad       	ldd	r25, Y+56	; 0x38
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a ef       	ldi	r20, 0xFA	; 250
    137c:	54 e4       	ldi	r21, 0x44	; 68
    137e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	89 ab       	std	Y+49, r24	; 0x31
    1388:	9a ab       	std	Y+50, r25	; 0x32
    138a:	ab ab       	std	Y+51, r26	; 0x33
    138c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    138e:	69 a9       	ldd	r22, Y+49	; 0x31
    1390:	7a a9       	ldd	r23, Y+50	; 0x32
    1392:	8b a9       	ldd	r24, Y+51	; 0x33
    1394:	9c a9       	ldd	r25, Y+52	; 0x34
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5f e3       	ldi	r21, 0x3F	; 63
    139e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a2:	88 23       	and	r24, r24
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <LCD_enuWriteNLatch+0xde>
		__ticks = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	98 ab       	std	Y+48, r25	; 0x30
    13ac:	8f a7       	std	Y+47, r24	; 0x2f
    13ae:	3f c0       	rjmp	.+126    	; 0x142e <LCD_enuWriteNLatch+0x15c>
	else if (__tmp > 65535)
    13b0:	69 a9       	ldd	r22, Y+49	; 0x31
    13b2:	7a a9       	ldd	r23, Y+50	; 0x32
    13b4:	8b a9       	ldd	r24, Y+51	; 0x33
    13b6:	9c a9       	ldd	r25, Y+52	; 0x34
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	57 e4       	ldi	r21, 0x47	; 71
    13c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	4c f5       	brge	.+82     	; 0x141a <LCD_enuWriteNLatch+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	6d a9       	ldd	r22, Y+53	; 0x35
    13ca:	7e a9       	ldd	r23, Y+54	; 0x36
    13cc:	8f a9       	ldd	r24, Y+55	; 0x37
    13ce:	98 ad       	ldd	r25, Y+56	; 0x38
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	bc 01       	movw	r22, r24
    13e2:	cd 01       	movw	r24, r26
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	98 ab       	std	Y+48, r25	; 0x30
    13ee:	8f a7       	std	Y+47, r24	; 0x2f
    13f0:	0f c0       	rjmp	.+30     	; 0x1410 <LCD_enuWriteNLatch+0x13e>
    13f2:	88 ec       	ldi	r24, 0xC8	; 200
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9e a7       	std	Y+46, r25	; 0x2e
    13f8:	8d a7       	std	Y+45, r24	; 0x2d
    13fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    13fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <LCD_enuWriteNLatch+0x12c>
    1402:	9e a7       	std	Y+46, r25	; 0x2e
    1404:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1406:	8f a5       	ldd	r24, Y+47	; 0x2f
    1408:	98 a9       	ldd	r25, Y+48	; 0x30
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	98 ab       	std	Y+48, r25	; 0x30
    140e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1410:	8f a5       	ldd	r24, Y+47	; 0x2f
    1412:	98 a9       	ldd	r25, Y+48	; 0x30
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	69 f7       	brne	.-38     	; 0x13f2 <LCD_enuWriteNLatch+0x120>
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <LCD_enuWriteNLatch+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141a:	69 a9       	ldd	r22, Y+49	; 0x31
    141c:	7a a9       	ldd	r23, Y+50	; 0x32
    141e:	8b a9       	ldd	r24, Y+51	; 0x33
    1420:	9c a9       	ldd	r25, Y+52	; 0x34
    1422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	98 ab       	std	Y+48, r25	; 0x30
    142c:	8f a7       	std	Y+47, r24	; 0x2f
    142e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1430:	98 a9       	ldd	r25, Y+48	; 0x30
    1432:	9c a7       	std	Y+44, r25	; 0x2c
    1434:	8b a7       	std	Y+43, r24	; 0x2b
    1436:	8b a5       	ldd	r24, Y+43	; 0x2b
    1438:	9c a5       	ldd	r25, Y+44	; 0x2c
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <LCD_enuWriteNLatch+0x168>
    143e:	9c a7       	std	Y+44, r25	; 0x2c
    1440:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	62 e0       	ldi	r22, 0x02	; 2
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a0 e2       	ldi	r26, 0x20	; 32
    1452:	b1 e4       	ldi	r27, 0x41	; 65
    1454:	8f a3       	std	Y+39, r24	; 0x27
    1456:	98 a7       	std	Y+40, r25	; 0x28
    1458:	a9 a7       	std	Y+41, r26	; 0x29
    145a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145c:	6f a1       	ldd	r22, Y+39	; 0x27
    145e:	78 a5       	ldd	r23, Y+40	; 0x28
    1460:	89 a5       	ldd	r24, Y+41	; 0x29
    1462:	9a a5       	ldd	r25, Y+42	; 0x2a
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	4a ef       	ldi	r20, 0xFA	; 250
    146a:	54 e4       	ldi	r21, 0x44	; 68
    146c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	8b a3       	std	Y+35, r24	; 0x23
    1476:	9c a3       	std	Y+36, r25	; 0x24
    1478:	ad a3       	std	Y+37, r26	; 0x25
    147a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    147c:	6b a1       	ldd	r22, Y+35	; 0x23
    147e:	7c a1       	ldd	r23, Y+36	; 0x24
    1480:	8d a1       	ldd	r24, Y+37	; 0x25
    1482:	9e a1       	ldd	r25, Y+38	; 0x26
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	5f e3       	ldi	r21, 0x3F	; 63
    148c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1490:	88 23       	and	r24, r24
    1492:	2c f4       	brge	.+10     	; 0x149e <LCD_enuWriteNLatch+0x1cc>
		__ticks = 1;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	9a a3       	std	Y+34, r25	; 0x22
    149a:	89 a3       	std	Y+33, r24	; 0x21
    149c:	3f c0       	rjmp	.+126    	; 0x151c <LCD_enuWriteNLatch+0x24a>
	else if (__tmp > 65535)
    149e:	6b a1       	ldd	r22, Y+35	; 0x23
    14a0:	7c a1       	ldd	r23, Y+36	; 0x24
    14a2:	8d a1       	ldd	r24, Y+37	; 0x25
    14a4:	9e a1       	ldd	r25, Y+38	; 0x26
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	3f ef       	ldi	r19, 0xFF	; 255
    14aa:	4f e7       	ldi	r20, 0x7F	; 127
    14ac:	57 e4       	ldi	r21, 0x47	; 71
    14ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b2:	18 16       	cp	r1, r24
    14b4:	4c f5       	brge	.+82     	; 0x1508 <LCD_enuWriteNLatch+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b6:	6f a1       	ldd	r22, Y+39	; 0x27
    14b8:	78 a5       	ldd	r23, Y+40	; 0x28
    14ba:	89 a5       	ldd	r24, Y+41	; 0x29
    14bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e2       	ldi	r20, 0x20	; 32
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	9a a3       	std	Y+34, r25	; 0x22
    14dc:	89 a3       	std	Y+33, r24	; 0x21
    14de:	0f c0       	rjmp	.+30     	; 0x14fe <LCD_enuWriteNLatch+0x22c>
    14e0:	88 ec       	ldi	r24, 0xC8	; 200
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	98 a3       	std	Y+32, r25	; 0x20
    14e6:	8f 8f       	std	Y+31, r24	; 0x1f
    14e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14ea:	98 a1       	ldd	r25, Y+32	; 0x20
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <LCD_enuWriteNLatch+0x21a>
    14f0:	98 a3       	std	Y+32, r25	; 0x20
    14f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f4:	89 a1       	ldd	r24, Y+33	; 0x21
    14f6:	9a a1       	ldd	r25, Y+34	; 0x22
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	9a a3       	std	Y+34, r25	; 0x22
    14fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1500:	9a a1       	ldd	r25, Y+34	; 0x22
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	69 f7       	brne	.-38     	; 0x14e0 <LCD_enuWriteNLatch+0x20e>
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <LCD_enuWriteNLatch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1508:	6b a1       	ldd	r22, Y+35	; 0x23
    150a:	7c a1       	ldd	r23, Y+36	; 0x24
    150c:	8d a1       	ldd	r24, Y+37	; 0x25
    150e:	9e a1       	ldd	r25, Y+38	; 0x26
    1510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	9a a3       	std	Y+34, r25	; 0x22
    151a:	89 a3       	std	Y+33, r24	; 0x21
    151c:	89 a1       	ldd	r24, Y+33	; 0x21
    151e:	9a a1       	ldd	r25, Y+34	; 0x22
    1520:	9e 8f       	std	Y+30, r25	; 0x1e
    1522:	8d 8f       	std	Y+29, r24	; 0x1d
    1524:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1526:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <LCD_enuWriteNLatch+0x256>
    152c:	9e 8f       	std	Y+30, r25	; 0x1e
    152e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	DIO_enuSetPinValue(D7_GRP, D7_PIN,  ((Copy_u8Byte>>3)&1)  );
    1530:	8a ad       	ldd	r24, Y+58	; 0x3a
    1532:	86 95       	lsr	r24
    1534:	86 95       	lsr	r24
    1536:	86 95       	lsr	r24
    1538:	98 2f       	mov	r25, r24
    153a:	91 70       	andi	r25, 0x01	; 1
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	66 e0       	ldi	r22, 0x06	; 6
    1540:	49 2f       	mov	r20, r25
    1542:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  ((Copy_u8Byte>>2)&1)  );
    1546:	8a ad       	ldd	r24, Y+58	; 0x3a
    1548:	86 95       	lsr	r24
    154a:	86 95       	lsr	r24
    154c:	98 2f       	mov	r25, r24
    154e:	91 70       	andi	r25, 0x01	; 1
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	65 e0       	ldi	r22, 0x05	; 5
    1554:	49 2f       	mov	r20, r25
    1556:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  ((Copy_u8Byte>>1)&1)  );
    155a:	8a ad       	ldd	r24, Y+58	; 0x3a
    155c:	86 95       	lsr	r24
    155e:	98 2f       	mov	r25, r24
    1560:	91 70       	andi	r25, 0x01	; 1
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	64 e0       	ldi	r22, 0x04	; 4
    1566:	49 2f       	mov	r20, r25
    1568:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  ((Copy_u8Byte>>0)&1)  );
    156c:	8a ad       	ldd	r24, Y+58	; 0x3a
    156e:	98 2f       	mov	r25, r24
    1570:	91 70       	andi	r25, 0x01	; 1
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	63 e0       	ldi	r22, 0x03	; 3
    1576:	49 2f       	mov	r20, r25
    1578:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	62 e0       	ldi	r22, 0x02	; 2
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a0 e2       	ldi	r26, 0x20	; 32
    158c:	b1 e4       	ldi	r27, 0x41	; 65
    158e:	89 8f       	std	Y+25, r24	; 0x19
    1590:	9a 8f       	std	Y+26, r25	; 0x1a
    1592:	ab 8f       	std	Y+27, r26	; 0x1b
    1594:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1596:	69 8d       	ldd	r22, Y+25	; 0x19
    1598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    159a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    159c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a ef       	ldi	r20, 0xFA	; 250
    15a4:	54 e4       	ldi	r21, 0x44	; 68
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	8d 8b       	std	Y+21, r24	; 0x15
    15b0:	9e 8b       	std	Y+22, r25	; 0x16
    15b2:	af 8b       	std	Y+23, r26	; 0x17
    15b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15b6:	6d 89       	ldd	r22, Y+21	; 0x15
    15b8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ba:	8f 89       	ldd	r24, Y+23	; 0x17
    15bc:	98 8d       	ldd	r25, Y+24	; 0x18
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e8       	ldi	r20, 0x80	; 128
    15c4:	5f e3       	ldi	r21, 0x3F	; 63
    15c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <LCD_enuWriteNLatch+0x306>
		__ticks = 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 8b       	std	Y+20, r25	; 0x14
    15d4:	8b 8b       	std	Y+19, r24	; 0x13
    15d6:	3f c0       	rjmp	.+126    	; 0x1656 <LCD_enuWriteNLatch+0x384>
	else if (__tmp > 65535)
    15d8:	6d 89       	ldd	r22, Y+21	; 0x15
    15da:	7e 89       	ldd	r23, Y+22	; 0x16
    15dc:	8f 89       	ldd	r24, Y+23	; 0x17
    15de:	98 8d       	ldd	r25, Y+24	; 0x18
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	3f ef       	ldi	r19, 0xFF	; 255
    15e4:	4f e7       	ldi	r20, 0x7F	; 127
    15e6:	57 e4       	ldi	r21, 0x47	; 71
    15e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ec:	18 16       	cp	r1, r24
    15ee:	4c f5       	brge	.+82     	; 0x1642 <LCD_enuWriteNLatch+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f0:	69 8d       	ldd	r22, Y+25	; 0x19
    15f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e2       	ldi	r20, 0x20	; 32
    15fe:	51 e4       	ldi	r21, 0x41	; 65
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9c 8b       	std	Y+20, r25	; 0x14
    1616:	8b 8b       	std	Y+19, r24	; 0x13
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <LCD_enuWriteNLatch+0x366>
    161a:	88 ec       	ldi	r24, 0xC8	; 200
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9a 8b       	std	Y+18, r25	; 0x12
    1620:	89 8b       	std	Y+17, r24	; 0x11
    1622:	89 89       	ldd	r24, Y+17	; 0x11
    1624:	9a 89       	ldd	r25, Y+18	; 0x12
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <LCD_enuWriteNLatch+0x354>
    162a:	9a 8b       	std	Y+18, r25	; 0x12
    162c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	8b 89       	ldd	r24, Y+19	; 0x13
    1630:	9c 89       	ldd	r25, Y+20	; 0x14
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	9c 8b       	std	Y+20, r25	; 0x14
    1636:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	8b 89       	ldd	r24, Y+19	; 0x13
    163a:	9c 89       	ldd	r25, Y+20	; 0x14
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	69 f7       	brne	.-38     	; 0x161a <LCD_enuWriteNLatch+0x348>
    1640:	14 c0       	rjmp	.+40     	; 0x166a <LCD_enuWriteNLatch+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1642:	6d 89       	ldd	r22, Y+21	; 0x15
    1644:	7e 89       	ldd	r23, Y+22	; 0x16
    1646:	8f 89       	ldd	r24, Y+23	; 0x17
    1648:	98 8d       	ldd	r25, Y+24	; 0x18
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9c 8b       	std	Y+20, r25	; 0x14
    1654:	8b 8b       	std	Y+19, r24	; 0x13
    1656:	8b 89       	ldd	r24, Y+19	; 0x13
    1658:	9c 89       	ldd	r25, Y+20	; 0x14
    165a:	98 8b       	std	Y+16, r25	; 0x10
    165c:	8f 87       	std	Y+15, r24	; 0x0f
    165e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1660:	98 89       	ldd	r25, Y+16	; 0x10
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LCD_enuWriteNLatch+0x390>
    1666:	98 8b       	std	Y+16, r25	; 0x10
    1668:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	62 e0       	ldi	r22, 0x02	; 2
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 e2       	ldi	r26, 0x20	; 32
    167a:	b1 e4       	ldi	r27, 0x41	; 65
    167c:	8b 87       	std	Y+11, r24	; 0x0b
    167e:	9c 87       	std	Y+12, r25	; 0x0c
    1680:	ad 87       	std	Y+13, r26	; 0x0d
    1682:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1684:	6b 85       	ldd	r22, Y+11	; 0x0b
    1686:	7c 85       	ldd	r23, Y+12	; 0x0c
    1688:	8d 85       	ldd	r24, Y+13	; 0x0d
    168a:	9e 85       	ldd	r25, Y+14	; 0x0e
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	4a ef       	ldi	r20, 0xFA	; 250
    1692:	54 e4       	ldi	r21, 0x44	; 68
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8f 83       	std	Y+7, r24	; 0x07
    169e:	98 87       	std	Y+8, r25	; 0x08
    16a0:	a9 87       	std	Y+9, r26	; 0x09
    16a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a4:	6f 81       	ldd	r22, Y+7	; 0x07
    16a6:	78 85       	ldd	r23, Y+8	; 0x08
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e8       	ldi	r20, 0x80	; 128
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b8:	88 23       	and	r24, r24
    16ba:	2c f4       	brge	.+10     	; 0x16c6 <LCD_enuWriteNLatch+0x3f4>
		__ticks = 1;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	3f c0       	rjmp	.+126    	; 0x1744 <LCD_enuWriteNLatch+0x472>
	else if (__tmp > 65535)
    16c6:	6f 81       	ldd	r22, Y+7	; 0x07
    16c8:	78 85       	ldd	r23, Y+8	; 0x08
    16ca:	89 85       	ldd	r24, Y+9	; 0x09
    16cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	3f ef       	ldi	r19, 0xFF	; 255
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	57 e4       	ldi	r21, 0x47	; 71
    16d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	4c f5       	brge	.+82     	; 0x1730 <LCD_enuWriteNLatch+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16de:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e2       	ldi	r20, 0x20	; 32
    16ec:	51 e4       	ldi	r21, 0x41	; 65
    16ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9e 83       	std	Y+6, r25	; 0x06
    1704:	8d 83       	std	Y+5, r24	; 0x05
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <LCD_enuWriteNLatch+0x454>
    1708:	88 ec       	ldi	r24, 0xC8	; 200
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <LCD_enuWriteNLatch+0x442>
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	69 f7       	brne	.-38     	; 0x1708 <LCD_enuWriteNLatch+0x436>
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <LCD_enuWriteNLatch+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1730:	6f 81       	ldd	r22, Y+7	; 0x07
    1732:	78 85       	ldd	r23, Y+8	; 0x08
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <LCD_enuWriteNLatch+0x47e>
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

#else
#error "LCD Mode Configuration is wrong\n it must be EIGHT_BIT or FOUR_BIT"
#endif
	return Local_enuErrorState;
    1758:	89 ad       	ldd	r24, Y+57	; 0x39
}
    175a:	ea 96       	adiw	r28, 0x3a	; 58
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <GIE_enuInit>:
#include "../errorState.h"

#include "GIE_priv.h"

ES_t GIE_enuInit(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    1774:	f8 94       	cli
	//SREG &=~ (1<<7);
	return ES_OK;
    1776:	81 e0       	ldi	r24, 0x01	; 1
}
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <GIE_enuEnable>:

ES_t GIE_enuEnable(void)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
    1786:	78 94       	sei
	//SREG |=  (1<<7);
	return ES_OK;
    1788:	81 e0       	ldi	r24, 0x01	; 1
}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    1798:	f8 94       	cli
	//SREG &=~ (1<<7);
	return ES_OK;
    179a:	81 e0       	ldi	r24, 0x01	; 1
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	27 97       	sbiw	r28, 0x07	; 7
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	9d 83       	std	Y+5, r25	; 0x05
    17b8:	8c 83       	std	Y+4, r24	; 0x04
    17ba:	6e 83       	std	Y+6, r22	; 0x06
    17bc:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    17be:	8a e1       	ldi	r24, 0x1A	; 26
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <pvPortMalloc>
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <xCoRoutineCreate+0x32>
    17d2:	6f c0       	rjmp	.+222    	; 0x18b2 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    17d4:	80 91 84 00 	lds	r24, 0x0084
    17d8:	90 91 85 00 	lds	r25, 0x0085
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	41 f4       	brne	.+16     	; 0x17f0 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	90 93 85 00 	sts	0x0085, r25
    17e8:	80 93 84 00 	sts	0x0084, r24
			prvInitialiseCoRoutineLists();
    17ec:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	10 f0       	brcs	.+4      	; 0x17fa <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	11 8e       	std	Z+25, r1	; 0x19
    1800:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    1802:	e9 81       	ldd	r30, Y+1	; 0x01
    1804:	fa 81       	ldd	r31, Y+2	; 0x02
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    180a:	e9 81       	ldd	r30, Y+1	; 0x01
    180c:	fa 81       	ldd	r31, Y+2	; 0x02
    180e:	8f 81       	ldd	r24, Y+7	; 0x07
    1810:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    1812:	e9 81       	ldd	r30, Y+1	; 0x01
    1814:	fa 81       	ldd	r31, Y+2	; 0x02
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	9d 81       	ldd	r25, Y+5	; 0x05
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	02 96       	adiw	r24, 0x02	; 2
    1824:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	0c 96       	adiw	r24, 0x0c	; 12
    182e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    1832:	e9 81       	ldd	r30, Y+1	; 0x01
    1834:	fa 81       	ldd	r31, Y+2	; 0x02
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	91 87       	std	Z+9, r25	; 0x09
    183c:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	93 8b       	std	Z+19, r25	; 0x13
    1848:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    184a:	8e 81       	ldd	r24, Y+6	; 0x06
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	85 e0       	ldi	r24, 0x05	; 5
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	82 1b       	sub	r24, r18
    1856:	93 0b       	sbc	r25, r19
    1858:	e9 81       	ldd	r30, Y+1	; 0x01
    185a:	fa 81       	ldd	r31, Y+2	; 0x02
    185c:	95 87       	std	Z+13, r25	; 0x0d
    185e:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    1860:	e9 81       	ldd	r30, Y+1	; 0x01
    1862:	fa 81       	ldd	r31, Y+2	; 0x02
    1864:	96 89       	ldd	r25, Z+22	; 0x16
    1866:	80 91 86 00 	lds	r24, 0x0086
    186a:	89 17       	cp	r24, r25
    186c:	28 f4       	brcc	.+10     	; 0x1878 <xCoRoutineCreate+0xd6>
    186e:	e9 81       	ldd	r30, Y+1	; 0x01
    1870:	fa 81       	ldd	r31, Y+2	; 0x02
    1872:	86 89       	ldd	r24, Z+22	; 0x16
    1874:	80 93 86 00 	sts	0x0086, r24
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	86 89       	ldd	r24, Z+22	; 0x16
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	c9 01       	movw	r24, r18
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	ac 01       	movw	r20, r24
    1896:	43 57       	subi	r20, 0x73	; 115
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	9c 01       	movw	r18, r24
    18a0:	2e 5f       	subi	r18, 0xFE	; 254
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	ca 01       	movw	r24, r20
    18a6:	b9 01       	movw	r22, r18
    18a8:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>

		xReturn = pdPASS;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18b8:	27 96       	adiw	r28, 0x07	; 7
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <vCoRoutineAddToDelayedList+0x6>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <vCoRoutineAddToDelayedList+0x8>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <vCoRoutineAddToDelayedList+0xa>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	7e 83       	std	Y+6, r23	; 0x06
    18de:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    18e0:	20 91 87 00 	lds	r18, 0x0087
    18e4:	30 91 88 00 	lds	r19, 0x0088
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	82 0f       	add	r24, r18
    18ee:	93 1f       	adc	r25, r19
    18f0:	9a 83       	std	Y+2, r25	; 0x02
    18f2:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    18f4:	80 91 84 00 	lds	r24, 0x0084
    18f8:	90 91 85 00 	lds	r25, 0x0085
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    1902:	e0 91 84 00 	lds	r30, 0x0084
    1906:	f0 91 85 00 	lds	r31, 0x0085
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	93 83       	std	Z+3, r25	; 0x03
    1910:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    1912:	20 91 87 00 	lds	r18, 0x0087
    1916:	30 91 88 00 	lds	r19, 0x0088
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	9a 81       	ldd	r25, Y+2	; 0x02
    191e:	82 17       	cp	r24, r18
    1920:	93 07       	cpc	r25, r19
    1922:	70 f4       	brcc	.+28     	; 0x1940 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1924:	80 91 b3 00 	lds	r24, 0x00B3
    1928:	90 91 b4 00 	lds	r25, 0x00B4
    192c:	20 91 84 00 	lds	r18, 0x0084
    1930:	30 91 85 00 	lds	r19, 0x0085
    1934:	2e 5f       	subi	r18, 0xFE	; 254
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	b9 01       	movw	r22, r18
    193a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vListInsert>
    193e:	0d c0       	rjmp	.+26     	; 0x195a <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1940:	80 91 b1 00 	lds	r24, 0x00B1
    1944:	90 91 b2 00 	lds	r25, 0x00B2
    1948:	20 91 84 00 	lds	r18, 0x0084
    194c:	30 91 85 00 	lds	r19, 0x0085
    1950:	2e 5f       	subi	r18, 0xFE	; 254
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
    1954:	b9 01       	movw	r22, r18
    1956:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vListInsert>
	}

	if( pxEventList )
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	61 f0       	breq	.+24     	; 0x197a <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    1962:	80 91 84 00 	lds	r24, 0x0084
    1966:	90 91 85 00 	lds	r25, 0x0085
    196a:	9c 01       	movw	r18, r24
    196c:	24 5f       	subi	r18, 0xF4	; 244
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	b9 01       	movw	r22, r18
    1976:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vListInsert>
	}
}
    197a:	26 96       	adiw	r28, 0x06	; 6
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <prvCheckPendingReadyList+0x6>
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	3a c0       	rjmp	.+116    	; 0x1a0c <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    1998:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    199a:	e0 91 ba 00 	lds	r30, 0x00BA
    199e:	f0 91 bb 00 	lds	r31, 0x00BB
    19a2:	86 81       	ldd	r24, Z+6	; 0x06
    19a4:	97 81       	ldd	r25, Z+7	; 0x07
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	0c 96       	adiw	r24, 0x0c	; 12
    19b0:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
		}
		portENABLE_INTERRUPTS();
    19b4:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ba:	02 96       	adiw	r24, 0x02	; 2
    19bc:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    19c0:	e9 81       	ldd	r30, Y+1	; 0x01
    19c2:	fa 81       	ldd	r31, Y+2	; 0x02
    19c4:	96 89       	ldd	r25, Z+22	; 0x16
    19c6:	80 91 86 00 	lds	r24, 0x0086
    19ca:	89 17       	cp	r24, r25
    19cc:	28 f4       	brcc	.+10     	; 0x19d8 <prvCheckPendingReadyList+0x4c>
    19ce:	e9 81       	ldd	r30, Y+1	; 0x01
    19d0:	fa 81       	ldd	r31, Y+2	; 0x02
    19d2:	86 89       	ldd	r24, Z+22	; 0x16
    19d4:	80 93 86 00 	sts	0x0086, r24
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	86 89       	ldd	r24, Z+22	; 0x16
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	c9 01       	movw	r24, r18
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	82 0f       	add	r24, r18
    19f2:	93 1f       	adc	r25, r19
    19f4:	ac 01       	movw	r20, r24
    19f6:	43 57       	subi	r20, 0x73	; 115
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	9c 01       	movw	r18, r24
    1a00:	2e 5f       	subi	r18, 0xFE	; 254
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	ca 01       	movw	r24, r20
    1a06:	b9 01       	movw	r22, r18
    1a08:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    1a0c:	80 91 b5 00 	lds	r24, 0x00B5
    1a10:	88 23       	and	r24, r24
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <prvCheckPendingReadyList+0x8a>
    1a14:	c1 cf       	rjmp	.-126    	; 0x1998 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <prvCheckDelayedList+0x6>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <prvCheckDelayedList+0x8>
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    1a2c:	0e 94 0d 1b 	call	0x361a	; 0x361a <xTaskGetTickCount>
    1a30:	20 91 89 00 	lds	r18, 0x0089
    1a34:	30 91 8a 00 	lds	r19, 0x008A
    1a38:	82 1b       	sub	r24, r18
    1a3a:	93 0b       	sbc	r25, r19
    1a3c:	90 93 8c 00 	sts	0x008C, r25
    1a40:	80 93 8b 00 	sts	0x008B, r24
    1a44:	85 c0       	rjmp	.+266    	; 0x1b50 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    1a46:	80 91 87 00 	lds	r24, 0x0087
    1a4a:	90 91 88 00 	lds	r25, 0x0088
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	90 93 88 00 	sts	0x0088, r25
    1a54:	80 93 87 00 	sts	0x0087, r24
		xPassedTicks--;
    1a58:	80 91 8b 00 	lds	r24, 0x008B
    1a5c:	90 91 8c 00 	lds	r25, 0x008C
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	90 93 8c 00 	sts	0x008C, r25
    1a66:	80 93 8b 00 	sts	0x008B, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    1a6a:	80 91 87 00 	lds	r24, 0x0087
    1a6e:	90 91 88 00 	lds	r25, 0x0088
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <prvCheckDelayedList+0x58>
    1a76:	64 c0       	rjmp	.+200    	; 0x1b40 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1a78:	80 91 b1 00 	lds	r24, 0x00B1
    1a7c:	90 91 b2 00 	lds	r25, 0x00B2
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1a84:	80 91 b3 00 	lds	r24, 0x00B3
    1a88:	90 91 b4 00 	lds	r25, 0x00B4
    1a8c:	90 93 b2 00 	sts	0x00B2, r25
    1a90:	80 93 b1 00 	sts	0x00B1, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	90 93 b4 00 	sts	0x00B4, r25
    1a9c:	80 93 b3 00 	sts	0x00B3, r24
    1aa0:	4f c0       	rjmp	.+158    	; 0x1b40 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    1aa2:	e0 91 b1 00 	lds	r30, 0x00B1
    1aa6:	f0 91 b2 00 	lds	r31, 0x00B2
    1aaa:	05 80       	ldd	r0, Z+5	; 0x05
    1aac:	f6 81       	ldd	r31, Z+6	; 0x06
    1aae:	e0 2d       	mov	r30, r0
    1ab0:	86 81       	ldd	r24, Z+6	; 0x06
    1ab2:	97 81       	ldd	r25, Z+7	; 0x07
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    1ab8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aba:	fc 81       	ldd	r31, Y+4	; 0x04
    1abc:	22 81       	ldd	r18, Z+2	; 0x02
    1abe:	33 81       	ldd	r19, Z+3	; 0x03
    1ac0:	80 91 87 00 	lds	r24, 0x0087
    1ac4:	90 91 88 00 	lds	r25, 0x0088
    1ac8:	82 17       	cp	r24, r18
    1aca:	93 07       	cpc	r25, r19
    1acc:	08 f4       	brcc	.+2      	; 0x1ad0 <prvCheckDelayedList+0xb0>
    1ace:	40 c0       	rjmp	.+128    	; 0x1b50 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    1ad0:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	02 96       	adiw	r24, 0x02	; 2
    1ad8:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    1adc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ade:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae0:	84 89       	ldd	r24, Z+20	; 0x14
    1ae2:	95 89       	ldd	r25, Z+21	; 0x15
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	29 f0       	breq	.+10     	; 0x1af2 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	0c 96       	adiw	r24, 0x0c	; 12
    1aee:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    1af2:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    1af4:	eb 81       	ldd	r30, Y+3	; 0x03
    1af6:	fc 81       	ldd	r31, Y+4	; 0x04
    1af8:	96 89       	ldd	r25, Z+22	; 0x16
    1afa:	80 91 86 00 	lds	r24, 0x0086
    1afe:	89 17       	cp	r24, r25
    1b00:	28 f4       	brcc	.+10     	; 0x1b0c <prvCheckDelayedList+0xec>
    1b02:	eb 81       	ldd	r30, Y+3	; 0x03
    1b04:	fc 81       	ldd	r31, Y+4	; 0x04
    1b06:	86 89       	ldd	r24, Z+22	; 0x16
    1b08:	80 93 86 00 	sts	0x0086, r24
    1b0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b10:	86 89       	ldd	r24, Z+22	; 0x16
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	c9 01       	movw	r24, r18
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	82 0f       	add	r24, r18
    1b26:	93 1f       	adc	r25, r19
    1b28:	ac 01       	movw	r20, r24
    1b2a:	43 57       	subi	r20, 0x73	; 115
    1b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	9c 01       	movw	r18, r24
    1b34:	2e 5f       	subi	r18, 0xFE	; 254
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
    1b38:	ca 01       	movw	r24, r20
    1b3a:	b9 01       	movw	r22, r18
    1b3c:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    1b40:	e0 91 b1 00 	lds	r30, 0x00B1
    1b44:	f0 91 b2 00 	lds	r31, 0x00B2
    1b48:	80 81       	ld	r24, Z
    1b4a:	88 23       	and	r24, r24
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <prvCheckDelayedList+0x130>
    1b4e:	a9 cf       	rjmp	.-174    	; 0x1aa2 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    1b50:	80 91 8b 00 	lds	r24, 0x008B
    1b54:	90 91 8c 00 	lds	r25, 0x008C
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <prvCheckDelayedList+0x13e>
    1b5c:	74 cf       	rjmp	.-280    	; 0x1a46 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    1b5e:	80 91 87 00 	lds	r24, 0x0087
    1b62:	90 91 88 00 	lds	r25, 0x0088
    1b66:	90 93 8a 00 	sts	0x008A, r25
    1b6a:	80 93 89 00 	sts	0x0089, r24
}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <vCoRoutineSchedule+0x6>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    1b86:	0e 94 c6 0c 	call	0x198c	; 0x198c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    1b8a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <prvCheckDelayedList>
    1b8e:	0a c0       	rjmp	.+20     	; 0x1ba4 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    1b90:	80 91 86 00 	lds	r24, 0x0086
    1b94:	88 23       	and	r24, r24
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <vCoRoutineSchedule+0x1e>
    1b98:	66 c0       	rjmp	.+204    	; 0x1c66 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    1b9a:	80 91 86 00 	lds	r24, 0x0086
    1b9e:	81 50       	subi	r24, 0x01	; 1
    1ba0:	80 93 86 00 	sts	0x0086, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1ba4:	80 91 86 00 	lds	r24, 0x0086
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	c9 01       	movw	r24, r18
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	82 0f       	add	r24, r18
    1bbc:	93 1f       	adc	r25, r19
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	e3 57       	subi	r30, 0x73	; 115
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	88 23       	and	r24, r24
    1bc8:	19 f3       	breq	.-58     	; 0x1b90 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    1bca:	80 91 86 00 	lds	r24, 0x0086
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	c9 01       	movw	r24, r18
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	82 0f       	add	r24, r18
    1be2:	93 1f       	adc	r25, r19
    1be4:	83 57       	subi	r24, 0x73	; 115
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	e9 81       	ldd	r30, Y+1	; 0x01
    1bee:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf0:	01 80       	ldd	r0, Z+1	; 0x01
    1bf2:	f2 81       	ldd	r31, Z+2	; 0x02
    1bf4:	e0 2d       	mov	r30, r0
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfe:	92 83       	std	Z+2, r25	; 0x02
    1c00:	81 83       	std	Z+1, r24	; 0x01
    1c02:	e9 81       	ldd	r30, Y+1	; 0x01
    1c04:	fa 81       	ldd	r31, Y+2	; 0x02
    1c06:	21 81       	ldd	r18, Z+1	; 0x01
    1c08:	32 81       	ldd	r19, Z+2	; 0x02
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	03 96       	adiw	r24, 0x03	; 3
    1c10:	28 17       	cp	r18, r24
    1c12:	39 07       	cpc	r19, r25
    1c14:	59 f4       	brne	.+22     	; 0x1c2c <vCoRoutineSchedule+0xb0>
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	01 80       	ldd	r0, Z+1	; 0x01
    1c1c:	f2 81       	ldd	r31, Z+2	; 0x02
    1c1e:	e0 2d       	mov	r30, r0
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	e9 81       	ldd	r30, Y+1	; 0x01
    1c26:	fa 81       	ldd	r31, Y+2	; 0x02
    1c28:	92 83       	std	Z+2, r25	; 0x02
    1c2a:	81 83       	std	Z+1, r24	; 0x01
    1c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c30:	01 80       	ldd	r0, Z+1	; 0x01
    1c32:	f2 81       	ldd	r31, Z+2	; 0x02
    1c34:	e0 2d       	mov	r30, r0
    1c36:	86 81       	ldd	r24, Z+6	; 0x06
    1c38:	97 81       	ldd	r25, Z+7	; 0x07
    1c3a:	90 93 85 00 	sts	0x0085, r25
    1c3e:	80 93 84 00 	sts	0x0084, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    1c42:	e0 91 84 00 	lds	r30, 0x0084
    1c46:	f0 91 85 00 	lds	r31, 0x0085
    1c4a:	40 81       	ld	r20, Z
    1c4c:	51 81       	ldd	r21, Z+1	; 0x01
    1c4e:	80 91 84 00 	lds	r24, 0x0084
    1c52:	90 91 85 00 	lds	r25, 0x0085
    1c56:	e0 91 84 00 	lds	r30, 0x0084
    1c5a:	f0 91 85 00 	lds	r31, 0x0085
    1c5e:	27 89       	ldd	r18, Z+23	; 0x17
    1c60:	62 2f       	mov	r22, r18
    1c62:	fa 01       	movw	r30, r20
    1c64:	09 95       	icall

	return;
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1c7a:	19 82       	std	Y+1, r1	; 0x01
    1c7c:	13 c0       	rjmp	.+38     	; 0x1ca4 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	c9 01       	movw	r24, r18
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	82 0f       	add	r24, r18
    1c94:	93 1f       	adc	r25, r19
    1c96:	83 57       	subi	r24, 0x73	; 115
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	50 f3       	brcs	.-44     	; 0x1c7e <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    1caa:	8f e9       	ldi	r24, 0x9F	; 159
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    1cb2:	88 ea       	ldi	r24, 0xA8	; 168
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    1cba:	85 eb       	ldi	r24, 0xB5	; 181
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1cc2:	8f e9       	ldi	r24, 0x9F	; 159
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	90 93 b2 00 	sts	0x00B2, r25
    1cca:	80 93 b1 00 	sts	0x00B1, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1cce:	88 ea       	ldi	r24, 0xA8	; 168
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	90 93 b4 00 	sts	0x00B4, r25
    1cd6:	80 93 b3 00 	sts	0x00B3, r24
}
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <xCoRoutineRemoveFromEventList+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <xCoRoutineRemoveFromEventList+0x8>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	9d 83       	std	Y+5, r25	; 0x05
    1cf2:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1cf4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cf6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cf8:	05 80       	ldd	r0, Z+5	; 0x05
    1cfa:	f6 81       	ldd	r31, Z+6	; 0x06
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	86 81       	ldd	r24, Z+6	; 0x06
    1d00:	97 81       	ldd	r25, Z+7	; 0x07
    1d02:	9b 83       	std	Y+3, r25	; 0x03
    1d04:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0a:	0c 96       	adiw	r24, 0x0c	; 12
    1d0c:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	9b 81       	ldd	r25, Y+3	; 0x03
    1d14:	9c 01       	movw	r18, r24
    1d16:	24 5f       	subi	r18, 0xF4	; 244
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	85 eb       	ldi	r24, 0xB5	; 181
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	b9 01       	movw	r22, r18
    1d20:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    1d24:	ea 81       	ldd	r30, Y+2	; 0x02
    1d26:	fb 81       	ldd	r31, Y+3	; 0x03
    1d28:	96 89       	ldd	r25, Z+22	; 0x16
    1d2a:	e0 91 84 00 	lds	r30, 0x0084
    1d2e:	f0 91 85 00 	lds	r31, 0x0085
    1d32:	86 89       	ldd	r24, Z+22	; 0x16
    1d34:	98 17       	cp	r25, r24
    1d36:	18 f0       	brcs	.+6      	; 0x1d3e <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    1d3e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <pvPortMalloc+0x6>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <pvPortMalloc+0x8>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    1d62:	1a 82       	std	Y+2, r1	; 0x02
    1d64:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    1d66:	0e 94 77 1a 	call	0x34ee	; 0x34ee <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    1d6a:	80 91 be 00 	lds	r24, 0x00BE
    1d6e:	90 91 bf 00 	lds	r25, 0x00BF
    1d72:	2b 81       	ldd	r18, Y+3	; 0x03
    1d74:	3c 81       	ldd	r19, Y+4	; 0x04
    1d76:	82 0f       	add	r24, r18
    1d78:	93 1f       	adc	r25, r19
    1d7a:	23 e0       	ldi	r18, 0x03	; 3
    1d7c:	88 3e       	cpi	r24, 0xE8	; 232
    1d7e:	92 07       	cpc	r25, r18
    1d80:	18 f5       	brcc	.+70     	; 0x1dc8 <pvPortMalloc+0x76>
    1d82:	20 91 be 00 	lds	r18, 0x00BE
    1d86:	30 91 bf 00 	lds	r19, 0x00BF
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	28 0f       	add	r18, r24
    1d90:	39 1f       	adc	r19, r25
    1d92:	80 91 be 00 	lds	r24, 0x00BE
    1d96:	90 91 bf 00 	lds	r25, 0x00BF
    1d9a:	82 17       	cp	r24, r18
    1d9c:	93 07       	cpc	r25, r19
    1d9e:	a0 f4       	brcc	.+40     	; 0x1dc8 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    1da0:	80 91 be 00 	lds	r24, 0x00BE
    1da4:	90 91 bf 00 	lds	r25, 0x00BF
    1da8:	80 54       	subi	r24, 0x40	; 64
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	9a 83       	std	Y+2, r25	; 0x02
    1dae:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    1db0:	20 91 be 00 	lds	r18, 0x00BE
    1db4:	30 91 bf 00 	lds	r19, 0x00BF
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	90 93 bf 00 	sts	0x00BF, r25
    1dc4:	80 93 be 00 	sts	0x00BE, r24
		}	
	}
	xTaskResumeAll();
    1dc8:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <vPortFree+0x6>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    1dfe:	10 92 bf 00 	sts	0x00BF, r1
    1e02:	10 92 be 00 	sts	0x00BE, r1
}
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    1e14:	20 91 be 00 	lds	r18, 0x00BE
    1e18:	30 91 bf 00 	lds	r19, 0x00BF
    1e1c:	88 ee       	ldi	r24, 0xE8	; 232
    1e1e:	93 e0       	ldi	r25, 0x03	; 3
    1e20:	82 1b       	sub	r24, r18
    1e22:	93 0b       	sbc	r25, r19
}
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <vListInitialise+0x6>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3c:	03 96       	adiw	r24, 0x03	; 3
    1e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e40:	fa 81       	ldd	r31, Y+2	; 0x02
    1e42:	92 83       	std	Z+2, r25	; 0x02
    1e44:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	9f ef       	ldi	r25, 0xFF	; 255
    1e4e:	94 83       	std	Z+4, r25	; 0x04
    1e50:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	03 96       	adiw	r24, 0x03	; 3
    1e58:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5c:	96 83       	std	Z+6, r25	; 0x06
    1e5e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	03 96       	adiw	r24, 0x03	; 3
    1e66:	e9 81       	ldd	r30, Y+1	; 0x01
    1e68:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6a:	90 87       	std	Z+8, r25	; 0x08
    1e6c:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e70:	fa 81       	ldd	r31, Y+2	; 0x02
    1e72:	10 82       	st	Z, r1
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <vListInitialiseItem+0x6>
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	11 86       	std	Z+9, r1	; 0x09
    1e92:	10 86       	std	Z+8, r1	; 0x08
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <vListInsertEnd+0x6>
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <vListInsertEnd+0x8>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <vListInsertEnd+0xa>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    1eb0:	7e 83       	std	Y+6, r23	; 0x06
    1eb2:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1eb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb8:	81 81       	ldd	r24, Z+1	; 0x01
    1eba:	92 81       	ldd	r25, Z+2	; 0x02
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	ed 81       	ldd	r30, Y+5	; 0x05
    1eca:	fe 81       	ldd	r31, Y+6	; 0x06
    1ecc:	93 83       	std	Z+3, r25	; 0x03
    1ece:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1ed0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed4:	81 81       	ldd	r24, Z+1	; 0x01
    1ed6:	92 81       	ldd	r25, Z+2	; 0x02
    1ed8:	ed 81       	ldd	r30, Y+5	; 0x05
    1eda:	fe 81       	ldd	r31, Y+6	; 0x06
    1edc:	95 83       	std	Z+5, r25	; 0x05
    1ede:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee4:	02 80       	ldd	r0, Z+2	; 0x02
    1ee6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ee8:	e0 2d       	mov	r30, r0
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	95 83       	std	Z+5, r25	; 0x05
    1ef0:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    1efa:	93 83       	std	Z+3, r25	; 0x03
    1efc:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	eb 81       	ldd	r30, Y+3	; 0x03
    1f04:	fc 81       	ldd	r31, Y+4	; 0x04
    1f06:	92 83       	std	Z+2, r25	; 0x02
    1f08:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f0a:	ed 81       	ldd	r30, Y+5	; 0x05
    1f0c:	fe 81       	ldd	r31, Y+6	; 0x06
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	91 87       	std	Z+9, r25	; 0x09
    1f14:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1f16:	eb 81       	ldd	r30, Y+3	; 0x03
    1f18:	fc 81       	ldd	r31, Y+4	; 0x04
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f20:	fc 81       	ldd	r31, Y+4	; 0x04
    1f22:	80 83       	st	Z, r24
}
    1f24:	26 96       	adiw	r28, 0x06	; 6
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	28 97       	sbiw	r28, 0x08	; 8
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	78 87       	std	Y+8, r23	; 0x08
    1f50:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1f52:	ef 81       	ldd	r30, Y+7	; 0x07
    1f54:	f8 85       	ldd	r31, Y+8	; 0x08
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	2f ef       	ldi	r18, 0xFF	; 255
    1f64:	8f 3f       	cpi	r24, 0xFF	; 255
    1f66:	92 07       	cpc	r25, r18
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1f6a:	ed 81       	ldd	r30, Y+5	; 0x05
    1f6c:	fe 81       	ldd	r31, Y+6	; 0x06
    1f6e:	87 81       	ldd	r24, Z+7	; 0x07
    1f70:	90 85       	ldd	r25, Z+8	; 0x08
    1f72:	9c 83       	std	Y+4, r25	; 0x04
    1f74:	8b 83       	std	Y+3, r24	; 0x03
    1f76:	18 c0       	rjmp	.+48     	; 0x1fa8 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	03 96       	adiw	r24, 0x03	; 3
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	06 c0       	rjmp	.+12     	; 0x1f90 <vListInsert+0x5a>
    1f84:	eb 81       	ldd	r30, Y+3	; 0x03
    1f86:	fc 81       	ldd	r31, Y+4	; 0x04
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
    1f90:	eb 81       	ldd	r30, Y+3	; 0x03
    1f92:	fc 81       	ldd	r31, Y+4	; 0x04
    1f94:	02 80       	ldd	r0, Z+2	; 0x02
    1f96:	f3 81       	ldd	r31, Z+3	; 0x03
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	20 81       	ld	r18, Z
    1f9c:	31 81       	ldd	r19, Z+1	; 0x01
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	82 17       	cp	r24, r18
    1fa4:	93 07       	cpc	r25, r19
    1fa6:	70 f7       	brcc	.-36     	; 0x1f84 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1fa8:	eb 81       	ldd	r30, Y+3	; 0x03
    1faa:	fc 81       	ldd	r31, Y+4	; 0x04
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	ef 81       	ldd	r30, Y+7	; 0x07
    1fb2:	f8 85       	ldd	r31, Y+8	; 0x08
    1fb4:	93 83       	std	Z+3, r25	; 0x03
    1fb6:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1fb8:	ef 81       	ldd	r30, Y+7	; 0x07
    1fba:	f8 85       	ldd	r31, Y+8	; 0x08
    1fbc:	02 80       	ldd	r0, Z+2	; 0x02
    1fbe:	f3 81       	ldd	r31, Z+3	; 0x03
    1fc0:	e0 2d       	mov	r30, r0
    1fc2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc4:	98 85       	ldd	r25, Y+8	; 0x08
    1fc6:	95 83       	std	Z+5, r25	; 0x05
    1fc8:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1fca:	ef 81       	ldd	r30, Y+7	; 0x07
    1fcc:	f8 85       	ldd	r31, Y+8	; 0x08
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	95 83       	std	Z+5, r25	; 0x05
    1fd4:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    1fd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd8:	98 85       	ldd	r25, Y+8	; 0x08
    1fda:	eb 81       	ldd	r30, Y+3	; 0x03
    1fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fde:	93 83       	std	Z+3, r25	; 0x03
    1fe0:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1fe2:	ef 81       	ldd	r30, Y+7	; 0x07
    1fe4:	f8 85       	ldd	r31, Y+8	; 0x08
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	91 87       	std	Z+9, r25	; 0x09
    1fec:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1fee:	ed 81       	ldd	r30, Y+5	; 0x05
    1ff0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ff8:	fe 81       	ldd	r31, Y+6	; 0x06
    1ffa:	80 83       	st	Z, r24
}
    1ffc:	28 96       	adiw	r28, 0x08	; 8
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <vListRemove+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <vListRemove+0x8>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	9c 83       	std	Y+4, r25	; 0x04
    201c:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    201e:	eb 81       	ldd	r30, Y+3	; 0x03
    2020:	fc 81       	ldd	r31, Y+4	; 0x04
    2022:	a2 81       	ldd	r26, Z+2	; 0x02
    2024:	b3 81       	ldd	r27, Z+3	; 0x03
    2026:	eb 81       	ldd	r30, Y+3	; 0x03
    2028:	fc 81       	ldd	r31, Y+4	; 0x04
    202a:	84 81       	ldd	r24, Z+4	; 0x04
    202c:	95 81       	ldd	r25, Z+5	; 0x05
    202e:	15 96       	adiw	r26, 0x05	; 5
    2030:	9c 93       	st	X, r25
    2032:	8e 93       	st	-X, r24
    2034:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2036:	eb 81       	ldd	r30, Y+3	; 0x03
    2038:	fc 81       	ldd	r31, Y+4	; 0x04
    203a:	a4 81       	ldd	r26, Z+4	; 0x04
    203c:	b5 81       	ldd	r27, Z+5	; 0x05
    203e:	eb 81       	ldd	r30, Y+3	; 0x03
    2040:	fc 81       	ldd	r31, Y+4	; 0x04
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	13 96       	adiw	r26, 0x03	; 3
    2048:	9c 93       	st	X, r25
    204a:	8e 93       	st	-X, r24
    204c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    204e:	eb 81       	ldd	r30, Y+3	; 0x03
    2050:	fc 81       	ldd	r31, Y+4	; 0x04
    2052:	80 85       	ldd	r24, Z+8	; 0x08
    2054:	91 85       	ldd	r25, Z+9	; 0x09
    2056:	9a 83       	std	Y+2, r25	; 0x02
    2058:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    205a:	e9 81       	ldd	r30, Y+1	; 0x01
    205c:	fa 81       	ldd	r31, Y+2	; 0x02
    205e:	21 81       	ldd	r18, Z+1	; 0x01
    2060:	32 81       	ldd	r19, Z+2	; 0x02
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	28 17       	cp	r18, r24
    2068:	39 07       	cpc	r19, r25
    206a:	41 f4       	brne	.+16     	; 0x207c <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    206c:	eb 81       	ldd	r30, Y+3	; 0x03
    206e:	fc 81       	ldd	r31, Y+4	; 0x04
    2070:	84 81       	ldd	r24, Z+4	; 0x04
    2072:	95 81       	ldd	r25, Z+5	; 0x05
    2074:	e9 81       	ldd	r30, Y+1	; 0x01
    2076:	fa 81       	ldd	r31, Y+2	; 0x02
    2078:	92 83       	std	Z+2, r25	; 0x02
    207a:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    207c:	eb 81       	ldd	r30, Y+3	; 0x03
    207e:	fc 81       	ldd	r31, Y+4	; 0x04
    2080:	11 86       	std	Z+9, r1	; 0x09
    2082:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    2084:	e9 81       	ldd	r30, Y+1	; 0x01
    2086:	fa 81       	ldd	r31, Y+2	; 0x02
    2088:	80 81       	ld	r24, Z
    208a:	81 50       	subi	r24, 0x01	; 1
    208c:	e9 81       	ldd	r30, Y+1	; 0x01
    208e:	fa 81       	ldd	r31, Y+2	; 0x02
    2090:	80 83       	st	Z, r24
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	28 97       	sbiw	r28, 0x08	; 8
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	9c 83       	std	Y+4, r25	; 0x04
    20b6:	8b 83       	std	Y+3, r24	; 0x03
    20b8:	7e 83       	std	Y+6, r23	; 0x06
    20ba:	6d 83       	std	Y+5, r22	; 0x05
    20bc:	58 87       	std	Y+8, r21	; 0x08
    20be:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    20c0:	eb 81       	ldd	r30, Y+3	; 0x03
    20c2:	fc 81       	ldd	r31, Y+4	; 0x04
    20c4:	81 e1       	ldi	r24, 0x11	; 17
    20c6:	80 83       	st	Z, r24
	pxTopOfStack--;
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    20d2:	eb 81       	ldd	r30, Y+3	; 0x03
    20d4:	fc 81       	ldd	r31, Y+4	; 0x04
    20d6:	82 e2       	ldi	r24, 0x22	; 34
    20d8:	80 83       	st	Z, r24
	pxTopOfStack--;
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	9c 83       	std	Y+4, r25	; 0x04
    20e2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    20e4:	eb 81       	ldd	r30, Y+3	; 0x03
    20e6:	fc 81       	ldd	r31, Y+4	; 0x04
    20e8:	83 e3       	ldi	r24, 0x33	; 51
    20ea:	80 83       	st	Z, r24
	pxTopOfStack--;
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9c 83       	std	Y+4, r25	; 0x04
    20f4:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	eb 81       	ldd	r30, Y+3	; 0x03
    2102:	fc 81       	ldd	r31, Y+4	; 0x04
    2104:	80 83       	st	Z, r24
	pxTopOfStack--;
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	89 2f       	mov	r24, r25
    2116:	99 27       	eor	r25, r25
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	eb 81       	ldd	r30, Y+3	; 0x03
    2120:	fc 81       	ldd	r31, Y+4	; 0x04
    2122:	80 83       	st	Z, r24
	pxTopOfStack--;
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    212e:	eb 81       	ldd	r30, Y+3	; 0x03
    2130:	fc 81       	ldd	r31, Y+4	; 0x04
    2132:	10 82       	st	Z, r1
	pxTopOfStack--;
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    213e:	eb 81       	ldd	r30, Y+3	; 0x03
    2140:	fc 81       	ldd	r31, Y+4	; 0x04
    2142:	80 e8       	ldi	r24, 0x80	; 128
    2144:	80 83       	st	Z, r24
	pxTopOfStack--;
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2150:	eb 81       	ldd	r30, Y+3	; 0x03
    2152:	fc 81       	ldd	r31, Y+4	; 0x04
    2154:	10 82       	st	Z, r1
	pxTopOfStack--;
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2160:	eb 81       	ldd	r30, Y+3	; 0x03
    2162:	fc 81       	ldd	r31, Y+4	; 0x04
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	80 83       	st	Z, r24
	pxTopOfStack--;
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	9c 83       	std	Y+4, r25	; 0x04
    2170:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2172:	eb 81       	ldd	r30, Y+3	; 0x03
    2174:	fc 81       	ldd	r31, Y+4	; 0x04
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	80 83       	st	Z, r24
	pxTopOfStack--;
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	9c 83       	std	Y+4, r25	; 0x04
    2182:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2184:	eb 81       	ldd	r30, Y+3	; 0x03
    2186:	fc 81       	ldd	r31, Y+4	; 0x04
    2188:	84 e0       	ldi	r24, 0x04	; 4
    218a:	80 83       	st	Z, r24
	pxTopOfStack--;
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	9c 83       	std	Y+4, r25	; 0x04
    2194:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2196:	eb 81       	ldd	r30, Y+3	; 0x03
    2198:	fc 81       	ldd	r31, Y+4	; 0x04
    219a:	85 e0       	ldi	r24, 0x05	; 5
    219c:	80 83       	st	Z, r24
	pxTopOfStack--;
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	9c 83       	std	Y+4, r25	; 0x04
    21a6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    21a8:	eb 81       	ldd	r30, Y+3	; 0x03
    21aa:	fc 81       	ldd	r31, Y+4	; 0x04
    21ac:	86 e0       	ldi	r24, 0x06	; 6
    21ae:	80 83       	st	Z, r24
	pxTopOfStack--;
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    21ba:	eb 81       	ldd	r30, Y+3	; 0x03
    21bc:	fc 81       	ldd	r31, Y+4	; 0x04
    21be:	87 e0       	ldi	r24, 0x07	; 7
    21c0:	80 83       	st	Z, r24
	pxTopOfStack--;
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    21cc:	eb 81       	ldd	r30, Y+3	; 0x03
    21ce:	fc 81       	ldd	r31, Y+4	; 0x04
    21d0:	88 e0       	ldi	r24, 0x08	; 8
    21d2:	80 83       	st	Z, r24
	pxTopOfStack--;
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	9c 83       	std	Y+4, r25	; 0x04
    21dc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    21de:	eb 81       	ldd	r30, Y+3	; 0x03
    21e0:	fc 81       	ldd	r31, Y+4	; 0x04
    21e2:	89 e0       	ldi	r24, 0x09	; 9
    21e4:	80 83       	st	Z, r24
	pxTopOfStack--;
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    21f0:	eb 81       	ldd	r30, Y+3	; 0x03
    21f2:	fc 81       	ldd	r31, Y+4	; 0x04
    21f4:	80 e1       	ldi	r24, 0x10	; 16
    21f6:	80 83       	st	Z, r24
	pxTopOfStack--;
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2202:	eb 81       	ldd	r30, Y+3	; 0x03
    2204:	fc 81       	ldd	r31, Y+4	; 0x04
    2206:	81 e1       	ldi	r24, 0x11	; 17
    2208:	80 83       	st	Z, r24
	pxTopOfStack--;
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2214:	eb 81       	ldd	r30, Y+3	; 0x03
    2216:	fc 81       	ldd	r31, Y+4	; 0x04
    2218:	82 e1       	ldi	r24, 0x12	; 18
    221a:	80 83       	st	Z, r24
	pxTopOfStack--;
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9c 83       	std	Y+4, r25	; 0x04
    2224:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2226:	eb 81       	ldd	r30, Y+3	; 0x03
    2228:	fc 81       	ldd	r31, Y+4	; 0x04
    222a:	83 e1       	ldi	r24, 0x13	; 19
    222c:	80 83       	st	Z, r24
	pxTopOfStack--;
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9c 83       	std	Y+4, r25	; 0x04
    2236:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2238:	eb 81       	ldd	r30, Y+3	; 0x03
    223a:	fc 81       	ldd	r31, Y+4	; 0x04
    223c:	84 e1       	ldi	r24, 0x14	; 20
    223e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    224a:	eb 81       	ldd	r30, Y+3	; 0x03
    224c:	fc 81       	ldd	r31, Y+4	; 0x04
    224e:	85 e1       	ldi	r24, 0x15	; 21
    2250:	80 83       	st	Z, r24
	pxTopOfStack--;
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    225c:	eb 81       	ldd	r30, Y+3	; 0x03
    225e:	fc 81       	ldd	r31, Y+4	; 0x04
    2260:	86 e1       	ldi	r24, 0x16	; 22
    2262:	80 83       	st	Z, r24
	pxTopOfStack--;
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    226e:	eb 81       	ldd	r30, Y+3	; 0x03
    2270:	fc 81       	ldd	r31, Y+4	; 0x04
    2272:	87 e1       	ldi	r24, 0x17	; 23
    2274:	80 83       	st	Z, r24
	pxTopOfStack--;
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	9c 83       	std	Y+4, r25	; 0x04
    227e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    2280:	eb 81       	ldd	r30, Y+3	; 0x03
    2282:	fc 81       	ldd	r31, Y+4	; 0x04
    2284:	88 e1       	ldi	r24, 0x18	; 24
    2286:	80 83       	st	Z, r24
	pxTopOfStack--;
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9c 83       	std	Y+4, r25	; 0x04
    2290:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2292:	eb 81       	ldd	r30, Y+3	; 0x03
    2294:	fc 81       	ldd	r31, Y+4	; 0x04
    2296:	89 e1       	ldi	r24, 0x19	; 25
    2298:	80 83       	st	Z, r24
	pxTopOfStack--;
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	9c 83       	std	Y+4, r25	; 0x04
    22a2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    22a4:	eb 81       	ldd	r30, Y+3	; 0x03
    22a6:	fc 81       	ldd	r31, Y+4	; 0x04
    22a8:	80 e2       	ldi	r24, 0x20	; 32
    22aa:	80 83       	st	Z, r24
	pxTopOfStack--;
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9c 83       	std	Y+4, r25	; 0x04
    22b4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    22b6:	eb 81       	ldd	r30, Y+3	; 0x03
    22b8:	fc 81       	ldd	r31, Y+4	; 0x04
    22ba:	81 e2       	ldi	r24, 0x21	; 33
    22bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    22c8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ca:	fc 81       	ldd	r31, Y+4	; 0x04
    22cc:	82 e2       	ldi	r24, 0x22	; 34
    22ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9c 83       	std	Y+4, r25	; 0x04
    22d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    22da:	eb 81       	ldd	r30, Y+3	; 0x03
    22dc:	fc 81       	ldd	r31, Y+4	; 0x04
    22de:	83 e2       	ldi	r24, 0x23	; 35
    22e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    22ec:	8f 81       	ldd	r24, Y+7	; 0x07
    22ee:	98 85       	ldd	r25, Y+8	; 0x08
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	eb 81       	ldd	r30, Y+3	; 0x03
    22f8:	fc 81       	ldd	r31, Y+4	; 0x04
    22fa:	80 83       	st	Z, r24
	pxTopOfStack--;
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	89 2f       	mov	r24, r25
    230c:	99 27       	eor	r25, r25
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	eb 81       	ldd	r30, Y+3	; 0x03
    2316:	fc 81       	ldd	r31, Y+4	; 0x04
    2318:	80 83       	st	Z, r24
	pxTopOfStack--;
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2324:	eb 81       	ldd	r30, Y+3	; 0x03
    2326:	fc 81       	ldd	r31, Y+4	; 0x04
    2328:	86 e2       	ldi	r24, 0x26	; 38
    232a:	80 83       	st	Z, r24
	pxTopOfStack--;
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2336:	eb 81       	ldd	r30, Y+3	; 0x03
    2338:	fc 81       	ldd	r31, Y+4	; 0x04
    233a:	87 e2       	ldi	r24, 0x27	; 39
    233c:	80 83       	st	Z, r24
	pxTopOfStack--;
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    2348:	eb 81       	ldd	r30, Y+3	; 0x03
    234a:	fc 81       	ldd	r31, Y+4	; 0x04
    234c:	88 e2       	ldi	r24, 0x28	; 40
    234e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	9c 83       	std	Y+4, r25	; 0x04
    2358:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    235a:	eb 81       	ldd	r30, Y+3	; 0x03
    235c:	fc 81       	ldd	r31, Y+4	; 0x04
    235e:	89 e2       	ldi	r24, 0x29	; 41
    2360:	80 83       	st	Z, r24
	pxTopOfStack--;
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9c 83       	std	Y+4, r25	; 0x04
    236a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    236c:	eb 81       	ldd	r30, Y+3	; 0x03
    236e:	fc 81       	ldd	r31, Y+4	; 0x04
    2370:	80 e3       	ldi	r24, 0x30	; 48
    2372:	80 83       	st	Z, r24
	pxTopOfStack--;
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    237e:	eb 81       	ldd	r30, Y+3	; 0x03
    2380:	fc 81       	ldd	r31, Y+4	; 0x04
    2382:	81 e3       	ldi	r24, 0x31	; 49
    2384:	80 83       	st	Z, r24
	pxTopOfStack--;
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2394:	28 96       	adiw	r28, 0x08	; 8
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    23ae:	0e 94 c3 12 	call	0x2586	; 0x2586 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    23b2:	a0 91 a8 04 	lds	r26, 0x04A8
    23b6:	b0 91 a9 04 	lds	r27, 0x04A9
    23ba:	cd 91       	ld	r28, X+
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	dd 91       	ld	r29, X+
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	ff 91       	pop	r31
    23c4:	ef 91       	pop	r30
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	bf 91       	pop	r27
    23cc:	af 91       	pop	r26
    23ce:	9f 91       	pop	r25
    23d0:	8f 91       	pop	r24
    23d2:	7f 91       	pop	r23
    23d4:	6f 91       	pop	r22
    23d6:	5f 91       	pop	r21
    23d8:	4f 91       	pop	r20
    23da:	3f 91       	pop	r19
    23dc:	2f 91       	pop	r18
    23de:	1f 91       	pop	r17
    23e0:	0f 91       	pop	r16
    23e2:	ff 90       	pop	r15
    23e4:	ef 90       	pop	r14
    23e6:	df 90       	pop	r13
    23e8:	cf 90       	pop	r12
    23ea:	bf 90       	pop	r11
    23ec:	af 90       	pop	r10
    23ee:	9f 90       	pop	r9
    23f0:	8f 90       	pop	r8
    23f2:	7f 90       	pop	r7
    23f4:	6f 90       	pop	r6
    23f6:	5f 90       	pop	r5
    23f8:	4f 90       	pop	r4
    23fa:	3f 90       	pop	r3
    23fc:	2f 90       	pop	r2
    23fe:	1f 90       	pop	r1
    2400:	0f 90       	pop	r0
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2406:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2408:	81 e0       	ldi	r24, 0x01	; 1
}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    241e:	0f 92       	push	r0
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	0f 92       	push	r0
    2426:	1f 92       	push	r1
    2428:	11 24       	eor	r1, r1
    242a:	2f 92       	push	r2
    242c:	3f 92       	push	r3
    242e:	4f 92       	push	r4
    2430:	5f 92       	push	r5
    2432:	6f 92       	push	r6
    2434:	7f 92       	push	r7
    2436:	8f 92       	push	r8
    2438:	9f 92       	push	r9
    243a:	af 92       	push	r10
    243c:	bf 92       	push	r11
    243e:	cf 92       	push	r12
    2440:	df 92       	push	r13
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	2f 93       	push	r18
    244c:	3f 93       	push	r19
    244e:	4f 93       	push	r20
    2450:	5f 93       	push	r21
    2452:	6f 93       	push	r22
    2454:	7f 93       	push	r23
    2456:	8f 93       	push	r24
    2458:	9f 93       	push	r25
    245a:	af 93       	push	r26
    245c:	bf 93       	push	r27
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	ef 93       	push	r30
    2464:	ff 93       	push	r31
    2466:	a0 91 a8 04 	lds	r26, 0x04A8
    246a:	b0 91 a9 04 	lds	r27, 0x04A9
    246e:	0d b6       	in	r0, 0x3d	; 61
    2470:	0d 92       	st	X+, r0
    2472:	0e b6       	in	r0, 0x3e	; 62
    2474:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2476:	0e 94 17 1c 	call	0x382e	; 0x382e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    247a:	a0 91 a8 04 	lds	r26, 0x04A8
    247e:	b0 91 a9 04 	lds	r27, 0x04A9
    2482:	cd 91       	ld	r28, X+
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	dd 91       	ld	r29, X+
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	ff 91       	pop	r31
    248c:	ef 91       	pop	r30
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	bf 91       	pop	r27
    2494:	af 91       	pop	r26
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	7f 91       	pop	r23
    249c:	6f 91       	pop	r22
    249e:	5f 91       	pop	r21
    24a0:	4f 91       	pop	r20
    24a2:	3f 91       	pop	r19
    24a4:	2f 91       	pop	r18
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	7f 90       	pop	r7
    24bc:	6f 90       	pop	r6
    24be:	5f 90       	pop	r5
    24c0:	4f 90       	pop	r4
    24c2:	3f 90       	pop	r3
    24c4:	2f 90       	pop	r2
    24c6:	1f 90       	pop	r1
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    24ce:	08 95       	ret

000024d0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	0f 92       	push	r0
    24d8:	1f 92       	push	r1
    24da:	11 24       	eor	r1, r1
    24dc:	2f 92       	push	r2
    24de:	3f 92       	push	r3
    24e0:	4f 92       	push	r4
    24e2:	5f 92       	push	r5
    24e4:	6f 92       	push	r6
    24e6:	7f 92       	push	r7
    24e8:	8f 92       	push	r8
    24ea:	9f 92       	push	r9
    24ec:	af 92       	push	r10
    24ee:	bf 92       	push	r11
    24f0:	cf 92       	push	r12
    24f2:	df 92       	push	r13
    24f4:	ef 92       	push	r14
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	2f 93       	push	r18
    24fe:	3f 93       	push	r19
    2500:	4f 93       	push	r20
    2502:	5f 93       	push	r21
    2504:	6f 93       	push	r22
    2506:	7f 93       	push	r23
    2508:	8f 93       	push	r24
    250a:	9f 93       	push	r25
    250c:	af 93       	push	r26
    250e:	bf 93       	push	r27
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	ef 93       	push	r30
    2516:	ff 93       	push	r31
    2518:	a0 91 a8 04 	lds	r26, 0x04A8
    251c:	b0 91 a9 04 	lds	r27, 0x04A9
    2520:	0d b6       	in	r0, 0x3d	; 61
    2522:	0d 92       	st	X+, r0
    2524:	0e b6       	in	r0, 0x3e	; 62
    2526:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2528:	0e 94 42 1b 	call	0x3684	; 0x3684 <vTaskIncrementTick>
	vTaskSwitchContext();
    252c:	0e 94 17 1c 	call	0x382e	; 0x382e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2530:	a0 91 a8 04 	lds	r26, 0x04A8
    2534:	b0 91 a9 04 	lds	r27, 0x04A9
    2538:	cd 91       	ld	r28, X+
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	dd 91       	ld	r29, X+
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	ff 91       	pop	r31
    2542:	ef 91       	pop	r30
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	7f 91       	pop	r23
    2552:	6f 91       	pop	r22
    2554:	5f 91       	pop	r21
    2556:	4f 91       	pop	r20
    2558:	3f 91       	pop	r19
    255a:	2f 91       	pop	r18
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	df 90       	pop	r13
    2566:	cf 90       	pop	r12
    2568:	bf 90       	pop	r11
    256a:	af 90       	pop	r10
    256c:	9f 90       	pop	r9
    256e:	8f 90       	pop	r8
    2570:	7f 90       	pop	r7
    2572:	6f 90       	pop	r6
    2574:	5f 90       	pop	r5
    2576:	4f 90       	pop	r4
    2578:	3f 90       	pop	r3
    257a:	2f 90       	pop	r2
    257c:	1f 90       	pop	r1
    257e:	0f 90       	pop	r0
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2584:	08 95       	ret

00002586 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <prvSetupTimerInterrupt+0x6>
    258c:	00 d0       	rcall	.+0      	; 0x258e <prvSetupTimerInterrupt+0x8>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <prvSetupTimerInterrupt+0xa>
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2594:	80 e4       	ldi	r24, 0x40	; 64
    2596:	9f e1       	ldi	r25, 0x1F	; 31
    2598:	a0 e0       	ldi	r26, 0x00	; 0
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	8b 83       	std	Y+3, r24	; 0x03
    259e:	9c 83       	std	Y+4, r25	; 0x04
    25a0:	ad 83       	std	Y+5, r26	; 0x05
    25a2:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	ad 81       	ldd	r26, Y+5	; 0x05
    25aa:	be 81       	ldd	r27, Y+6	; 0x06
    25ac:	68 94       	set
    25ae:	15 f8       	bld	r1, 5
    25b0:	b6 95       	lsr	r27
    25b2:	a7 95       	ror	r26
    25b4:	97 95       	ror	r25
    25b6:	87 95       	ror	r24
    25b8:	16 94       	lsr	r1
    25ba:	d1 f7       	brne	.-12     	; 0x25b0 <prvSetupTimerInterrupt+0x2a>
    25bc:	8b 83       	std	Y+3, r24	; 0x03
    25be:	9c 83       	std	Y+4, r25	; 0x04
    25c0:	ad 83       	std	Y+5, r26	; 0x05
    25c2:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	ad 81       	ldd	r26, Y+5	; 0x05
    25ca:	be 81       	ldd	r27, Y+6	; 0x06
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	a1 09       	sbc	r26, r1
    25d0:	b1 09       	sbc	r27, r1
    25d2:	8b 83       	std	Y+3, r24	; 0x03
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	ad 83       	std	Y+5, r26	; 0x05
    25d8:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	ad 81       	ldd	r26, Y+5	; 0x05
    25e4:	be 81       	ldd	r27, Y+6	; 0x06
    25e6:	89 2f       	mov	r24, r25
    25e8:	9a 2f       	mov	r25, r26
    25ea:	ab 2f       	mov	r26, r27
    25ec:	bb 27       	eor	r27, r27
    25ee:	8b 83       	std	Y+3, r24	; 0x03
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	ad 83       	std	Y+5, r26	; 0x05
    25f4:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    25fa:	eb e4       	ldi	r30, 0x4B	; 75
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2602:	ea e4       	ldi	r30, 0x4A	; 74
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    260a:	8b e0       	ldi	r24, 0x0B	; 11
    260c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    260e:	ee e4       	ldi	r30, 0x4E	; 78
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2616:	e9 e5       	ldi	r30, 0x59	; 89
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	80 61       	ori	r24, 0x10	; 16
    2622:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2624:	e9 e5       	ldi	r30, 0x59	; 89
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	80 83       	st	Z, r24
}
    262c:	26 96       	adiw	r28, 0x06	; 6
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    263e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2642:	18 95       	reti

00002644 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	28 97       	sbiw	r28, 0x08	; 8
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	de bf       	out	0x3e, r29	; 62
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	8f 83       	std	Y+7, r24	; 0x07
    265a:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    265c:	1a 82       	std	Y+2, r1	; 0x02
    265e:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2660:	8f 81       	ldd	r24, Y+7	; 0x07
    2662:	88 23       	and	r24, r24
    2664:	09 f4       	brne	.+2      	; 0x2668 <xQueueCreate+0x24>
    2666:	8c c0       	rjmp	.+280    	; 0x2780 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2668:	8f e1       	ldi	r24, 0x1F	; 31
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <pvPortMalloc>
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	9e 81       	ldd	r25, Y+6	; 0x06
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	09 f4       	brne	.+2      	; 0x267e <xQueueCreate+0x3a>
    267c:	81 c0       	rjmp	.+258    	; 0x2780 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    267e:	8f 81       	ldd	r24, Y+7	; 0x07
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	88 85       	ldd	r24, Y+8	; 0x08
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	ac 01       	movw	r20, r24
    268c:	24 9f       	mul	r18, r20
    268e:	c0 01       	movw	r24, r0
    2690:	25 9f       	mul	r18, r21
    2692:	90 0d       	add	r25, r0
    2694:	34 9f       	mul	r19, r20
    2696:	90 0d       	add	r25, r0
    2698:	11 24       	eor	r1, r1
    269a:	01 96       	adiw	r24, 0x01	; 1
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <pvPortMalloc>
    26a8:	ed 81       	ldd	r30, Y+5	; 0x05
    26aa:	fe 81       	ldd	r31, Y+6	; 0x06
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    26b0:	ed 81       	ldd	r30, Y+5	; 0x05
    26b2:	fe 81       	ldd	r31, Y+6	; 0x06
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	09 f4       	brne	.+2      	; 0x26be <xQueueCreate+0x7a>
    26bc:	5d c0       	rjmp	.+186    	; 0x2778 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    26be:	ed 81       	ldd	r30, Y+5	; 0x05
    26c0:	fe 81       	ldd	r31, Y+6	; 0x06
    26c2:	40 81       	ld	r20, Z
    26c4:	51 81       	ldd	r21, Z+1	; 0x01
    26c6:	8f 81       	ldd	r24, Y+7	; 0x07
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	88 85       	ldd	r24, Y+8	; 0x08
    26ce:	88 2f       	mov	r24, r24
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	bc 01       	movw	r22, r24
    26d4:	26 9f       	mul	r18, r22
    26d6:	c0 01       	movw	r24, r0
    26d8:	27 9f       	mul	r18, r23
    26da:	90 0d       	add	r25, r0
    26dc:	36 9f       	mul	r19, r22
    26de:	90 0d       	add	r25, r0
    26e0:	11 24       	eor	r1, r1
    26e2:	84 0f       	add	r24, r20
    26e4:	95 1f       	adc	r25, r21
    26e6:	ed 81       	ldd	r30, Y+5	; 0x05
    26e8:	fe 81       	ldd	r31, Y+6	; 0x06
    26ea:	93 83       	std	Z+3, r25	; 0x03
    26ec:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    26ee:	ed 81       	ldd	r30, Y+5	; 0x05
    26f0:	fe 81       	ldd	r31, Y+6	; 0x06
    26f2:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    26f4:	ed 81       	ldd	r30, Y+5	; 0x05
    26f6:	fe 81       	ldd	r31, Y+6	; 0x06
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	ed 81       	ldd	r30, Y+5	; 0x05
    26fe:	fe 81       	ldd	r31, Y+6	; 0x06
    2700:	95 83       	std	Z+5, r25	; 0x05
    2702:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    2704:	ed 81       	ldd	r30, Y+5	; 0x05
    2706:	fe 81       	ldd	r31, Y+6	; 0x06
    2708:	40 81       	ld	r20, Z
    270a:	51 81       	ldd	r21, Z+1	; 0x01
    270c:	8f 81       	ldd	r24, Y+7	; 0x07
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9c 01       	movw	r18, r24
    2714:	21 50       	subi	r18, 0x01	; 1
    2716:	30 40       	sbci	r19, 0x00	; 0
    2718:	88 85       	ldd	r24, Y+8	; 0x08
    271a:	88 2f       	mov	r24, r24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	bc 01       	movw	r22, r24
    2720:	26 9f       	mul	r18, r22
    2722:	c0 01       	movw	r24, r0
    2724:	27 9f       	mul	r18, r23
    2726:	90 0d       	add	r25, r0
    2728:	36 9f       	mul	r19, r22
    272a:	90 0d       	add	r25, r0
    272c:	11 24       	eor	r1, r1
    272e:	84 0f       	add	r24, r20
    2730:	95 1f       	adc	r25, r21
    2732:	ed 81       	ldd	r30, Y+5	; 0x05
    2734:	fe 81       	ldd	r31, Y+6	; 0x06
    2736:	97 83       	std	Z+7, r25	; 0x07
    2738:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    273a:	ed 81       	ldd	r30, Y+5	; 0x05
    273c:	fe 81       	ldd	r31, Y+6	; 0x06
    273e:	8f 81       	ldd	r24, Y+7	; 0x07
    2740:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    2742:	ed 81       	ldd	r30, Y+5	; 0x05
    2744:	fe 81       	ldd	r31, Y+6	; 0x06
    2746:	88 85       	ldd	r24, Y+8	; 0x08
    2748:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    274a:	ed 81       	ldd	r30, Y+5	; 0x05
    274c:	fe 81       	ldd	r31, Y+6	; 0x06
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    2752:	ed 81       	ldd	r30, Y+5	; 0x05
    2754:	fe 81       	ldd	r31, Y+6	; 0x06
    2756:	8f ef       	ldi	r24, 0xFF	; 255
    2758:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	08 96       	adiw	r24, 0x08	; 8
    2760:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	41 96       	adiw	r24, 0x11	; 17
    276a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2784:	28 96       	adiw	r28, 0x08	; 8
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	00 d0       	rcall	.+0      	; 0x279c <xQueueCreateMutex+0x6>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    27a0:	8f e1       	ldi	r24, 0x1F	; 31
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <pvPortMalloc>
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	a9 f1       	breq	.+106    	; 0x281e <xQueueCreateMutex+0x88>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    27b4:	e9 81       	ldd	r30, Y+1	; 0x01
    27b6:	fa 81       	ldd	r31, Y+2	; 0x02
    27b8:	13 82       	std	Z+3, r1	; 0x03
    27ba:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    27bc:	e9 81       	ldd	r30, Y+1	; 0x01
    27be:	fa 81       	ldd	r31, Y+2	; 0x02
    27c0:	11 82       	std	Z+1, r1	; 0x01
    27c2:	10 82       	st	Z, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    27c4:	e9 81       	ldd	r30, Y+1	; 0x01
    27c6:	fa 81       	ldd	r31, Y+2	; 0x02
    27c8:	15 82       	std	Z+5, r1	; 0x05
    27ca:	14 82       	std	Z+4, r1	; 0x04
			pxNewQueue->pcReadFrom = NULL;
    27cc:	e9 81       	ldd	r30, Y+1	; 0x01
    27ce:	fa 81       	ldd	r31, Y+2	; 0x02
    27d0:	17 82       	std	Z+7, r1	; 0x07
    27d2:	16 82       	std	Z+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    27d4:	e9 81       	ldd	r30, Y+1	; 0x01
    27d6:	fa 81       	ldd	r31, Y+2	; 0x02
    27d8:	12 8e       	std	Z+26, r1	; 0x1a
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    27da:	e9 81       	ldd	r30, Y+1	; 0x01
    27dc:	fa 81       	ldd	r31, Y+2	; 0x02
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	83 8f       	std	Z+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    27e2:	e9 81       	ldd	r30, Y+1	; 0x01
    27e4:	fa 81       	ldd	r31, Y+2	; 0x02
    27e6:	14 8e       	std	Z+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    27e8:	e9 81       	ldd	r30, Y+1	; 0x01
    27ea:	fa 81       	ldd	r31, Y+2	; 0x02
    27ec:	8f ef       	ldi	r24, 0xFF	; 255
    27ee:	85 8f       	std	Z+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	fa 81       	ldd	r31, Y+2	; 0x02
    27f4:	8f ef       	ldi	r24, 0xFF	; 255
    27f6:	86 8f       	std	Z+30, r24	; 0x1e

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	08 96       	adiw	r24, 0x08	; 8
    27fe:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	41 96       	adiw	r24, 0x11	; 17
    2808:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	00 d0       	rcall	.+0      	; 0x2832 <xQueueCreateCountingSemaphore+0x6>
    2832:	00 d0       	rcall	.+0      	; 0x2834 <xQueueCreateCountingSemaphore+0x8>
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	8b 83       	std	Y+3, r24	; 0x03
    283a:	6c 83       	std	Y+4, r22	; 0x04
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	0e 94 22 13 	call	0x2644	; 0x2644 <xQueueCreate>
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01

		if( pxHandle != NULL )
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	21 f0       	breq	.+8      	; 0x2858 <xQueueCreateCountingSemaphore+0x2c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    2850:	e9 81       	ldd	r30, Y+1	; 0x01
    2852:	fa 81       	ldd	r31, Y+2	; 0x02
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	2c 97       	sbiw	r28, 0x0c	; 12
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	78 87       	std	Y+8, r23	; 0x08
    2884:	6f 83       	std	Y+7, r22	; 0x07
    2886:	5a 87       	std	Y+10, r21	; 0x0a
    2888:	49 87       	std	Y+9, r20	; 0x09
    288a:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    288c:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2894:	ed 81       	ldd	r30, Y+5	; 0x05
    2896:	fe 81       	ldd	r31, Y+6	; 0x06
    2898:	92 8d       	ldd	r25, Z+26	; 0x1a
    289a:	ed 81       	ldd	r30, Y+5	; 0x05
    289c:	fe 81       	ldd	r31, Y+6	; 0x06
    289e:	83 8d       	ldd	r24, Z+27	; 0x1b
    28a0:	98 17       	cp	r25, r24
    28a2:	d8 f4       	brcc	.+54     	; 0x28da <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	2f 81       	ldd	r18, Y+7	; 0x07
    28aa:	38 85       	ldd	r19, Y+8	; 0x08
    28ac:	b9 01       	movw	r22, r18
    28ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    28b0:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    28b4:	ed 81       	ldd	r30, Y+5	; 0x05
    28b6:	fe 81       	ldd	r31, Y+6	; 0x06
    28b8:	81 89       	ldd	r24, Z+17	; 0x11
    28ba:	88 23       	and	r24, r24
    28bc:	49 f0       	breq	.+18     	; 0x28d0 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	41 96       	adiw	r24, 0x11	; 17
    28c4:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskRemoveFromEventList>
    28c8:	81 30       	cpi	r24, 0x01	; 1
    28ca:	11 f4       	brne	.+4      	; 0x28d0 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    28cc:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	8c 87       	std	Y+12, r24	; 0x0c
    28d8:	5c c0       	rjmp	.+184    	; 0x2992 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    28da:	89 85       	ldd	r24, Y+9	; 0x09
    28dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	21 f4       	brne	.+8      	; 0x28ea <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    28e2:	0f 90       	pop	r0
    28e4:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    28e6:	1c 86       	std	Y+12, r1	; 0x0c
    28e8:	54 c0       	rjmp	.+168    	; 0x2992 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	88 23       	and	r24, r24
    28ee:	31 f4       	brne	.+12     	; 0x28fc <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    28f0:	ce 01       	movw	r24, r28
    28f2:	02 96       	adiw	r24, 0x02	; 2
    28f4:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    28fc:	0f 90       	pop	r0
    28fe:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2900:	0e 94 77 1a 	call	0x34ee	; 0x34ee <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	0f 92       	push	r0
    290a:	ed 81       	ldd	r30, Y+5	; 0x05
    290c:	fe 81       	ldd	r31, Y+6	; 0x06
    290e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2910:	8f 3f       	cpi	r24, 0xFF	; 255
    2912:	19 f4       	brne	.+6      	; 0x291a <xQueueGenericSend+0xb0>
    2914:	ed 81       	ldd	r30, Y+5	; 0x05
    2916:	fe 81       	ldd	r31, Y+6	; 0x06
    2918:	15 8e       	std	Z+29, r1	; 0x1d
    291a:	ed 81       	ldd	r30, Y+5	; 0x05
    291c:	fe 81       	ldd	r31, Y+6	; 0x06
    291e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2920:	8f 3f       	cpi	r24, 0xFF	; 255
    2922:	19 f4       	brne	.+6      	; 0x292a <xQueueGenericSend+0xc0>
    2924:	ed 81       	ldd	r30, Y+5	; 0x05
    2926:	fe 81       	ldd	r31, Y+6	; 0x06
    2928:	16 8e       	std	Z+30, r1	; 0x1e
    292a:	0f 90       	pop	r0
    292c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    292e:	ce 01       	movw	r24, r28
    2930:	02 96       	adiw	r24, 0x02	; 2
    2932:	9e 01       	movw	r18, r28
    2934:	27 5f       	subi	r18, 0xF7	; 247
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	b9 01       	movw	r22, r18
    293a:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <xTaskCheckForTimeOut>
    293e:	88 23       	and	r24, r24
    2940:	09 f5       	brne	.+66     	; 0x2984 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	0e 94 02 18 	call	0x3004	; 0x3004 <prvIsQueueFull>
    294a:	88 23       	and	r24, r24
    294c:	a1 f0       	breq	.+40     	; 0x2976 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    294e:	8d 81       	ldd	r24, Y+5	; 0x05
    2950:	9e 81       	ldd	r25, Y+6	; 0x06
    2952:	08 96       	adiw	r24, 0x08	; 8
    2954:	29 85       	ldd	r18, Y+9	; 0x09
    2956:	3a 85       	ldd	r19, Y+10	; 0x0a
    2958:	b9 01       	movw	r22, r18
    295a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	9e 81       	ldd	r25, Y+6	; 0x06
    2962:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2966:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>
    296a:	88 23       	and	r24, r24
    296c:	09 f0       	breq	.+2      	; 0x2970 <xQueueGenericSend+0x106>
    296e:	8f cf       	rjmp	.-226    	; 0x288e <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    2970:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
    2974:	8c cf       	rjmp	.-232    	; 0x288e <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	9e 81       	ldd	r25, Y+6	; 0x06
    297a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    297e:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>
    2982:	85 cf       	rjmp	.-246    	; 0x288e <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    298c:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2990:	1c 86       	std	Y+12, r1	; 0x0c
    2992:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    2994:	2c 96       	adiw	r28, 0x0c	; 12
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	29 97       	sbiw	r28, 0x09	; 9
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	9c 83       	std	Y+4, r25	; 0x04
    29bc:	8b 83       	std	Y+3, r24	; 0x03
    29be:	7e 83       	std	Y+6, r23	; 0x06
    29c0:	6d 83       	std	Y+5, r22	; 0x05
    29c2:	58 87       	std	Y+8, r21	; 0x08
    29c4:	4f 83       	std	Y+7, r20	; 0x07
    29c6:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    29c8:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    29ca:	eb 81       	ldd	r30, Y+3	; 0x03
    29cc:	fc 81       	ldd	r31, Y+4	; 0x04
    29ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    29d0:	eb 81       	ldd	r30, Y+3	; 0x03
    29d2:	fc 81       	ldd	r31, Y+4	; 0x04
    29d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    29d6:	98 17       	cp	r25, r24
    29d8:	40 f5       	brcc	.+80     	; 0x2a2a <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	2d 81       	ldd	r18, Y+5	; 0x05
    29e0:	3e 81       	ldd	r19, Y+6	; 0x06
    29e2:	b9 01       	movw	r22, r18
    29e4:	49 85       	ldd	r20, Y+9	; 0x09
    29e6:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    29ea:	eb 81       	ldd	r30, Y+3	; 0x03
    29ec:	fc 81       	ldd	r31, Y+4	; 0x04
    29ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    29f0:	8f 3f       	cpi	r24, 0xFF	; 255
    29f2:	89 f4       	brne	.+34     	; 0x2a16 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    29f4:	eb 81       	ldd	r30, Y+3	; 0x03
    29f6:	fc 81       	ldd	r31, Y+4	; 0x04
    29f8:	81 89       	ldd	r24, Z+17	; 0x11
    29fa:	88 23       	and	r24, r24
    29fc:	99 f0       	breq	.+38     	; 0x2a24 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	41 96       	adiw	r24, 0x11	; 17
    2a04:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskRemoveFromEventList>
    2a08:	88 23       	and	r24, r24
    2a0a:	61 f0       	breq	.+24     	; 0x2a24 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2a0c:	ef 81       	ldd	r30, Y+7	; 0x07
    2a0e:	f8 85       	ldd	r31, Y+8	; 0x08
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	80 83       	st	Z, r24
    2a14:	07 c0       	rjmp	.+14     	; 0x2a24 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2a16:	eb 81       	ldd	r30, Y+3	; 0x03
    2a18:	fc 81       	ldd	r31, Y+4	; 0x04
    2a1a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a20:	fc 81       	ldd	r31, Y+4	; 0x04
    2a22:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	8a 83       	std	Y+2, r24	; 0x02
    2a28:	01 c0       	rjmp	.+2      	; 0x2a2c <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2a2a:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2a2e:	29 96       	adiw	r28, 0x09	; 9
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	2e 97       	sbiw	r28, 0x0e	; 14
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	98 87       	std	Y+8, r25	; 0x08
    2a56:	8f 83       	std	Y+7, r24	; 0x07
    2a58:	7a 87       	std	Y+10, r23	; 0x0a
    2a5a:	69 87       	std	Y+9, r22	; 0x09
    2a5c:	5c 87       	std	Y+12, r21	; 0x0c
    2a5e:	4b 87       	std	Y+11, r20	; 0x0b
    2a60:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2a62:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2a6a:	ef 81       	ldd	r30, Y+7	; 0x07
    2a6c:	f8 85       	ldd	r31, Y+8	; 0x08
    2a6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a70:	88 23       	and	r24, r24
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <xQueueGenericReceive+0x36>
    2a74:	4b c0       	rjmp	.+150    	; 0x2b0c <xQueueGenericReceive+0xcc>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2a76:	ef 81       	ldd	r30, Y+7	; 0x07
    2a78:	f8 85       	ldd	r31, Y+8	; 0x08
    2a7a:	86 81       	ldd	r24, Z+6	; 0x06
    2a7c:	97 81       	ldd	r25, Z+7	; 0x07
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2a82:	8f 81       	ldd	r24, Y+7	; 0x07
    2a84:	98 85       	ldd	r25, Y+8	; 0x08
    2a86:	29 85       	ldd	r18, Y+9	; 0x09
    2a88:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a8a:	b9 01       	movw	r22, r18
    2a8c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a92:	88 23       	and	r24, r24
    2a94:	11 f5       	brne	.+68     	; 0x2ada <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2a96:	ef 81       	ldd	r30, Y+7	; 0x07
    2a98:	f8 85       	ldd	r31, Y+8	; 0x08
    2a9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a9c:	81 50       	subi	r24, 0x01	; 1
    2a9e:	ef 81       	ldd	r30, Y+7	; 0x07
    2aa0:	f8 85       	ldd	r31, Y+8	; 0x08
    2aa2:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2aa4:	ef 81       	ldd	r30, Y+7	; 0x07
    2aa6:	f8 85       	ldd	r31, Y+8	; 0x08
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	31 f4       	brne	.+12     	; 0x2abc <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2ab0:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <xTaskGetCurrentTaskHandle>
    2ab4:	ef 81       	ldd	r30, Y+7	; 0x07
    2ab6:	f8 85       	ldd	r31, Y+8	; 0x08
    2ab8:	93 83       	std	Z+3, r25	; 0x03
    2aba:	82 83       	std	Z+2, r24	; 0x02
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2abc:	ef 81       	ldd	r30, Y+7	; 0x07
    2abe:	f8 85       	ldd	r31, Y+8	; 0x08
    2ac0:	80 85       	ldd	r24, Z+8	; 0x08
    2ac2:	88 23       	and	r24, r24
    2ac4:	f1 f0       	breq	.+60     	; 0x2b02 <xQueueGenericReceive+0xc2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    2ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ac8:	98 85       	ldd	r25, Y+8	; 0x08
    2aca:	08 96       	adiw	r24, 0x08	; 8
    2acc:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskRemoveFromEventList>
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	b9 f4       	brne	.+46     	; 0x2b02 <xQueueGenericReceive+0xc2>
						{
							portYIELD_WITHIN_API();
    2ad4:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
    2ad8:	14 c0       	rjmp	.+40     	; 0x2b02 <xQueueGenericReceive+0xc2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2ada:	ef 81       	ldd	r30, Y+7	; 0x07
    2adc:	f8 85       	ldd	r31, Y+8	; 0x08
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	97 83       	std	Z+7, r25	; 0x07
    2ae4:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ae6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ae8:	f8 85       	ldd	r31, Y+8	; 0x08
    2aea:	81 89       	ldd	r24, Z+17	; 0x11
    2aec:	88 23       	and	r24, r24
    2aee:	49 f0       	breq	.+18     	; 0x2b02 <xQueueGenericReceive+0xc2>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2af0:	8f 81       	ldd	r24, Y+7	; 0x07
    2af2:	98 85       	ldd	r25, Y+8	; 0x08
    2af4:	41 96       	adiw	r24, 0x11	; 17
    2af6:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskRemoveFromEventList>
    2afa:	88 23       	and	r24, r24
    2afc:	11 f0       	breq	.+4      	; 0x2b02 <xQueueGenericReceive+0xc2>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2afe:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    2b02:	0f 90       	pop	r0
    2b04:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	8e 87       	std	Y+14, r24	; 0x0e
    2b0a:	6d c0       	rjmp	.+218    	; 0x2be6 <xQueueGenericReceive+0x1a6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	21 f4       	brne	.+8      	; 0x2b1c <xQueueGenericReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2b14:	0f 90       	pop	r0
    2b16:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2b18:	1e 86       	std	Y+14, r1	; 0x0e
    2b1a:	65 c0       	rjmp	.+202    	; 0x2be6 <xQueueGenericReceive+0x1a6>
				}
				else if( xEntryTimeSet == pdFALSE )
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	88 23       	and	r24, r24
    2b20:	31 f4       	brne	.+12     	; 0x2b2e <xQueueGenericReceive+0xee>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2b22:	ce 01       	movw	r24, r28
    2b24:	04 96       	adiw	r24, 0x04	; 4
    2b26:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    2b2e:	0f 90       	pop	r0
    2b30:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2b32:	0e 94 77 1a 	call	0x34ee	; 0x34ee <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	0f 92       	push	r0
    2b3c:	ef 81       	ldd	r30, Y+7	; 0x07
    2b3e:	f8 85       	ldd	r31, Y+8	; 0x08
    2b40:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b42:	8f 3f       	cpi	r24, 0xFF	; 255
    2b44:	19 f4       	brne	.+6      	; 0x2b4c <xQueueGenericReceive+0x10c>
    2b46:	ef 81       	ldd	r30, Y+7	; 0x07
    2b48:	f8 85       	ldd	r31, Y+8	; 0x08
    2b4a:	15 8e       	std	Z+29, r1	; 0x1d
    2b4c:	ef 81       	ldd	r30, Y+7	; 0x07
    2b4e:	f8 85       	ldd	r31, Y+8	; 0x08
    2b50:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b52:	8f 3f       	cpi	r24, 0xFF	; 255
    2b54:	19 f4       	brne	.+6      	; 0x2b5c <xQueueGenericReceive+0x11c>
    2b56:	ef 81       	ldd	r30, Y+7	; 0x07
    2b58:	f8 85       	ldd	r31, Y+8	; 0x08
    2b5a:	16 8e       	std	Z+30, r1	; 0x1e
    2b5c:	0f 90       	pop	r0
    2b5e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2b60:	ce 01       	movw	r24, r28
    2b62:	04 96       	adiw	r24, 0x04	; 4
    2b64:	9e 01       	movw	r18, r28
    2b66:	25 5f       	subi	r18, 0xF5	; 245
    2b68:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6a:	b9 01       	movw	r22, r18
    2b6c:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <xTaskCheckForTimeOut>
    2b70:	88 23       	and	r24, r24
    2b72:	91 f5       	brne	.+100    	; 0x2bd8 <xQueueGenericReceive+0x198>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2b74:	8f 81       	ldd	r24, Y+7	; 0x07
    2b76:	98 85       	ldd	r25, Y+8	; 0x08
    2b78:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <prvIsQueueEmpty>
    2b7c:	88 23       	and	r24, r24
    2b7e:	29 f1       	breq	.+74     	; 0x2bca <xQueueGenericReceive+0x18a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2b80:	ef 81       	ldd	r30, Y+7	; 0x07
    2b82:	f8 85       	ldd	r31, Y+8	; 0x08
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	59 f4       	brne	.+22     	; 0x2ba2 <xQueueGenericReceive+0x162>
					{
						portENTER_CRITICAL();
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2b92:	ef 81       	ldd	r30, Y+7	; 0x07
    2b94:	f8 85       	ldd	r31, Y+8	; 0x08
    2b96:	82 81       	ldd	r24, Z+2	; 0x02
    2b98:	93 81       	ldd	r25, Z+3	; 0x03
    2b9a:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    2b9e:	0f 90       	pop	r0
    2ba0:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2ba2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ba4:	98 85       	ldd	r25, Y+8	; 0x08
    2ba6:	41 96       	adiw	r24, 0x11	; 17
    2ba8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2baa:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bac:	b9 01       	movw	r22, r18
    2bae:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb4:	98 85       	ldd	r25, Y+8	; 0x08
    2bb6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2bba:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>
    2bbe:	88 23       	and	r24, r24
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <xQueueGenericReceive+0x184>
    2bc2:	50 cf       	rjmp	.-352    	; 0x2a64 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    2bc4:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
    2bc8:	4d cf       	rjmp	.-358    	; 0x2a64 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2bca:	8f 81       	ldd	r24, Y+7	; 0x07
    2bcc:	98 85       	ldd	r25, Y+8	; 0x08
    2bce:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2bd2:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>
    2bd6:	46 cf       	rjmp	.-372    	; 0x2a64 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2bd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bda:	98 85       	ldd	r25, Y+8	; 0x08
    2bdc:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2be0:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2be4:	1e 86       	std	Y+14, r1	; 0x0e
    2be6:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    2be8:	2e 96       	adiw	r28, 0x0e	; 14
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	28 97       	sbiw	r28, 0x08	; 8
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	9c 83       	std	Y+4, r25	; 0x04
    2c10:	8b 83       	std	Y+3, r24	; 0x03
    2c12:	7e 83       	std	Y+6, r23	; 0x06
    2c14:	6d 83       	std	Y+5, r22	; 0x05
    2c16:	58 87       	std	Y+8, r21	; 0x08
    2c18:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2c1a:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2c1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c20:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c22:	88 23       	and	r24, r24
    2c24:	71 f1       	breq	.+92     	; 0x2c82 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c2c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c2e:	b9 01       	movw	r22, r18
    2c30:	0e 94 33 17 	call	0x2e66	; 0x2e66 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2c34:	eb 81       	ldd	r30, Y+3	; 0x03
    2c36:	fc 81       	ldd	r31, Y+4	; 0x04
    2c38:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c3a:	81 50       	subi	r24, 0x01	; 1
    2c3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c40:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2c42:	eb 81       	ldd	r30, Y+3	; 0x03
    2c44:	fc 81       	ldd	r31, Y+4	; 0x04
    2c46:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c48:	8f 3f       	cpi	r24, 0xFF	; 255
    2c4a:	89 f4       	brne	.+34     	; 0x2c6e <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2c4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c50:	80 85       	ldd	r24, Z+8	; 0x08
    2c52:	88 23       	and	r24, r24
    2c54:	99 f0       	breq	.+38     	; 0x2c7c <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	08 96       	adiw	r24, 0x08	; 8
    2c5c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskRemoveFromEventList>
    2c60:	88 23       	and	r24, r24
    2c62:	61 f0       	breq	.+24     	; 0x2c7c <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2c64:	ef 81       	ldd	r30, Y+7	; 0x07
    2c66:	f8 85       	ldd	r31, Y+8	; 0x08
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	80 83       	st	Z, r24
    2c6c:	07 c0       	rjmp	.+14     	; 0x2c7c <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c70:	fc 81       	ldd	r31, Y+4	; 0x04
    2c72:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	eb 81       	ldd	r30, Y+3	; 0x03
    2c78:	fc 81       	ldd	r31, Y+4	; 0x04
    2c7a:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
    2c80:	01 c0       	rjmp	.+2      	; 0x2c84 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    2c82:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c86:	28 96       	adiw	r28, 0x08	; 8
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <uxQueueMessagesWaiting+0x6>
    2c9e:	0f 92       	push	r0
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	9b 83       	std	Y+3, r25	; 0x03
    2ca6:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2cae:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb0:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cb4:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2cb6:	0f 90       	pop	r0
    2cb8:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <uxQueueMessagesWaitingFromISR+0x6>
    2cce:	0f 92       	push	r0
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	9b 83       	std	Y+3, r25	; 0x03
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    2cd8:	ea 81       	ldd	r30, Y+2	; 0x02
    2cda:	fb 81       	ldd	r31, Y+3	; 0x03
    2cdc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cde:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <vQueueDelete+0x6>
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    2cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vPortFree>
	vPortFree( pxQueue );
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vPortFree>
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <prvCopyDataToQueue+0x6>
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <prvCopyDataToQueue+0x8>
    2d22:	0f 92       	push	r0
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	7c 83       	std	Y+4, r23	; 0x04
    2d2e:	6b 83       	std	Y+3, r22	; 0x03
    2d30:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2d32:	e9 81       	ldd	r30, Y+1	; 0x01
    2d34:	fa 81       	ldd	r31, Y+2	; 0x02
    2d36:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d38:	88 23       	and	r24, r24
    2d3a:	91 f4       	brne	.+36     	; 0x2d60 <prvCopyDataToQueue+0x46>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	09 f0       	breq	.+2      	; 0x2d4a <prvCopyDataToQueue+0x30>
    2d48:	7f c0       	rjmp	.+254    	; 0x2e48 <prvCopyDataToQueue+0x12e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    2d56:	e9 81       	ldd	r30, Y+1	; 0x01
    2d58:	fa 81       	ldd	r31, Y+2	; 0x02
    2d5a:	13 82       	std	Z+3, r1	; 0x03
    2d5c:	12 82       	std	Z+2, r1	; 0x02
    2d5e:	74 c0       	rjmp	.+232    	; 0x2e48 <prvCopyDataToQueue+0x12e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    2d60:	8d 81       	ldd	r24, Y+5	; 0x05
    2d62:	88 23       	and	r24, r24
    2d64:	99 f5       	brne	.+102    	; 0x2dcc <prvCopyDataToQueue+0xb2>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2d66:	e9 81       	ldd	r30, Y+1	; 0x01
    2d68:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6a:	64 81       	ldd	r22, Z+4	; 0x04
    2d6c:	75 81       	ldd	r23, Z+5	; 0x05
    2d6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d70:	fa 81       	ldd	r31, Y+2	; 0x02
    2d72:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d74:	48 2f       	mov	r20, r24
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	2b 81       	ldd	r18, Y+3	; 0x03
    2d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	b9 01       	movw	r22, r18
    2d80:	0e 94 a7 24 	call	0x494e	; 0x494e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2d84:	e9 81       	ldd	r30, Y+1	; 0x01
    2d86:	fa 81       	ldd	r31, Y+2	; 0x02
    2d88:	24 81       	ldd	r18, Z+4	; 0x04
    2d8a:	35 81       	ldd	r19, Z+5	; 0x05
    2d8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d90:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	82 0f       	add	r24, r18
    2d98:	93 1f       	adc	r25, r19
    2d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9e:	95 83       	std	Z+5, r25	; 0x05
    2da0:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2da2:	e9 81       	ldd	r30, Y+1	; 0x01
    2da4:	fa 81       	ldd	r31, Y+2	; 0x02
    2da6:	24 81       	ldd	r18, Z+4	; 0x04
    2da8:	35 81       	ldd	r19, Z+5	; 0x05
    2daa:	e9 81       	ldd	r30, Y+1	; 0x01
    2dac:	fa 81       	ldd	r31, Y+2	; 0x02
    2dae:	82 81       	ldd	r24, Z+2	; 0x02
    2db0:	93 81       	ldd	r25, Z+3	; 0x03
    2db2:	28 17       	cp	r18, r24
    2db4:	39 07       	cpc	r19, r25
    2db6:	08 f4       	brcc	.+2      	; 0x2dba <prvCopyDataToQueue+0xa0>
    2db8:	47 c0       	rjmp	.+142    	; 0x2e48 <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2dba:	e9 81       	ldd	r30, Y+1	; 0x01
    2dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbe:	80 81       	ld	r24, Z
    2dc0:	91 81       	ldd	r25, Z+1	; 0x01
    2dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc6:	95 83       	std	Z+5, r25	; 0x05
    2dc8:	84 83       	std	Z+4, r24	; 0x04
    2dca:	3e c0       	rjmp	.+124    	; 0x2e48 <prvCopyDataToQueue+0x12e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    2dce:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd0:	66 81       	ldd	r22, Z+6	; 0x06
    2dd2:	77 81       	ldd	r23, Z+7	; 0x07
    2dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2dda:	48 2f       	mov	r20, r24
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	2b 81       	ldd	r18, Y+3	; 0x03
    2de0:	3c 81       	ldd	r19, Y+4	; 0x04
    2de2:	cb 01       	movw	r24, r22
    2de4:	b9 01       	movw	r22, r18
    2de6:	0e 94 a7 24 	call	0x494e	; 0x494e <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    2dea:	e9 81       	ldd	r30, Y+1	; 0x01
    2dec:	fa 81       	ldd	r31, Y+2	; 0x02
    2dee:	26 81       	ldd	r18, Z+6	; 0x06
    2df0:	37 81       	ldd	r19, Z+7	; 0x07
    2df2:	e9 81       	ldd	r30, Y+1	; 0x01
    2df4:	fa 81       	ldd	r31, Y+2	; 0x02
    2df6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	90 95       	com	r25
    2dfe:	81 95       	neg	r24
    2e00:	9f 4f       	sbci	r25, 0xFF	; 255
    2e02:	82 0f       	add	r24, r18
    2e04:	93 1f       	adc	r25, r19
    2e06:	e9 81       	ldd	r30, Y+1	; 0x01
    2e08:	fa 81       	ldd	r31, Y+2	; 0x02
    2e0a:	97 83       	std	Z+7, r25	; 0x07
    2e0c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    2e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e10:	fa 81       	ldd	r31, Y+2	; 0x02
    2e12:	26 81       	ldd	r18, Z+6	; 0x06
    2e14:	37 81       	ldd	r19, Z+7	; 0x07
    2e16:	e9 81       	ldd	r30, Y+1	; 0x01
    2e18:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	28 17       	cp	r18, r24
    2e20:	39 07       	cpc	r19, r25
    2e22:	90 f4       	brcc	.+36     	; 0x2e48 <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2e24:	e9 81       	ldd	r30, Y+1	; 0x01
    2e26:	fa 81       	ldd	r31, Y+2	; 0x02
    2e28:	22 81       	ldd	r18, Z+2	; 0x02
    2e2a:	33 81       	ldd	r19, Z+3	; 0x03
    2e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e30:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	90 95       	com	r25
    2e38:	81 95       	neg	r24
    2e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3c:	82 0f       	add	r24, r18
    2e3e:	93 1f       	adc	r25, r19
    2e40:	e9 81       	ldd	r30, Y+1	; 0x01
    2e42:	fa 81       	ldd	r31, Y+2	; 0x02
    2e44:	97 83       	std	Z+7, r25	; 0x07
    2e46:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2e48:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e4e:	8f 5f       	subi	r24, 0xFF	; 255
    2e50:	e9 81       	ldd	r30, Y+1	; 0x01
    2e52:	fa 81       	ldd	r31, Y+2	; 0x02
    2e54:	82 8f       	std	Z+26, r24	; 0x1a
}
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <prvCopyDataFromQueue+0x6>
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <prvCopyDataFromQueue+0x8>
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	7c 83       	std	Y+4, r23	; 0x04
    2e78:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7e:	80 81       	ld	r24, Z
    2e80:	91 81       	ldd	r25, Z+1	; 0x01
    2e82:	00 97       	sbiw	r24, 0x00	; 0
    2e84:	89 f1       	breq	.+98     	; 0x2ee8 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    2e86:	e9 81       	ldd	r30, Y+1	; 0x01
    2e88:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8a:	26 81       	ldd	r18, Z+6	; 0x06
    2e8c:	37 81       	ldd	r19, Z+7	; 0x07
    2e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e90:	fa 81       	ldd	r31, Y+2	; 0x02
    2e92:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	82 0f       	add	r24, r18
    2e9a:	93 1f       	adc	r25, r19
    2e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea0:	97 83       	std	Z+7, r25	; 0x07
    2ea2:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    2ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea8:	26 81       	ldd	r18, Z+6	; 0x06
    2eaa:	37 81       	ldd	r19, Z+7	; 0x07
    2eac:	e9 81       	ldd	r30, Y+1	; 0x01
    2eae:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	28 17       	cp	r18, r24
    2eb6:	39 07       	cpc	r19, r25
    2eb8:	40 f0       	brcs	.+16     	; 0x2eca <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    2eba:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ebe:	80 81       	ld	r24, Z
    2ec0:	91 81       	ldd	r25, Z+1	; 0x01
    2ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec6:	97 83       	std	Z+7, r25	; 0x07
    2ec8:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2eca:	e9 81       	ldd	r30, Y+1	; 0x01
    2ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ece:	46 81       	ldd	r20, Z+6	; 0x06
    2ed0:	57 81       	ldd	r21, Z+7	; 0x07
    2ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ed8:	28 2f       	mov	r18, r24
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee0:	ba 01       	movw	r22, r20
    2ee2:	a9 01       	movw	r20, r18
    2ee4:	0e 94 a7 24 	call	0x494e	; 0x494e <memcpy>
	}
}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <prvUnlockQueue+0x6>
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	9a 83       	std	Y+2, r25	; 0x02
    2f02:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	0f 92       	push	r0
    2f0a:	15 c0       	rjmp	.+42     	; 0x2f36 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f10:	81 89       	ldd	r24, Z+17	; 0x11
    2f12:	88 23       	and	r24, r24
    2f14:	a9 f0       	breq	.+42     	; 0x2f40 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1a:	41 96       	adiw	r24, 0x11	; 17
    2f1c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskRemoveFromEventList>
    2f20:	88 23       	and	r24, r24
    2f22:	11 f0       	breq	.+4      	; 0x2f28 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    2f24:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    2f28:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f2e:	81 50       	subi	r24, 0x01	; 1
    2f30:	e9 81       	ldd	r30, Y+1	; 0x01
    2f32:	fa 81       	ldd	r31, Y+2	; 0x02
    2f34:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2f36:	e9 81       	ldd	r30, Y+1	; 0x01
    2f38:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f3c:	18 16       	cp	r1, r24
    2f3e:	34 f3       	brlt	.-52     	; 0x2f0c <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	8f ef       	ldi	r24, 0xFF	; 255
    2f46:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    2f48:	0f 90       	pop	r0
    2f4a:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	0f 92       	push	r0
    2f52:	15 c0       	rjmp	.+42     	; 0x2f7e <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f54:	e9 81       	ldd	r30, Y+1	; 0x01
    2f56:	fa 81       	ldd	r31, Y+2	; 0x02
    2f58:	80 85       	ldd	r24, Z+8	; 0x08
    2f5a:	88 23       	and	r24, r24
    2f5c:	a9 f0       	breq	.+42     	; 0x2f88 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	9a 81       	ldd	r25, Y+2	; 0x02
    2f62:	08 96       	adiw	r24, 0x08	; 8
    2f64:	0e 94 b3 1c 	call	0x3966	; 0x3966 <xTaskRemoveFromEventList>
    2f68:	88 23       	and	r24, r24
    2f6a:	11 f0       	breq	.+4      	; 0x2f70 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    2f6c:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2f70:	e9 81       	ldd	r30, Y+1	; 0x01
    2f72:	fa 81       	ldd	r31, Y+2	; 0x02
    2f74:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f76:	81 50       	subi	r24, 0x01	; 1
    2f78:	e9 81       	ldd	r30, Y+1	; 0x01
    2f7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7c:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f80:	fa 81       	ldd	r31, Y+2	; 0x02
    2f82:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f84:	18 16       	cp	r1, r24
    2f86:	34 f3       	brlt	.-52     	; 0x2f54 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2f88:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8c:	8f ef       	ldi	r24, 0xFF	; 255
    2f8e:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2f90:	0f 90       	pop	r0
    2f92:	0f be       	out	0x3f, r0	; 63
}
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <prvIsQueueEmpty+0x6>
    2fa4:	0f 92       	push	r0
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	9b 83       	std	Y+3, r25	; 0x03
    2fac:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2fb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2fb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2fb8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fba:	19 82       	std	Y+1, r1	; 0x01
    2fbc:	88 23       	and	r24, r24
    2fbe:	11 f4       	brne	.+4      	; 0x2fc4 <prvIsQueueEmpty+0x26>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <xQueueIsQueueEmptyFromISR+0x6>
    2fdc:	0f 92       	push	r0
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	9b 83       	std	Y+3, r25	; 0x03
    2fe4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2fe6:	ea 81       	ldd	r30, Y+2	; 0x02
    2fe8:	fb 81       	ldd	r31, Y+3	; 0x03
    2fea:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fec:	19 82       	std	Y+1, r1	; 0x01
    2fee:	88 23       	and	r24, r24
    2ff0:	11 f4       	brne	.+4      	; 0x2ff6 <xQueueIsQueueEmptyFromISR+0x20>
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	00 d0       	rcall	.+0      	; 0x300a <prvIsQueueFull+0x6>
    300a:	0f 92       	push	r0
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	9b 83       	std	Y+3, r25	; 0x03
    3012:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    301a:	ea 81       	ldd	r30, Y+2	; 0x02
    301c:	fb 81       	ldd	r31, Y+3	; 0x03
    301e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3020:	ea 81       	ldd	r30, Y+2	; 0x02
    3022:	fb 81       	ldd	r31, Y+3	; 0x03
    3024:	83 8d       	ldd	r24, Z+27	; 0x1b
    3026:	19 82       	std	Y+1, r1	; 0x01
    3028:	98 17       	cp	r25, r24
    302a:	11 f4       	brne	.+4      	; 0x3030 <prvIsQueueFull+0x2c>
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3030:	0f 90       	pop	r0
    3032:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3034:	89 81       	ldd	r24, Y+1	; 0x01
}
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	00 d0       	rcall	.+0      	; 0x3048 <xQueueIsQueueFullFromISR+0x6>
    3048:	0f 92       	push	r0
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	9b 83       	std	Y+3, r25	; 0x03
    3050:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3052:	ea 81       	ldd	r30, Y+2	; 0x02
    3054:	fb 81       	ldd	r31, Y+3	; 0x03
    3056:	92 8d       	ldd	r25, Z+26	; 0x1a
    3058:	ea 81       	ldd	r30, Y+2	; 0x02
    305a:	fb 81       	ldd	r31, Y+3	; 0x03
    305c:	83 8d       	ldd	r24, Z+27	; 0x1b
    305e:	19 82       	std	Y+1, r1	; 0x01
    3060:	98 17       	cp	r25, r24
    3062:	11 f4       	brne	.+4      	; 0x3068 <xQueueIsQueueFullFromISR+0x26>
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3068:	89 81       	ldd	r24, Y+1	; 0x01
}
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3076:	af 92       	push	r10
    3078:	bf 92       	push	r11
    307a:	cf 92       	push	r12
    307c:	df 92       	push	r13
    307e:	ef 92       	push	r14
    3080:	ff 92       	push	r15
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	64 97       	sbiw	r28, 0x14	; 20
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	9f 83       	std	Y+7, r25	; 0x07
    309c:	8e 83       	std	Y+6, r24	; 0x06
    309e:	79 87       	std	Y+9, r23	; 0x09
    30a0:	68 87       	std	Y+8, r22	; 0x08
    30a2:	5b 87       	std	Y+11, r21	; 0x0b
    30a4:	4a 87       	std	Y+10, r20	; 0x0a
    30a6:	3d 87       	std	Y+13, r19	; 0x0d
    30a8:	2c 87       	std	Y+12, r18	; 0x0c
    30aa:	0e 87       	std	Y+14, r16	; 0x0e
    30ac:	f8 8a       	std	Y+16, r15	; 0x10
    30ae:	ef 86       	std	Y+15, r14	; 0x0f
    30b0:	da 8a       	std	Y+18, r13	; 0x12
    30b2:	c9 8a       	std	Y+17, r12	; 0x11
    30b4:	bc 8a       	std	Y+20, r11	; 0x14
    30b6:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    30b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    30bc:	29 89       	ldd	r18, Y+17	; 0x11
    30be:	3a 89       	ldd	r19, Y+18	; 0x12
    30c0:	b9 01       	movw	r22, r18
    30c2:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <prvAllocateTCBAndStack>
    30c6:	9c 83       	std	Y+4, r25	; 0x04
    30c8:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <xTaskGenericCreate+0x5e>
    30d2:	99 c0       	rjmp	.+306    	; 0x3206 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    30d4:	eb 81       	ldd	r30, Y+3	; 0x03
    30d6:	fc 81       	ldd	r31, Y+4	; 0x04
    30d8:	27 89       	ldd	r18, Z+23	; 0x17
    30da:	30 8d       	ldd	r19, Z+24	; 0x18
    30dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    30de:	9b 85       	ldd	r25, Y+11	; 0x0b
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	82 0f       	add	r24, r18
    30e4:	93 1f       	adc	r25, r19
    30e6:	9a 83       	std	Y+2, r25	; 0x02
    30e8:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    30ea:	8b 81       	ldd	r24, Y+3	; 0x03
    30ec:	9c 81       	ldd	r25, Y+4	; 0x04
    30ee:	28 85       	ldd	r18, Y+8	; 0x08
    30f0:	39 85       	ldd	r19, Y+9	; 0x09
    30f2:	eb 89       	ldd	r30, Y+19	; 0x13
    30f4:	fc 89       	ldd	r31, Y+20	; 0x14
    30f6:	aa 85       	ldd	r26, Y+10	; 0x0a
    30f8:	bb 85       	ldd	r27, Y+11	; 0x0b
    30fa:	b9 01       	movw	r22, r18
    30fc:	4e 85       	ldd	r20, Y+14	; 0x0e
    30fe:	9f 01       	movw	r18, r30
    3100:	8d 01       	movw	r16, r26
    3102:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	2e 81       	ldd	r18, Y+6	; 0x06
    310c:	3f 81       	ldd	r19, Y+7	; 0x07
    310e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3110:	5d 85       	ldd	r21, Y+13	; 0x0d
    3112:	b9 01       	movw	r22, r18
    3114:	0e 94 50 10 	call	0x20a0	; 0x20a0 <pxPortInitialiseStack>
    3118:	eb 81       	ldd	r30, Y+3	; 0x03
    311a:	fc 81       	ldd	r31, Y+4	; 0x04
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    3120:	8f 85       	ldd	r24, Y+15	; 0x0f
    3122:	98 89       	ldd	r25, Y+16	; 0x10
    3124:	00 97       	sbiw	r24, 0x00	; 0
    3126:	31 f0       	breq	.+12     	; 0x3134 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3128:	ef 85       	ldd	r30, Y+15	; 0x0f
    312a:	f8 89       	ldd	r31, Y+16	; 0x10
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	9c 81       	ldd	r25, Y+4	; 0x04
    3130:	91 83       	std	Z+1, r25	; 0x01
    3132:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    313a:	80 91 ab 04 	lds	r24, 0x04AB
    313e:	8f 5f       	subi	r24, 0xFF	; 255
    3140:	80 93 ab 04 	sts	0x04AB, r24
			if( pxCurrentTCB == NULL )
    3144:	80 91 a8 04 	lds	r24, 0x04A8
    3148:	90 91 a9 04 	lds	r25, 0x04A9
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	69 f4       	brne	.+26     	; 0x316a <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	90 93 a9 04 	sts	0x04A9, r25
    3158:	80 93 a8 04 	sts	0x04A8, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    315c:	80 91 ab 04 	lds	r24, 0x04AB
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	a9 f4       	brne	.+42     	; 0x318e <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3164:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <prvInitialiseTaskLists>
    3168:	12 c0       	rjmp	.+36     	; 0x318e <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    316a:	80 91 b0 04 	lds	r24, 0x04B0
    316e:	88 23       	and	r24, r24
    3170:	71 f4       	brne	.+28     	; 0x318e <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3172:	e0 91 a8 04 	lds	r30, 0x04A8
    3176:	f0 91 a9 04 	lds	r31, 0x04A9
    317a:	96 89       	ldd	r25, Z+22	; 0x16
    317c:	8e 85       	ldd	r24, Y+14	; 0x0e
    317e:	89 17       	cp	r24, r25
    3180:	30 f0       	brcs	.+12     	; 0x318e <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	90 93 a9 04 	sts	0x04A9, r25
    318a:	80 93 a8 04 	sts	0x04A8, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    318e:	eb 81       	ldd	r30, Y+3	; 0x03
    3190:	fc 81       	ldd	r31, Y+4	; 0x04
    3192:	96 89       	ldd	r25, Z+22	; 0x16
    3194:	80 91 ae 04 	lds	r24, 0x04AE
    3198:	89 17       	cp	r24, r25
    319a:	28 f4       	brcc	.+10     	; 0x31a6 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    319c:	eb 81       	ldd	r30, Y+3	; 0x03
    319e:	fc 81       	ldd	r31, Y+4	; 0x04
    31a0:	86 89       	ldd	r24, Z+22	; 0x16
    31a2:	80 93 ae 04 	sts	0x04AE, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    31a6:	80 91 b5 04 	lds	r24, 0x04B5
    31aa:	8f 5f       	subi	r24, 0xFF	; 255
    31ac:	80 93 b5 04 	sts	0x04B5, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    31b0:	eb 81       	ldd	r30, Y+3	; 0x03
    31b2:	fc 81       	ldd	r31, Y+4	; 0x04
    31b4:	96 89       	ldd	r25, Z+22	; 0x16
    31b6:	80 91 af 04 	lds	r24, 0x04AF
    31ba:	89 17       	cp	r24, r25
    31bc:	28 f4       	brcc	.+10     	; 0x31c8 <xTaskGenericCreate+0x152>
    31be:	eb 81       	ldd	r30, Y+3	; 0x03
    31c0:	fc 81       	ldd	r31, Y+4	; 0x04
    31c2:	86 89       	ldd	r24, Z+22	; 0x16
    31c4:	80 93 af 04 	sts	0x04AF, r24
    31c8:	eb 81       	ldd	r30, Y+3	; 0x03
    31ca:	fc 81       	ldd	r31, Y+4	; 0x04
    31cc:	86 89       	ldd	r24, Z+22	; 0x16
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	c9 01       	movw	r24, r18
    31d4:	88 0f       	add	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	82 0f       	add	r24, r18
    31e2:	93 1f       	adc	r25, r19
    31e4:	ac 01       	movw	r20, r24
    31e6:	4a 54       	subi	r20, 0x4A	; 74
    31e8:	5b 4f       	sbci	r21, 0xFB	; 251
    31ea:	8b 81       	ldd	r24, Y+3	; 0x03
    31ec:	9c 81       	ldd	r25, Y+4	; 0x04
    31ee:	9c 01       	movw	r18, r24
    31f0:	2e 5f       	subi	r18, 0xFE	; 254
    31f2:	3f 4f       	sbci	r19, 0xFF	; 255
    31f4:	ca 01       	movw	r24, r20
    31f6:	b9 01       	movw	r22, r18
    31f8:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>

			xReturn = pdPASS;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3200:	0f 90       	pop	r0
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	02 c0       	rjmp	.+4      	; 0x320a <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3206:	8f ef       	ldi	r24, 0xFF	; 255
    3208:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	71 f4       	brne	.+28     	; 0x322c <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    3210:	80 91 b0 04 	lds	r24, 0x04B0
    3214:	88 23       	and	r24, r24
    3216:	51 f0       	breq	.+20     	; 0x322c <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3218:	e0 91 a8 04 	lds	r30, 0x04A8
    321c:	f0 91 a9 04 	lds	r31, 0x04A9
    3220:	96 89       	ldd	r25, Z+22	; 0x16
    3222:	8e 85       	ldd	r24, Y+14	; 0x0e
    3224:	98 17       	cp	r25, r24
    3226:	10 f4       	brcc	.+4      	; 0x322c <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    3228:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
			}
		}
	}

	return xReturn;
    322c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    322e:	64 96       	adiw	r28, 0x14	; 20
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	df 90       	pop	r13
    3248:	cf 90       	pop	r12
    324a:	bf 90       	pop	r11
    324c:	af 90       	pop	r10
    324e:	08 95       	ret

00003250 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	00 d0       	rcall	.+0      	; 0x3256 <vTaskDelete+0x6>
    3256:	00 d0       	rcall	.+0      	; 0x3258 <vTaskDelete+0x8>
    3258:	00 d0       	rcall	.+0      	; 0x325a <vTaskDelete+0xa>
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3268:	20 91 a8 04 	lds	r18, 0x04A8
    326c:	30 91 a9 04 	lds	r19, 0x04A9
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	9c 81       	ldd	r25, Y+4	; 0x04
    3274:	82 17       	cp	r24, r18
    3276:	93 07       	cpc	r25, r19
    3278:	11 f4       	brne	.+4      	; 0x327e <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    327a:	1c 82       	std	Y+4, r1	; 0x04
    327c:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    327e:	8b 81       	ldd	r24, Y+3	; 0x03
    3280:	9c 81       	ldd	r25, Y+4	; 0x04
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	39 f4       	brne	.+14     	; 0x3294 <vTaskDelete+0x44>
    3286:	80 91 a8 04 	lds	r24, 0x04A8
    328a:	90 91 a9 04 	lds	r25, 0x04A9
    328e:	9e 83       	std	Y+6, r25	; 0x06
    3290:	8d 83       	std	Y+5, r24	; 0x05
    3292:	04 c0       	rjmp	.+8      	; 0x329c <vTaskDelete+0x4c>
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	9c 81       	ldd	r25, Y+4	; 0x04
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	9a 83       	std	Y+2, r25	; 0x02
    32a2:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	02 96       	adiw	r24, 0x02	; 2
    32aa:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    32ae:	e9 81       	ldd	r30, Y+1	; 0x01
    32b0:	fa 81       	ldd	r31, Y+2	; 0x02
    32b2:	84 89       	ldd	r24, Z+20	; 0x14
    32b4:	95 89       	ldd	r25, Z+21	; 0x15
    32b6:	00 97       	sbiw	r24, 0x00	; 0
    32b8:	29 f0       	breq	.+10     	; 0x32c4 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	9a 81       	ldd	r25, Y+2	; 0x02
    32be:	0c 96       	adiw	r24, 0x0c	; 12
    32c0:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	9a 81       	ldd	r25, Y+2	; 0x02
    32c8:	9c 01       	movw	r18, r24
    32ca:	2e 5f       	subi	r18, 0xFE	; 254
    32cc:	3f 4f       	sbci	r19, 0xFF	; 255
    32ce:	82 e0       	ldi	r24, 0x02	; 2
    32d0:	95 e0       	ldi	r25, 0x05	; 5
    32d2:	b9 01       	movw	r22, r18
    32d4:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    32d8:	80 91 aa 04 	lds	r24, 0x04AA
    32dc:	8f 5f       	subi	r24, 0xFF	; 255
    32de:	80 93 aa 04 	sts	0x04AA, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    32e2:	80 91 b5 04 	lds	r24, 0x04B5
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	80 93 b5 04 	sts	0x04B5, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    32ec:	0f 90       	pop	r0
    32ee:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    32f0:	80 91 b0 04 	lds	r24, 0x04B0
    32f4:	88 23       	and	r24, r24
    32f6:	31 f0       	breq	.+12     	; 0x3304 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	9c 81       	ldd	r25, Y+4	; 0x04
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	11 f4       	brne	.+4      	; 0x3304 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    3300:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
			}
		}
	}
    3304:	26 96       	adiw	r28, 0x06	; 6
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	08 95       	ret

00003316 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	28 97       	sbiw	r28, 0x08	; 8
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	78 87       	std	Y+8, r23	; 0x08
    3330:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    3332:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3334:	0e 94 77 1a 	call	0x34ee	; 0x34ee <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3338:	ed 81       	ldd	r30, Y+5	; 0x05
    333a:	fe 81       	ldd	r31, Y+6	; 0x06
    333c:	20 81       	ld	r18, Z
    333e:	31 81       	ldd	r19, Z+1	; 0x01
    3340:	8f 81       	ldd	r24, Y+7	; 0x07
    3342:	98 85       	ldd	r25, Y+8	; 0x08
    3344:	82 0f       	add	r24, r18
    3346:	93 1f       	adc	r25, r19
    3348:	9c 83       	std	Y+4, r25	; 0x04
    334a:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    334c:	ed 81       	ldd	r30, Y+5	; 0x05
    334e:	fe 81       	ldd	r31, Y+6	; 0x06
    3350:	20 81       	ld	r18, Z
    3352:	31 81       	ldd	r19, Z+1	; 0x01
    3354:	80 91 ac 04 	lds	r24, 0x04AC
    3358:	90 91 ad 04 	lds	r25, 0x04AD
    335c:	82 17       	cp	r24, r18
    335e:	93 07       	cpc	r25, r19
    3360:	a8 f4       	brcc	.+42     	; 0x338c <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3362:	ed 81       	ldd	r30, Y+5	; 0x05
    3364:	fe 81       	ldd	r31, Y+6	; 0x06
    3366:	20 81       	ld	r18, Z
    3368:	31 81       	ldd	r19, Z+1	; 0x01
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	82 17       	cp	r24, r18
    3370:	93 07       	cpc	r25, r19
    3372:	00 f5       	brcc	.+64     	; 0x33b4 <vTaskDelayUntil+0x9e>
    3374:	20 91 ac 04 	lds	r18, 0x04AC
    3378:	30 91 ad 04 	lds	r19, 0x04AD
    337c:	8b 81       	ldd	r24, Y+3	; 0x03
    337e:	9c 81       	ldd	r25, Y+4	; 0x04
    3380:	28 17       	cp	r18, r24
    3382:	39 07       	cpc	r19, r25
    3384:	b8 f4       	brcc	.+46     	; 0x33b4 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	89 83       	std	Y+1, r24	; 0x01
    338a:	14 c0       	rjmp	.+40     	; 0x33b4 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    338c:	ed 81       	ldd	r30, Y+5	; 0x05
    338e:	fe 81       	ldd	r31, Y+6	; 0x06
    3390:	20 81       	ld	r18, Z
    3392:	31 81       	ldd	r19, Z+1	; 0x01
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	9c 81       	ldd	r25, Y+4	; 0x04
    3398:	82 17       	cp	r24, r18
    339a:	93 07       	cpc	r25, r19
    339c:	48 f0       	brcs	.+18     	; 0x33b0 <vTaskDelayUntil+0x9a>
    339e:	20 91 ac 04 	lds	r18, 0x04AC
    33a2:	30 91 ad 04 	lds	r19, 0x04AD
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	9c 81       	ldd	r25, Y+4	; 0x04
    33aa:	28 17       	cp	r18, r24
    33ac:	39 07       	cpc	r19, r25
    33ae:	10 f4       	brcc	.+4      	; 0x33b4 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    33b4:	ed 81       	ldd	r30, Y+5	; 0x05
    33b6:	fe 81       	ldd	r31, Y+6	; 0x06
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	9c 81       	ldd	r25, Y+4	; 0x04
    33bc:	91 83       	std	Z+1, r25	; 0x01
    33be:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	88 23       	and	r24, r24
    33c4:	59 f0       	breq	.+22     	; 0x33dc <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    33c6:	80 91 a8 04 	lds	r24, 0x04A8
    33ca:	90 91 a9 04 	lds	r25, 0x04A9
    33ce:	02 96       	adiw	r24, 0x02	; 2
    33d0:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	9c 81       	ldd	r25, Y+4	; 0x04
    33d8:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    33dc:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>
    33e0:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	88 23       	and	r24, r24
    33e6:	11 f4       	brne	.+4      	; 0x33ec <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    33e8:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
		}
	}
    33ec:	28 96       	adiw	r28, 0x08	; 8
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    33fe:	df 93       	push	r29
    3400:	cf 93       	push	r28
    3402:	00 d0       	rcall	.+0      	; 0x3404 <vTaskDelay+0x6>
    3404:	00 d0       	rcall	.+0      	; 0x3406 <vTaskDelay+0x8>
    3406:	0f 92       	push	r0
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	9d 83       	std	Y+5, r25	; 0x05
    340e:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3410:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3412:	8c 81       	ldd	r24, Y+4	; 0x04
    3414:	9d 81       	ldd	r25, Y+5	; 0x05
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	d1 f0       	breq	.+52     	; 0x344e <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    341a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    341e:	20 91 ac 04 	lds	r18, 0x04AC
    3422:	30 91 ad 04 	lds	r19, 0x04AD
    3426:	8c 81       	ldd	r24, Y+4	; 0x04
    3428:	9d 81       	ldd	r25, Y+5	; 0x05
    342a:	82 0f       	add	r24, r18
    342c:	93 1f       	adc	r25, r19
    342e:	9b 83       	std	Y+3, r25	; 0x03
    3430:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3432:	80 91 a8 04 	lds	r24, 0x04A8
    3436:	90 91 a9 04 	lds	r25, 0x04A9
    343a:	02 96       	adiw	r24, 0x02	; 2
    343c:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3440:	8a 81       	ldd	r24, Y+2	; 0x02
    3442:	9b 81       	ldd	r25, Y+3	; 0x03
    3444:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3448:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>
    344c:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	88 23       	and	r24, r24
    3452:	11 f4       	brne	.+4      	; 0x3458 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    3454:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
		}
	}
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3468:	af 92       	push	r10
    346a:	bf 92       	push	r11
    346c:	cf 92       	push	r12
    346e:	df 92       	push	r13
    3470:	ef 92       	push	r14
    3472:	ff 92       	push	r15
    3474:	0f 93       	push	r16
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	0f 92       	push	r0
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3480:	20 e6       	ldi	r18, 0x60	; 96
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	8b e9       	ldi	r24, 0x9B	; 155
    3486:	9d e1       	ldi	r25, 0x1D	; 29
    3488:	b9 01       	movw	r22, r18
    348a:	45 e5       	ldi	r20, 0x55	; 85
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	00 e0       	ldi	r16, 0x00	; 0
    3494:	ee 24       	eor	r14, r14
    3496:	ff 24       	eor	r15, r15
    3498:	cc 24       	eor	r12, r12
    349a:	dd 24       	eor	r13, r13
    349c:	aa 24       	eor	r10, r10
    349e:	bb 24       	eor	r11, r11
    34a0:	0e 94 3b 18 	call	0x3076	; 0x3076 <xTaskGenericCreate>
    34a4:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	81 30       	cpi	r24, 0x01	; 1
    34aa:	51 f4       	brne	.+20     	; 0x34c0 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    34ac:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	80 93 b0 04 	sts	0x04B0, r24
		xTickCount = ( portTickType ) 0U;
    34b4:	10 92 ad 04 	sts	0x04AD, r1
    34b8:	10 92 ac 04 	sts	0x04AC, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    34bc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    34c0:	0f 90       	pop	r0
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	0f 91       	pop	r16
    34c8:	ff 90       	pop	r15
    34ca:	ef 90       	pop	r14
    34cc:	df 90       	pop	r13
    34ce:	cf 90       	pop	r12
    34d0:	bf 90       	pop	r11
    34d2:	af 90       	pop	r10
    34d4:	08 95       	ret

000034d6 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    34d6:	df 93       	push	r29
    34d8:	cf 93       	push	r28
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    34de:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    34e0:	10 92 b0 04 	sts	0x04B0, r1
	vPortEndScheduler();
    34e4:	0e 94 08 12 	call	0x2410	; 0x2410 <vPortEndScheduler>
}
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    34f6:	80 91 b1 04 	lds	r24, 0x04B1
    34fa:	8f 5f       	subi	r24, 0xFF	; 255
    34fc:	80 93 b1 04 	sts	0x04B1, r24
}
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	00 d0       	rcall	.+0      	; 0x350c <xTaskResumeAll+0x6>
    350c:	00 d0       	rcall	.+0      	; 0x350e <xTaskResumeAll+0x8>
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3512:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    351a:	80 91 b1 04 	lds	r24, 0x04B1
    351e:	81 50       	subi	r24, 0x01	; 1
    3520:	80 93 b1 04 	sts	0x04B1, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3524:	80 91 b1 04 	lds	r24, 0x04B1
    3528:	88 23       	and	r24, r24
    352a:	09 f0       	breq	.+2      	; 0x352e <xTaskResumeAll+0x28>
    352c:	6c c0       	rjmp	.+216    	; 0x3606 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    352e:	80 91 ab 04 	lds	r24, 0x04AB
    3532:	88 23       	and	r24, r24
    3534:	09 f4       	brne	.+2      	; 0x3538 <xTaskResumeAll+0x32>
    3536:	67 c0       	rjmp	.+206    	; 0x3606 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3538:	19 82       	std	Y+1, r1	; 0x01
    353a:	41 c0       	rjmp	.+130    	; 0x35be <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    353c:	e0 91 fe 04 	lds	r30, 0x04FE
    3540:	f0 91 ff 04 	lds	r31, 0x04FF
    3544:	86 81       	ldd	r24, Z+6	; 0x06
    3546:	97 81       	ldd	r25, Z+7	; 0x07
    3548:	9c 83       	std	Y+4, r25	; 0x04
    354a:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    354c:	8b 81       	ldd	r24, Y+3	; 0x03
    354e:	9c 81       	ldd	r25, Y+4	; 0x04
    3550:	0c 96       	adiw	r24, 0x0c	; 12
    3552:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	9c 81       	ldd	r25, Y+4	; 0x04
    355a:	02 96       	adiw	r24, 0x02	; 2
    355c:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3560:	eb 81       	ldd	r30, Y+3	; 0x03
    3562:	fc 81       	ldd	r31, Y+4	; 0x04
    3564:	96 89       	ldd	r25, Z+22	; 0x16
    3566:	80 91 af 04 	lds	r24, 0x04AF
    356a:	89 17       	cp	r24, r25
    356c:	28 f4       	brcc	.+10     	; 0x3578 <xTaskResumeAll+0x72>
    356e:	eb 81       	ldd	r30, Y+3	; 0x03
    3570:	fc 81       	ldd	r31, Y+4	; 0x04
    3572:	86 89       	ldd	r24, Z+22	; 0x16
    3574:	80 93 af 04 	sts	0x04AF, r24
    3578:	eb 81       	ldd	r30, Y+3	; 0x03
    357a:	fc 81       	ldd	r31, Y+4	; 0x04
    357c:	86 89       	ldd	r24, Z+22	; 0x16
    357e:	28 2f       	mov	r18, r24
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	c9 01       	movw	r24, r18
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	88 0f       	add	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	88 0f       	add	r24, r24
    358e:	99 1f       	adc	r25, r25
    3590:	82 0f       	add	r24, r18
    3592:	93 1f       	adc	r25, r19
    3594:	8a 54       	subi	r24, 0x4A	; 74
    3596:	9b 4f       	sbci	r25, 0xFB	; 251
    3598:	2b 81       	ldd	r18, Y+3	; 0x03
    359a:	3c 81       	ldd	r19, Y+4	; 0x04
    359c:	2e 5f       	subi	r18, 0xFE	; 254
    359e:	3f 4f       	sbci	r19, 0xFF	; 255
    35a0:	b9 01       	movw	r22, r18
    35a2:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    35a6:	eb 81       	ldd	r30, Y+3	; 0x03
    35a8:	fc 81       	ldd	r31, Y+4	; 0x04
    35aa:	96 89       	ldd	r25, Z+22	; 0x16
    35ac:	e0 91 a8 04 	lds	r30, 0x04A8
    35b0:	f0 91 a9 04 	lds	r31, 0x04A9
    35b4:	86 89       	ldd	r24, Z+22	; 0x16
    35b6:	98 17       	cp	r25, r24
    35b8:	10 f0       	brcs	.+4      	; 0x35be <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    35be:	80 91 f9 04 	lds	r24, 0x04F9
    35c2:	88 23       	and	r24, r24
    35c4:	09 f0       	breq	.+2      	; 0x35c8 <xTaskResumeAll+0xc2>
    35c6:	ba cf       	rjmp	.-140    	; 0x353c <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    35c8:	80 91 b2 04 	lds	r24, 0x04B2
    35cc:	88 23       	and	r24, r24
    35ce:	71 f0       	breq	.+28     	; 0x35ec <xTaskResumeAll+0xe6>
    35d0:	07 c0       	rjmp	.+14     	; 0x35e0 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    35d2:	0e 94 42 1b 	call	0x3684	; 0x3684 <vTaskIncrementTick>
						--uxMissedTicks;
    35d6:	80 91 b2 04 	lds	r24, 0x04B2
    35da:	81 50       	subi	r24, 0x01	; 1
    35dc:	80 93 b2 04 	sts	0x04B2, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    35e0:	80 91 b2 04 	lds	r24, 0x04B2
    35e4:	88 23       	and	r24, r24
    35e6:	a9 f7       	brne	.-22     	; 0x35d2 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	21 f0       	breq	.+8      	; 0x35fa <xTaskResumeAll+0xf4>
    35f2:	80 91 b3 04 	lds	r24, 0x04B3
    35f6:	81 30       	cpi	r24, 0x01	; 1
    35f8:	31 f4       	brne	.+12     	; 0x3606 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    35fe:	10 92 b3 04 	sts	0x04B3, r1
					portYIELD_WITHIN_API();
    3602:	0e 94 0f 12 	call	0x241e	; 0x241e <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3606:	0f 90       	pop	r0
    3608:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	08 95       	ret

0000361a <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    361a:	df 93       	push	r29
    361c:	cf 93       	push	r28
    361e:	00 d0       	rcall	.+0      	; 0x3620 <xTaskGetTickCount+0x6>
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    362a:	80 91 ac 04 	lds	r24, 0x04AC
    362e:	90 91 ad 04 	lds	r25, 0x04AD
    3632:	9a 83       	std	Y+2, r25	; 0x02
    3634:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3636:	0f 90       	pop	r0
    3638:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	cf 91       	pop	r28
    3644:	df 91       	pop	r29
    3646:	08 95       	ret

00003648 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3648:	df 93       	push	r29
    364a:	cf 93       	push	r28
    364c:	00 d0       	rcall	.+0      	; 0x364e <xTaskGetTickCountFromISR+0x6>
    364e:	0f 92       	push	r0
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3654:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    3656:	80 91 ac 04 	lds	r24, 0x04AC
    365a:	90 91 ad 04 	lds	r25, 0x04AD
    365e:	9b 83       	std	Y+3, r25	; 0x03
    3660:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3662:	8a 81       	ldd	r24, Y+2	; 0x02
    3664:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	cf 91       	pop	r28
    366e:	df 91       	pop	r29
    3670:	08 95       	ret

00003672 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    367a:	80 91 ab 04 	lds	r24, 0x04AB
}
    367e:	cf 91       	pop	r28
    3680:	df 91       	pop	r29
    3682:	08 95       	ret

00003684 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3684:	df 93       	push	r29
    3686:	cf 93       	push	r28
    3688:	00 d0       	rcall	.+0      	; 0x368a <vTaskIncrementTick+0x6>
    368a:	00 d0       	rcall	.+0      	; 0x368c <vTaskIncrementTick+0x8>
    368c:	00 d0       	rcall	.+0      	; 0x368e <vTaskIncrementTick+0xa>
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3692:	80 91 b1 04 	lds	r24, 0x04B1
    3696:	88 23       	and	r24, r24
    3698:	09 f0       	breq	.+2      	; 0x369c <vTaskIncrementTick+0x18>
    369a:	bb c0       	rjmp	.+374    	; 0x3812 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    369c:	80 91 ac 04 	lds	r24, 0x04AC
    36a0:	90 91 ad 04 	lds	r25, 0x04AD
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	90 93 ad 04 	sts	0x04AD, r25
    36aa:	80 93 ac 04 	sts	0x04AC, r24
		if( xTickCount == ( portTickType ) 0U )
    36ae:	80 91 ac 04 	lds	r24, 0x04AC
    36b2:	90 91 ad 04 	lds	r25, 0x04AD
    36b6:	00 97       	sbiw	r24, 0x00	; 0
    36b8:	d1 f5       	brne	.+116    	; 0x372e <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    36ba:	80 91 f5 04 	lds	r24, 0x04F5
    36be:	90 91 f6 04 	lds	r25, 0x04F6
    36c2:	9c 83       	std	Y+4, r25	; 0x04
    36c4:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    36c6:	80 91 f7 04 	lds	r24, 0x04F7
    36ca:	90 91 f8 04 	lds	r25, 0x04F8
    36ce:	90 93 f6 04 	sts	0x04F6, r25
    36d2:	80 93 f5 04 	sts	0x04F5, r24
			pxOverflowDelayedTaskList = pxTemp;
    36d6:	8b 81       	ldd	r24, Y+3	; 0x03
    36d8:	9c 81       	ldd	r25, Y+4	; 0x04
    36da:	90 93 f8 04 	sts	0x04F8, r25
    36de:	80 93 f7 04 	sts	0x04F7, r24
			xNumOfOverflows++;
    36e2:	80 91 b4 04 	lds	r24, 0x04B4
    36e6:	8f 5f       	subi	r24, 0xFF	; 255
    36e8:	80 93 b4 04 	sts	0x04B4, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    36ec:	e0 91 f5 04 	lds	r30, 0x04F5
    36f0:	f0 91 f6 04 	lds	r31, 0x04F6
    36f4:	80 81       	ld	r24, Z
    36f6:	88 23       	and	r24, r24
    36f8:	39 f4       	brne	.+14     	; 0x3708 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    36fa:	8f ef       	ldi	r24, 0xFF	; 255
    36fc:	9f ef       	ldi	r25, 0xFF	; 255
    36fe:	90 93 80 00 	sts	0x0080, r25
    3702:	80 93 7f 00 	sts	0x007F, r24
    3706:	13 c0       	rjmp	.+38     	; 0x372e <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3708:	e0 91 f5 04 	lds	r30, 0x04F5
    370c:	f0 91 f6 04 	lds	r31, 0x04F6
    3710:	05 80       	ldd	r0, Z+5	; 0x05
    3712:	f6 81       	ldd	r31, Z+6	; 0x06
    3714:	e0 2d       	mov	r30, r0
    3716:	86 81       	ldd	r24, Z+6	; 0x06
    3718:	97 81       	ldd	r25, Z+7	; 0x07
    371a:	9e 83       	std	Y+6, r25	; 0x06
    371c:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    371e:	ed 81       	ldd	r30, Y+5	; 0x05
    3720:	fe 81       	ldd	r31, Y+6	; 0x06
    3722:	82 81       	ldd	r24, Z+2	; 0x02
    3724:	93 81       	ldd	r25, Z+3	; 0x03
    3726:	90 93 80 00 	sts	0x0080, r25
    372a:	80 93 7f 00 	sts	0x007F, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    372e:	20 91 ac 04 	lds	r18, 0x04AC
    3732:	30 91 ad 04 	lds	r19, 0x04AD
    3736:	80 91 7f 00 	lds	r24, 0x007F
    373a:	90 91 80 00 	lds	r25, 0x0080
    373e:	28 17       	cp	r18, r24
    3740:	39 07       	cpc	r19, r25
    3742:	08 f4       	brcc	.+2      	; 0x3746 <vTaskIncrementTick+0xc2>
    3744:	6b c0       	rjmp	.+214    	; 0x381c <vTaskIncrementTick+0x198>
    3746:	e0 91 f5 04 	lds	r30, 0x04F5
    374a:	f0 91 f6 04 	lds	r31, 0x04F6
    374e:	80 81       	ld	r24, Z
    3750:	88 23       	and	r24, r24
    3752:	39 f4       	brne	.+14     	; 0x3762 <vTaskIncrementTick+0xde>
    3754:	8f ef       	ldi	r24, 0xFF	; 255
    3756:	9f ef       	ldi	r25, 0xFF	; 255
    3758:	90 93 80 00 	sts	0x0080, r25
    375c:	80 93 7f 00 	sts	0x007F, r24
    3760:	5d c0       	rjmp	.+186    	; 0x381c <vTaskIncrementTick+0x198>
    3762:	e0 91 f5 04 	lds	r30, 0x04F5
    3766:	f0 91 f6 04 	lds	r31, 0x04F6
    376a:	05 80       	ldd	r0, Z+5	; 0x05
    376c:	f6 81       	ldd	r31, Z+6	; 0x06
    376e:	e0 2d       	mov	r30, r0
    3770:	86 81       	ldd	r24, Z+6	; 0x06
    3772:	97 81       	ldd	r25, Z+7	; 0x07
    3774:	9e 83       	std	Y+6, r25	; 0x06
    3776:	8d 83       	std	Y+5, r24	; 0x05
    3778:	ed 81       	ldd	r30, Y+5	; 0x05
    377a:	fe 81       	ldd	r31, Y+6	; 0x06
    377c:	82 81       	ldd	r24, Z+2	; 0x02
    377e:	93 81       	ldd	r25, Z+3	; 0x03
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	89 83       	std	Y+1, r24	; 0x01
    3784:	20 91 ac 04 	lds	r18, 0x04AC
    3788:	30 91 ad 04 	lds	r19, 0x04AD
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	28 17       	cp	r18, r24
    3792:	39 07       	cpc	r19, r25
    3794:	38 f4       	brcc	.+14     	; 0x37a4 <vTaskIncrementTick+0x120>
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	9a 81       	ldd	r25, Y+2	; 0x02
    379a:	90 93 80 00 	sts	0x0080, r25
    379e:	80 93 7f 00 	sts	0x007F, r24
    37a2:	3c c0       	rjmp	.+120    	; 0x381c <vTaskIncrementTick+0x198>
    37a4:	8d 81       	ldd	r24, Y+5	; 0x05
    37a6:	9e 81       	ldd	r25, Y+6	; 0x06
    37a8:	02 96       	adiw	r24, 0x02	; 2
    37aa:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
    37ae:	ed 81       	ldd	r30, Y+5	; 0x05
    37b0:	fe 81       	ldd	r31, Y+6	; 0x06
    37b2:	84 89       	ldd	r24, Z+20	; 0x14
    37b4:	95 89       	ldd	r25, Z+21	; 0x15
    37b6:	00 97       	sbiw	r24, 0x00	; 0
    37b8:	29 f0       	breq	.+10     	; 0x37c4 <vTaskIncrementTick+0x140>
    37ba:	8d 81       	ldd	r24, Y+5	; 0x05
    37bc:	9e 81       	ldd	r25, Y+6	; 0x06
    37be:	0c 96       	adiw	r24, 0x0c	; 12
    37c0:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
    37c4:	ed 81       	ldd	r30, Y+5	; 0x05
    37c6:	fe 81       	ldd	r31, Y+6	; 0x06
    37c8:	96 89       	ldd	r25, Z+22	; 0x16
    37ca:	80 91 af 04 	lds	r24, 0x04AF
    37ce:	89 17       	cp	r24, r25
    37d0:	28 f4       	brcc	.+10     	; 0x37dc <vTaskIncrementTick+0x158>
    37d2:	ed 81       	ldd	r30, Y+5	; 0x05
    37d4:	fe 81       	ldd	r31, Y+6	; 0x06
    37d6:	86 89       	ldd	r24, Z+22	; 0x16
    37d8:	80 93 af 04 	sts	0x04AF, r24
    37dc:	ed 81       	ldd	r30, Y+5	; 0x05
    37de:	fe 81       	ldd	r31, Y+6	; 0x06
    37e0:	86 89       	ldd	r24, Z+22	; 0x16
    37e2:	28 2f       	mov	r18, r24
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	c9 01       	movw	r24, r18
    37e8:	88 0f       	add	r24, r24
    37ea:	99 1f       	adc	r25, r25
    37ec:	88 0f       	add	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	88 0f       	add	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	82 0f       	add	r24, r18
    37f6:	93 1f       	adc	r25, r19
    37f8:	ac 01       	movw	r20, r24
    37fa:	4a 54       	subi	r20, 0x4A	; 74
    37fc:	5b 4f       	sbci	r21, 0xFB	; 251
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	9c 01       	movw	r18, r24
    3804:	2e 5f       	subi	r18, 0xFE	; 254
    3806:	3f 4f       	sbci	r19, 0xFF	; 255
    3808:	ca 01       	movw	r24, r20
    380a:	b9 01       	movw	r22, r18
    380c:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>
    3810:	9a cf       	rjmp	.-204    	; 0x3746 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    3812:	80 91 b2 04 	lds	r24, 0x04B2
    3816:	8f 5f       	subi	r24, 0xFF	; 255
    3818:	80 93 b2 04 	sts	0x04B2, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    381c:	26 96       	adiw	r28, 0x06	; 6
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	00 d0       	rcall	.+0      	; 0x3834 <vTaskSwitchContext+0x6>
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3838:	80 91 b1 04 	lds	r24, 0x04B1
    383c:	88 23       	and	r24, r24
    383e:	49 f0       	breq	.+18     	; 0x3852 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	80 93 b3 04 	sts	0x04B3, r24
    3846:	54 c0       	rjmp	.+168    	; 0x38f0 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3848:	80 91 af 04 	lds	r24, 0x04AF
    384c:	81 50       	subi	r24, 0x01	; 1
    384e:	80 93 af 04 	sts	0x04AF, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3852:	80 91 af 04 	lds	r24, 0x04AF
    3856:	28 2f       	mov	r18, r24
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	c9 01       	movw	r24, r18
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	82 0f       	add	r24, r18
    386a:	93 1f       	adc	r25, r19
    386c:	fc 01       	movw	r30, r24
    386e:	ea 54       	subi	r30, 0x4A	; 74
    3870:	fb 4f       	sbci	r31, 0xFB	; 251
    3872:	80 81       	ld	r24, Z
    3874:	88 23       	and	r24, r24
    3876:	41 f3       	breq	.-48     	; 0x3848 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3878:	80 91 af 04 	lds	r24, 0x04AF
    387c:	28 2f       	mov	r18, r24
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	c9 01       	movw	r24, r18
    3882:	88 0f       	add	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	88 0f       	add	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	88 0f       	add	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	82 0f       	add	r24, r18
    3890:	93 1f       	adc	r25, r19
    3892:	8a 54       	subi	r24, 0x4A	; 74
    3894:	9b 4f       	sbci	r25, 0xFB	; 251
    3896:	9a 83       	std	Y+2, r25	; 0x02
    3898:	89 83       	std	Y+1, r24	; 0x01
    389a:	e9 81       	ldd	r30, Y+1	; 0x01
    389c:	fa 81       	ldd	r31, Y+2	; 0x02
    389e:	01 80       	ldd	r0, Z+1	; 0x01
    38a0:	f2 81       	ldd	r31, Z+2	; 0x02
    38a2:	e0 2d       	mov	r30, r0
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	e9 81       	ldd	r30, Y+1	; 0x01
    38aa:	fa 81       	ldd	r31, Y+2	; 0x02
    38ac:	92 83       	std	Z+2, r25	; 0x02
    38ae:	81 83       	std	Z+1, r24	; 0x01
    38b0:	e9 81       	ldd	r30, Y+1	; 0x01
    38b2:	fa 81       	ldd	r31, Y+2	; 0x02
    38b4:	21 81       	ldd	r18, Z+1	; 0x01
    38b6:	32 81       	ldd	r19, Z+2	; 0x02
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	9a 81       	ldd	r25, Y+2	; 0x02
    38bc:	03 96       	adiw	r24, 0x03	; 3
    38be:	28 17       	cp	r18, r24
    38c0:	39 07       	cpc	r19, r25
    38c2:	59 f4       	brne	.+22     	; 0x38da <vTaskSwitchContext+0xac>
    38c4:	e9 81       	ldd	r30, Y+1	; 0x01
    38c6:	fa 81       	ldd	r31, Y+2	; 0x02
    38c8:	01 80       	ldd	r0, Z+1	; 0x01
    38ca:	f2 81       	ldd	r31, Z+2	; 0x02
    38cc:	e0 2d       	mov	r30, r0
    38ce:	82 81       	ldd	r24, Z+2	; 0x02
    38d0:	93 81       	ldd	r25, Z+3	; 0x03
    38d2:	e9 81       	ldd	r30, Y+1	; 0x01
    38d4:	fa 81       	ldd	r31, Y+2	; 0x02
    38d6:	92 83       	std	Z+2, r25	; 0x02
    38d8:	81 83       	std	Z+1, r24	; 0x01
    38da:	e9 81       	ldd	r30, Y+1	; 0x01
    38dc:	fa 81       	ldd	r31, Y+2	; 0x02
    38de:	01 80       	ldd	r0, Z+1	; 0x01
    38e0:	f2 81       	ldd	r31, Z+2	; 0x02
    38e2:	e0 2d       	mov	r30, r0
    38e4:	86 81       	ldd	r24, Z+6	; 0x06
    38e6:	97 81       	ldd	r25, Z+7	; 0x07
    38e8:	90 93 a9 04 	sts	0x04A9, r25
    38ec:	80 93 a8 04 	sts	0x04A8, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <vTaskPlaceOnEventList+0x6>
    3900:	00 d0       	rcall	.+0      	; 0x3902 <vTaskPlaceOnEventList+0x8>
    3902:	00 d0       	rcall	.+0      	; 0x3904 <vTaskPlaceOnEventList+0xa>
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	9c 83       	std	Y+4, r25	; 0x04
    390a:	8b 83       	std	Y+3, r24	; 0x03
    390c:	7e 83       	std	Y+6, r23	; 0x06
    390e:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3910:	4b 81       	ldd	r20, Y+3	; 0x03
    3912:	5c 81       	ldd	r21, Y+4	; 0x04
    3914:	80 91 a8 04 	lds	r24, 0x04A8
    3918:	90 91 a9 04 	lds	r25, 0x04A9
    391c:	9c 01       	movw	r18, r24
    391e:	24 5f       	subi	r18, 0xF4	; 244
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	ca 01       	movw	r24, r20
    3924:	b9 01       	movw	r22, r18
    3926:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    392a:	80 91 a8 04 	lds	r24, 0x04A8
    392e:	90 91 a9 04 	lds	r25, 0x04A9
    3932:	02 96       	adiw	r24, 0x02	; 2
    3934:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3938:	20 91 ac 04 	lds	r18, 0x04AC
    393c:	30 91 ad 04 	lds	r19, 0x04AD
    3940:	8d 81       	ldd	r24, Y+5	; 0x05
    3942:	9e 81       	ldd	r25, Y+6	; 0x06
    3944:	82 0f       	add	r24, r18
    3946:	93 1f       	adc	r25, r19
    3948:	9a 83       	std	Y+2, r25	; 0x02
    394a:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	9a 81       	ldd	r25, Y+2	; 0x02
    3950:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    3954:	26 96       	adiw	r28, 0x06	; 6
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	08 95       	ret

00003966 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	00 d0       	rcall	.+0      	; 0x396c <xTaskRemoveFromEventList+0x6>
    396c:	00 d0       	rcall	.+0      	; 0x396e <xTaskRemoveFromEventList+0x8>
    396e:	0f 92       	push	r0
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	9d 83       	std	Y+5, r25	; 0x05
    3976:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3978:	ec 81       	ldd	r30, Y+4	; 0x04
    397a:	fd 81       	ldd	r31, Y+5	; 0x05
    397c:	05 80       	ldd	r0, Z+5	; 0x05
    397e:	f6 81       	ldd	r31, Z+6	; 0x06
    3980:	e0 2d       	mov	r30, r0
    3982:	86 81       	ldd	r24, Z+6	; 0x06
    3984:	97 81       	ldd	r25, Z+7	; 0x07
    3986:	9b 83       	std	Y+3, r25	; 0x03
    3988:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    398a:	8a 81       	ldd	r24, Y+2	; 0x02
    398c:	9b 81       	ldd	r25, Y+3	; 0x03
    398e:	0c 96       	adiw	r24, 0x0c	; 12
    3990:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3994:	80 91 b1 04 	lds	r24, 0x04B1
    3998:	88 23       	and	r24, r24
    399a:	61 f5       	brne	.+88     	; 0x39f4 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    399c:	8a 81       	ldd	r24, Y+2	; 0x02
    399e:	9b 81       	ldd	r25, Y+3	; 0x03
    39a0:	02 96       	adiw	r24, 0x02	; 2
    39a2:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    39a6:	ea 81       	ldd	r30, Y+2	; 0x02
    39a8:	fb 81       	ldd	r31, Y+3	; 0x03
    39aa:	96 89       	ldd	r25, Z+22	; 0x16
    39ac:	80 91 af 04 	lds	r24, 0x04AF
    39b0:	89 17       	cp	r24, r25
    39b2:	28 f4       	brcc	.+10     	; 0x39be <xTaskRemoveFromEventList+0x58>
    39b4:	ea 81       	ldd	r30, Y+2	; 0x02
    39b6:	fb 81       	ldd	r31, Y+3	; 0x03
    39b8:	86 89       	ldd	r24, Z+22	; 0x16
    39ba:	80 93 af 04 	sts	0x04AF, r24
    39be:	ea 81       	ldd	r30, Y+2	; 0x02
    39c0:	fb 81       	ldd	r31, Y+3	; 0x03
    39c2:	86 89       	ldd	r24, Z+22	; 0x16
    39c4:	28 2f       	mov	r18, r24
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	c9 01       	movw	r24, r18
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	88 0f       	add	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	88 0f       	add	r24, r24
    39d4:	99 1f       	adc	r25, r25
    39d6:	82 0f       	add	r24, r18
    39d8:	93 1f       	adc	r25, r19
    39da:	ac 01       	movw	r20, r24
    39dc:	4a 54       	subi	r20, 0x4A	; 74
    39de:	5b 4f       	sbci	r21, 0xFB	; 251
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	9b 81       	ldd	r25, Y+3	; 0x03
    39e4:	9c 01       	movw	r18, r24
    39e6:	2e 5f       	subi	r18, 0xFE	; 254
    39e8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ea:	ca 01       	movw	r24, r20
    39ec:	b9 01       	movw	r22, r18
    39ee:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>
    39f2:	0a c0       	rjmp	.+20     	; 0x3a08 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    39f4:	8a 81       	ldd	r24, Y+2	; 0x02
    39f6:	9b 81       	ldd	r25, Y+3	; 0x03
    39f8:	9c 01       	movw	r18, r24
    39fa:	24 5f       	subi	r18, 0xF4	; 244
    39fc:	3f 4f       	sbci	r19, 0xFF	; 255
    39fe:	89 ef       	ldi	r24, 0xF9	; 249
    3a00:	94 e0       	ldi	r25, 0x04	; 4
    3a02:	b9 01       	movw	r22, r18
    3a04:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3a08:	ea 81       	ldd	r30, Y+2	; 0x02
    3a0a:	fb 81       	ldd	r31, Y+3	; 0x03
    3a0c:	96 89       	ldd	r25, Z+22	; 0x16
    3a0e:	e0 91 a8 04 	lds	r30, 0x04A8
    3a12:	f0 91 a9 04 	lds	r31, 0x04A9
    3a16:	86 89       	ldd	r24, Z+22	; 0x16
    3a18:	98 17       	cp	r25, r24
    3a1a:	18 f0       	brcs	.+6      	; 0x3a22 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	89 83       	std	Y+1, r24	; 0x01
    3a20:	01 c0       	rjmp	.+2      	; 0x3a24 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    3a22:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	cf 91       	pop	r28
    3a32:	df 91       	pop	r29
    3a34:	08 95       	ret

00003a36 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    3a36:	df 93       	push	r29
    3a38:	cf 93       	push	r28
    3a3a:	00 d0       	rcall	.+0      	; 0x3a3c <vTaskSetTimeOutState+0x6>
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	9a 83       	std	Y+2, r25	; 0x02
    3a42:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3a44:	80 91 b4 04 	lds	r24, 0x04B4
    3a48:	e9 81       	ldd	r30, Y+1	; 0x01
    3a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a4c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    3a4e:	80 91 ac 04 	lds	r24, 0x04AC
    3a52:	90 91 ad 04 	lds	r25, 0x04AD
    3a56:	e9 81       	ldd	r30, Y+1	; 0x01
    3a58:	fa 81       	ldd	r31, Y+2	; 0x02
    3a5a:	92 83       	std	Z+2, r25	; 0x02
    3a5c:	81 83       	std	Z+1, r24	; 0x01
}
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	cf 91       	pop	r28
    3a64:	df 91       	pop	r29
    3a66:	08 95       	ret

00003a68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	00 d0       	rcall	.+0      	; 0x3a6e <xTaskCheckForTimeOut+0x6>
    3a6e:	00 d0       	rcall	.+0      	; 0x3a70 <xTaskCheckForTimeOut+0x8>
    3a70:	0f 92       	push	r0
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	9b 83       	std	Y+3, r25	; 0x03
    3a78:	8a 83       	std	Y+2, r24	; 0x02
    3a7a:	7d 83       	std	Y+5, r23	; 0x05
    3a7c:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3a84:	ea 81       	ldd	r30, Y+2	; 0x02
    3a86:	fb 81       	ldd	r31, Y+3	; 0x03
    3a88:	90 81       	ld	r25, Z
    3a8a:	80 91 b4 04 	lds	r24, 0x04B4
    3a8e:	98 17       	cp	r25, r24
    3a90:	71 f0       	breq	.+28     	; 0x3aae <xTaskCheckForTimeOut+0x46>
    3a92:	ea 81       	ldd	r30, Y+2	; 0x02
    3a94:	fb 81       	ldd	r31, Y+3	; 0x03
    3a96:	21 81       	ldd	r18, Z+1	; 0x01
    3a98:	32 81       	ldd	r19, Z+2	; 0x02
    3a9a:	80 91 ac 04 	lds	r24, 0x04AC
    3a9e:	90 91 ad 04 	lds	r25, 0x04AD
    3aa2:	82 17       	cp	r24, r18
    3aa4:	93 07       	cpc	r25, r19
    3aa6:	18 f0       	brcs	.+6      	; 0x3aae <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	89 83       	std	Y+1, r24	; 0x01
    3aac:	2f c0       	rjmp	.+94     	; 0x3b0c <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3aae:	20 91 ac 04 	lds	r18, 0x04AC
    3ab2:	30 91 ad 04 	lds	r19, 0x04AD
    3ab6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ab8:	fb 81       	ldd	r31, Y+3	; 0x03
    3aba:	81 81       	ldd	r24, Z+1	; 0x01
    3abc:	92 81       	ldd	r25, Z+2	; 0x02
    3abe:	28 1b       	sub	r18, r24
    3ac0:	39 0b       	sbc	r19, r25
    3ac2:	ec 81       	ldd	r30, Y+4	; 0x04
    3ac4:	fd 81       	ldd	r31, Y+5	; 0x05
    3ac6:	80 81       	ld	r24, Z
    3ac8:	91 81       	ldd	r25, Z+1	; 0x01
    3aca:	28 17       	cp	r18, r24
    3acc:	39 07       	cpc	r19, r25
    3ace:	e0 f4       	brcc	.+56     	; 0x3b08 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3ad0:	ec 81       	ldd	r30, Y+4	; 0x04
    3ad2:	fd 81       	ldd	r31, Y+5	; 0x05
    3ad4:	40 81       	ld	r20, Z
    3ad6:	51 81       	ldd	r21, Z+1	; 0x01
    3ad8:	ea 81       	ldd	r30, Y+2	; 0x02
    3ada:	fb 81       	ldd	r31, Y+3	; 0x03
    3adc:	21 81       	ldd	r18, Z+1	; 0x01
    3ade:	32 81       	ldd	r19, Z+2	; 0x02
    3ae0:	80 91 ac 04 	lds	r24, 0x04AC
    3ae4:	90 91 ad 04 	lds	r25, 0x04AD
    3ae8:	b9 01       	movw	r22, r18
    3aea:	68 1b       	sub	r22, r24
    3aec:	79 0b       	sbc	r23, r25
    3aee:	cb 01       	movw	r24, r22
    3af0:	84 0f       	add	r24, r20
    3af2:	95 1f       	adc	r25, r21
    3af4:	ec 81       	ldd	r30, Y+4	; 0x04
    3af6:	fd 81       	ldd	r31, Y+5	; 0x05
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    3afc:	8a 81       	ldd	r24, Y+2	; 0x02
    3afe:	9b 81       	ldd	r25, Y+3	; 0x03
    3b00:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3b04:	19 82       	std	Y+1, r1	; 0x01
    3b06:	02 c0       	rjmp	.+4      	; 0x3b0c <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3b0c:	0f 90       	pop	r0
    3b0e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	0f 90       	pop	r0
    3b18:	0f 90       	pop	r0
    3b1a:	0f 90       	pop	r0
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	80 93 b3 04 	sts	0x04B3, r24
}
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	08 95       	ret

00003b36 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3b36:	df 93       	push	r29
    3b38:	cf 93       	push	r28
    3b3a:	00 d0       	rcall	.+0      	; 0x3b3c <prvIdleTask+0x6>
    3b3c:	cd b7       	in	r28, 0x3d	; 61
    3b3e:	de b7       	in	r29, 0x3e	; 62
    3b40:	9a 83       	std	Y+2, r25	; 0x02
    3b42:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    3b44:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <prvCheckTasksWaitingTermination>
    3b48:	fd cf       	rjmp	.-6      	; 0x3b44 <prvIdleTask+0xe>

00003b4a <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    3b4a:	0f 93       	push	r16
    3b4c:	1f 93       	push	r17
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	29 97       	sbiw	r28, 0x09	; 9
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	9a 83       	std	Y+2, r25	; 0x02
    3b64:	89 83       	std	Y+1, r24	; 0x01
    3b66:	7c 83       	std	Y+4, r23	; 0x04
    3b68:	6b 83       	std	Y+3, r22	; 0x03
    3b6a:	4d 83       	std	Y+5, r20	; 0x05
    3b6c:	3f 83       	std	Y+7, r19	; 0x07
    3b6e:	2e 83       	std	Y+6, r18	; 0x06
    3b70:	19 87       	std	Y+9, r17	; 0x09
    3b72:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	9a 81       	ldd	r25, Y+2	; 0x02
    3b78:	49 96       	adiw	r24, 0x19	; 25
    3b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b7e:	b9 01       	movw	r22, r18
    3b80:	48 e0       	ldi	r20, 0x08	; 8
    3b82:	50 e0       	ldi	r21, 0x00	; 0
    3b84:	0e 94 b7 24 	call	0x496e	; 0x496e <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    3b88:	e9 81       	ldd	r30, Y+1	; 0x01
    3b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b8c:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    3b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b90:	85 30       	cpi	r24, 0x05	; 5
    3b92:	10 f0       	brcs	.+4      	; 0x3b98 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3b94:	84 e0       	ldi	r24, 0x04	; 4
    3b96:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    3b98:	e9 81       	ldd	r30, Y+1	; 0x01
    3b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9e:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    3ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba6:	81 a3       	std	Z+33, r24	; 0x21
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bac:	02 96       	adiw	r24, 0x02	; 2
    3bae:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb6:	0c 96       	adiw	r24, 0x0c	; 12
    3bb8:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    3bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc4:	91 87       	std	Z+9, r25	; 0x09
    3bc6:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bca:	28 2f       	mov	r18, r24
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	85 e0       	ldi	r24, 0x05	; 5
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	82 1b       	sub	r24, r18
    3bd4:	93 0b       	sbc	r25, r19
    3bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    3bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    3bda:	95 87       	std	Z+13, r25	; 0x0d
    3bdc:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3bde:	e9 81       	ldd	r30, Y+1	; 0x01
    3be0:	fa 81       	ldd	r31, Y+2	; 0x02
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	9a 81       	ldd	r25, Y+2	; 0x02
    3be6:	93 8b       	std	Z+19, r25	; 0x13
    3be8:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    3bea:	29 96       	adiw	r28, 0x09	; 9
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	f8 94       	cli
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	cd bf       	out	0x3d, r28	; 61
    3bf6:	cf 91       	pop	r28
    3bf8:	df 91       	pop	r29
    3bfa:	1f 91       	pop	r17
    3bfc:	0f 91       	pop	r16
    3bfe:	08 95       	ret

00003c00 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	0f 92       	push	r0
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    3c0a:	19 82       	std	Y+1, r1	; 0x01
    3c0c:	13 c0       	rjmp	.+38     	; 0x3c34 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	28 2f       	mov	r18, r24
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	c9 01       	movw	r24, r18
    3c16:	88 0f       	add	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	88 0f       	add	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	88 0f       	add	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	82 0f       	add	r24, r18
    3c24:	93 1f       	adc	r25, r19
    3c26:	8a 54       	subi	r24, 0x4A	; 74
    3c28:	9b 4f       	sbci	r25, 0xFB	; 251
    3c2a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	8f 5f       	subi	r24, 0xFF	; 255
    3c32:	89 83       	std	Y+1, r24	; 0x01
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	85 30       	cpi	r24, 0x05	; 5
    3c38:	50 f3       	brcs	.-44     	; 0x3c0e <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    3c3a:	83 ee       	ldi	r24, 0xE3	; 227
    3c3c:	94 e0       	ldi	r25, 0x04	; 4
    3c3e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    3c42:	8c ee       	ldi	r24, 0xEC	; 236
    3c44:	94 e0       	ldi	r25, 0x04	; 4
    3c46:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    3c4a:	89 ef       	ldi	r24, 0xF9	; 249
    3c4c:	94 e0       	ldi	r25, 0x04	; 4
    3c4e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    3c52:	82 e0       	ldi	r24, 0x02	; 2
    3c54:	95 e0       	ldi	r25, 0x05	; 5
    3c56:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3c5a:	83 ee       	ldi	r24, 0xE3	; 227
    3c5c:	94 e0       	ldi	r25, 0x04	; 4
    3c5e:	90 93 f6 04 	sts	0x04F6, r25
    3c62:	80 93 f5 04 	sts	0x04F5, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3c66:	8c ee       	ldi	r24, 0xEC	; 236
    3c68:	94 e0       	ldi	r25, 0x04	; 4
    3c6a:	90 93 f8 04 	sts	0x04F8, r25
    3c6e:	80 93 f7 04 	sts	0x04F7, r24
}
    3c72:	0f 90       	pop	r0
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	08 95       	ret

00003c7a <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	00 d0       	rcall	.+0      	; 0x3c80 <prvCheckTasksWaitingTermination+0x6>
    3c80:	0f 92       	push	r0
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    3c86:	80 91 aa 04 	lds	r24, 0x04AA
    3c8a:	88 23       	and	r24, r24
    3c8c:	71 f1       	breq	.+92     	; 0x3cea <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    3c8e:	0e 94 77 1a 	call	0x34ee	; 0x34ee <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3c92:	80 91 02 05 	lds	r24, 0x0502
    3c96:	1b 82       	std	Y+3, r1	; 0x03
    3c98:	88 23       	and	r24, r24
    3c9a:	11 f4       	brne	.+4      	; 0x3ca0 <prvCheckTasksWaitingTermination+0x26>
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    3ca0:	0e 94 83 1a 	call	0x3506	; 0x3506 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	88 23       	and	r24, r24
    3ca8:	01 f5       	brne	.+64     	; 0x3cea <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    3cb0:	e0 91 07 05 	lds	r30, 0x0507
    3cb4:	f0 91 08 05 	lds	r31, 0x0508
    3cb8:	86 81       	ldd	r24, Z+6	; 0x06
    3cba:	97 81       	ldd	r25, Z+7	; 0x07
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc4:	02 96       	adiw	r24, 0x02	; 2
    3cc6:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>
					--uxCurrentNumberOfTasks;
    3cca:	80 91 ab 04 	lds	r24, 0x04AB
    3cce:	81 50       	subi	r24, 0x01	; 1
    3cd0:	80 93 ab 04 	sts	0x04AB, r24
					--uxTasksDeleted;
    3cd4:	80 91 aa 04 	lds	r24, 0x04AA
    3cd8:	81 50       	subi	r24, 0x01	; 1
    3cda:	80 93 aa 04 	sts	0x04AA, r24
				}
				taskEXIT_CRITICAL();
    3cde:	0f 90       	pop	r0
    3ce0:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <prvAddCurrentTaskToDelayedList+0x6>
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
    3d00:	9a 83       	std	Y+2, r25	; 0x02
    3d02:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3d04:	e0 91 a8 04 	lds	r30, 0x04A8
    3d08:	f0 91 a9 04 	lds	r31, 0x04A9
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d10:	93 83       	std	Z+3, r25	; 0x03
    3d12:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    3d14:	20 91 ac 04 	lds	r18, 0x04AC
    3d18:	30 91 ad 04 	lds	r19, 0x04AD
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d20:	82 17       	cp	r24, r18
    3d22:	93 07       	cpc	r25, r19
    3d24:	70 f4       	brcc	.+28     	; 0x3d42 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d26:	80 91 f7 04 	lds	r24, 0x04F7
    3d2a:	90 91 f8 04 	lds	r25, 0x04F8
    3d2e:	20 91 a8 04 	lds	r18, 0x04A8
    3d32:	30 91 a9 04 	lds	r19, 0x04A9
    3d36:	2e 5f       	subi	r18, 0xFE	; 254
    3d38:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3a:	b9 01       	movw	r22, r18
    3d3c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vListInsert>
    3d40:	1e c0       	rjmp	.+60     	; 0x3d7e <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d42:	40 91 f5 04 	lds	r20, 0x04F5
    3d46:	50 91 f6 04 	lds	r21, 0x04F6
    3d4a:	80 91 a8 04 	lds	r24, 0x04A8
    3d4e:	90 91 a9 04 	lds	r25, 0x04A9
    3d52:	9c 01       	movw	r18, r24
    3d54:	2e 5f       	subi	r18, 0xFE	; 254
    3d56:	3f 4f       	sbci	r19, 0xFF	; 255
    3d58:	ca 01       	movw	r24, r20
    3d5a:	b9 01       	movw	r22, r18
    3d5c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3d60:	20 91 7f 00 	lds	r18, 0x007F
    3d64:	30 91 80 00 	lds	r19, 0x0080
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6c:	82 17       	cp	r24, r18
    3d6e:	93 07       	cpc	r25, r19
    3d70:	30 f4       	brcc	.+12     	; 0x3d7e <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	9a 81       	ldd	r25, Y+2	; 0x02
    3d76:	90 93 80 00 	sts	0x0080, r25
    3d7a:	80 93 7f 00 	sts	0x007F, r24
		}
	}
}
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	08 95       	ret

00003d88 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    3d88:	df 93       	push	r29
    3d8a:	cf 93       	push	r28
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    3d90:	28 97       	sbiw	r28, 0x08	; 8
    3d92:	0f b6       	in	r0, 0x3f	; 63
    3d94:	f8 94       	cli
    3d96:	de bf       	out	0x3e, r29	; 62
    3d98:	0f be       	out	0x3f, r0	; 63
    3d9a:	cd bf       	out	0x3d, r28	; 61
    3d9c:	9c 83       	std	Y+4, r25	; 0x04
    3d9e:	8b 83       	std	Y+3, r24	; 0x03
    3da0:	7e 83       	std	Y+6, r23	; 0x06
    3da2:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    3da4:	82 e2       	ldi	r24, 0x22	; 34
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <pvPortMalloc>
    3dac:	9a 83       	std	Y+2, r25	; 0x02
    3dae:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	9a 81       	ldd	r25, Y+2	; 0x02
    3db4:	00 97       	sbiw	r24, 0x00	; 0
    3db6:	69 f1       	breq	.+90     	; 0x3e12 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    3db8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dba:	9e 81       	ldd	r25, Y+6	; 0x06
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	39 f4       	brne	.+14     	; 0x3dce <prvAllocateTCBAndStack+0x46>
    3dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <pvPortMalloc>
    3dc8:	98 87       	std	Y+8, r25	; 0x08
    3dca:	8f 83       	std	Y+7, r24	; 0x07
    3dcc:	04 c0       	rjmp	.+8      	; 0x3dd6 <prvAllocateTCBAndStack+0x4e>
    3dce:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd2:	98 87       	std	Y+8, r25	; 0x08
    3dd4:	8f 83       	std	Y+7, r24	; 0x07
    3dd6:	e9 81       	ldd	r30, Y+1	; 0x01
    3dd8:	fa 81       	ldd	r31, Y+2	; 0x02
    3dda:	8f 81       	ldd	r24, Y+7	; 0x07
    3ddc:	98 85       	ldd	r25, Y+8	; 0x08
    3dde:	90 8f       	std	Z+24, r25	; 0x18
    3de0:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    3de2:	e9 81       	ldd	r30, Y+1	; 0x01
    3de4:	fa 81       	ldd	r31, Y+2	; 0x02
    3de6:	87 89       	ldd	r24, Z+23	; 0x17
    3de8:	90 8d       	ldd	r25, Z+24	; 0x18
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	39 f4       	brne	.+14     	; 0x3dfc <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    3dee:	89 81       	ldd	r24, Y+1	; 0x01
    3df0:	9a 81       	ldd	r25, Y+2	; 0x02
    3df2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vPortFree>
			pxNewTCB = NULL;
    3df6:	1a 82       	std	Y+2, r1	; 0x02
    3df8:	19 82       	std	Y+1, r1	; 0x01
    3dfa:	0b c0       	rjmp	.+22     	; 0x3e12 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    3dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    3dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    3e00:	87 89       	ldd	r24, Z+23	; 0x17
    3e02:	90 8d       	ldd	r25, Z+24	; 0x18
    3e04:	2b 81       	ldd	r18, Y+3	; 0x03
    3e06:	3c 81       	ldd	r19, Y+4	; 0x04
    3e08:	65 ea       	ldi	r22, 0xA5	; 165
    3e0a:	70 e0       	ldi	r23, 0x00	; 0
    3e0c:	a9 01       	movw	r20, r18
    3e0e:	0e 94 b0 24 	call	0x4960	; 0x4960 <memset>
		}
	}

	return pxNewTCB;
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e16:	28 96       	adiw	r28, 0x08	; 8
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	cf 91       	pop	r28
    3e24:	df 91       	pop	r29
    3e26:	08 95       	ret

00003e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	00 d0       	rcall	.+0      	; 0x3e2e <prvDeleteTCB+0x6>
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	9a 83       	std	Y+2, r25	; 0x02
    3e34:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    3e36:	e9 81       	ldd	r30, Y+1	; 0x01
    3e38:	fa 81       	ldd	r31, Y+2	; 0x02
    3e3a:	87 89       	ldd	r24, Z+23	; 0x17
    3e3c:	90 8d       	ldd	r25, Z+24	; 0x18
    3e3e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vPortFree>
		vPortFree( pxTCB );
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <vPortFree>
	}
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	cf 91       	pop	r28
    3e50:	df 91       	pop	r29
    3e52:	08 95       	ret

00003e54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    3e54:	df 93       	push	r29
    3e56:	cf 93       	push	r28
    3e58:	00 d0       	rcall	.+0      	; 0x3e5a <xTaskGetCurrentTaskHandle+0x6>
    3e5a:	cd b7       	in	r28, 0x3d	; 61
    3e5c:	de b7       	in	r29, 0x3e	; 62
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3e5e:	80 91 a8 04 	lds	r24, 0x04A8
    3e62:	90 91 a9 04 	lds	r25, 0x04A9
    3e66:	9a 83       	std	Y+2, r25	; 0x02
    3e68:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    3e6a:	89 81       	ldd	r24, Y+1	; 0x01
    3e6c:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	cf 91       	pop	r28
    3e74:	df 91       	pop	r29
    3e76:	08 95       	ret

00003e78 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    3e78:	df 93       	push	r29
    3e7a:	cf 93       	push	r28
    3e7c:	00 d0       	rcall	.+0      	; 0x3e7e <vTaskPriorityInherit+0x6>
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <vTaskPriorityInherit+0x8>
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
    3e84:	9c 83       	std	Y+4, r25	; 0x04
    3e86:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8c:	9a 83       	std	Y+2, r25	; 0x02
    3e8e:	89 83       	std	Y+1, r24	; 0x01

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3e90:	e9 81       	ldd	r30, Y+1	; 0x01
    3e92:	fa 81       	ldd	r31, Y+2	; 0x02
    3e94:	96 89       	ldd	r25, Z+22	; 0x16
    3e96:	e0 91 a8 04 	lds	r30, 0x04A8
    3e9a:	f0 91 a9 04 	lds	r31, 0x04A9
    3e9e:	86 89       	ldd	r24, Z+22	; 0x16
    3ea0:	98 17       	cp	r25, r24
    3ea2:	08 f0       	brcs	.+2      	; 0x3ea6 <vTaskPriorityInherit+0x2e>
    3ea4:	62 c0       	rjmp	.+196    	; 0x3f6a <vTaskPriorityInherit+0xf2>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    3ea6:	e0 91 a8 04 	lds	r30, 0x04A8
    3eaa:	f0 91 a9 04 	lds	r31, 0x04A9
    3eae:	86 89       	ldd	r24, Z+22	; 0x16
    3eb0:	28 2f       	mov	r18, r24
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	85 e0       	ldi	r24, 0x05	; 5
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	82 1b       	sub	r24, r18
    3eba:	93 0b       	sbc	r25, r19
    3ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    3ec0:	95 87       	std	Z+13, r25	; 0x0d
    3ec2:	84 87       	std	Z+12, r24	; 0x0c

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ec8:	42 85       	ldd	r20, Z+10	; 0x0a
    3eca:	53 85       	ldd	r21, Z+11	; 0x0b
    3ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ece:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed0:	86 89       	ldd	r24, Z+22	; 0x16
    3ed2:	28 2f       	mov	r18, r24
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	c9 01       	movw	r24, r18
    3ed8:	88 0f       	add	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	88 0f       	add	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	88 0f       	add	r24, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	82 0f       	add	r24, r18
    3ee6:	93 1f       	adc	r25, r19
    3ee8:	8a 54       	subi	r24, 0x4A	; 74
    3eea:	9b 4f       	sbci	r25, 0xFB	; 251
    3eec:	48 17       	cp	r20, r24
    3eee:	59 07       	cpc	r21, r25
    3ef0:	a1 f5       	brne	.+104    	; 0x3f5a <vTaskPriorityInherit+0xe2>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef6:	02 96       	adiw	r24, 0x02	; 2
    3ef8:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3efc:	e0 91 a8 04 	lds	r30, 0x04A8
    3f00:	f0 91 a9 04 	lds	r31, 0x04A9
    3f04:	86 89       	ldd	r24, Z+22	; 0x16
    3f06:	e9 81       	ldd	r30, Y+1	; 0x01
    3f08:	fa 81       	ldd	r31, Y+2	; 0x02
    3f0a:	86 8b       	std	Z+22, r24	; 0x16
				prvAddTaskToReadyQueue( pxTCB );
    3f0c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f0e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f10:	96 89       	ldd	r25, Z+22	; 0x16
    3f12:	80 91 af 04 	lds	r24, 0x04AF
    3f16:	89 17       	cp	r24, r25
    3f18:	28 f4       	brcc	.+10     	; 0x3f24 <vTaskPriorityInherit+0xac>
    3f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f1e:	86 89       	ldd	r24, Z+22	; 0x16
    3f20:	80 93 af 04 	sts	0x04AF, r24
    3f24:	e9 81       	ldd	r30, Y+1	; 0x01
    3f26:	fa 81       	ldd	r31, Y+2	; 0x02
    3f28:	86 89       	ldd	r24, Z+22	; 0x16
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	c9 01       	movw	r24, r18
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	88 0f       	add	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	82 0f       	add	r24, r18
    3f3e:	93 1f       	adc	r25, r19
    3f40:	ac 01       	movw	r20, r24
    3f42:	4a 54       	subi	r20, 0x4A	; 74
    3f44:	5b 4f       	sbci	r21, 0xFB	; 251
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4a:	9c 01       	movw	r18, r24
    3f4c:	2e 5f       	subi	r18, 0xFE	; 254
    3f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f50:	ca 01       	movw	r24, r20
    3f52:	b9 01       	movw	r22, r18
    3f54:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>
    3f58:	08 c0       	rjmp	.+16     	; 0x3f6a <vTaskPriorityInherit+0xf2>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3f5a:	e0 91 a8 04 	lds	r30, 0x04A8
    3f5e:	f0 91 a9 04 	lds	r31, 0x04A9
    3f62:	86 89       	ldd	r24, Z+22	; 0x16
    3f64:	e9 81       	ldd	r30, Y+1	; 0x01
    3f66:	fa 81       	ldd	r31, Y+2	; 0x02
    3f68:	86 8b       	std	Z+22, r24	; 0x16
			}
		}
	}
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	0f 90       	pop	r0
    3f70:	0f 90       	pop	r0
    3f72:	cf 91       	pop	r28
    3f74:	df 91       	pop	r29
    3f76:	08 95       	ret

00003f78 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    3f78:	df 93       	push	r29
    3f7a:	cf 93       	push	r28
    3f7c:	00 d0       	rcall	.+0      	; 0x3f7e <vTaskPriorityDisinherit+0x6>
    3f7e:	00 d0       	rcall	.+0      	; 0x3f80 <vTaskPriorityDisinherit+0x8>
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	9c 83       	std	Y+4, r25	; 0x04
    3f86:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    3f88:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f8c:	9a 83       	std	Y+2, r25	; 0x02
    3f8e:	89 83       	std	Y+1, r24	; 0x01

		if( pxMutexHolder != NULL )
    3f90:	8b 81       	ldd	r24, Y+3	; 0x03
    3f92:	9c 81       	ldd	r25, Y+4	; 0x04
    3f94:	00 97       	sbiw	r24, 0x00	; 0
    3f96:	09 f4       	brne	.+2      	; 0x3f9a <vTaskPriorityDisinherit+0x22>
    3f98:	47 c0       	rjmp	.+142    	; 0x4028 <vTaskPriorityDisinherit+0xb0>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f9e:	96 89       	ldd	r25, Z+22	; 0x16
    3fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    3fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    3fa4:	81 a1       	ldd	r24, Z+33	; 0x21
    3fa6:	98 17       	cp	r25, r24
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <vTaskPriorityDisinherit+0x34>
    3faa:	3e c0       	rjmp	.+124    	; 0x4028 <vTaskPriorityDisinherit+0xb0>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb0:	02 96       	adiw	r24, 0x02	; 2
    3fb2:	0e 94 07 10 	call	0x200e	; 0x200e <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    3fba:	81 a1       	ldd	r24, Z+33	; 0x21
    3fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    3fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc0:	86 8b       	std	Z+22, r24	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    3fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc6:	86 89       	ldd	r24, Z+22	; 0x16
    3fc8:	28 2f       	mov	r18, r24
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	85 e0       	ldi	r24, 0x05	; 5
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	82 1b       	sub	r24, r18
    3fd2:	93 0b       	sbc	r25, r19
    3fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    3fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    3fd8:	95 87       	std	Z+13, r25	; 0x0d
    3fda:	84 87       	std	Z+12, r24	; 0x0c
				prvAddTaskToReadyQueue( pxTCB );
    3fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    3fde:	fa 81       	ldd	r31, Y+2	; 0x02
    3fe0:	96 89       	ldd	r25, Z+22	; 0x16
    3fe2:	80 91 af 04 	lds	r24, 0x04AF
    3fe6:	89 17       	cp	r24, r25
    3fe8:	28 f4       	brcc	.+10     	; 0x3ff4 <vTaskPriorityDisinherit+0x7c>
    3fea:	e9 81       	ldd	r30, Y+1	; 0x01
    3fec:	fa 81       	ldd	r31, Y+2	; 0x02
    3fee:	86 89       	ldd	r24, Z+22	; 0x16
    3ff0:	80 93 af 04 	sts	0x04AF, r24
    3ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ff8:	86 89       	ldd	r24, Z+22	; 0x16
    3ffa:	28 2f       	mov	r18, r24
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	c9 01       	movw	r24, r18
    4000:	88 0f       	add	r24, r24
    4002:	99 1f       	adc	r25, r25
    4004:	88 0f       	add	r24, r24
    4006:	99 1f       	adc	r25, r25
    4008:	88 0f       	add	r24, r24
    400a:	99 1f       	adc	r25, r25
    400c:	82 0f       	add	r24, r18
    400e:	93 1f       	adc	r25, r19
    4010:	ac 01       	movw	r20, r24
    4012:	4a 54       	subi	r20, 0x4A	; 74
    4014:	5b 4f       	sbci	r21, 0xFB	; 251
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	9a 81       	ldd	r25, Y+2	; 0x02
    401a:	9c 01       	movw	r18, r24
    401c:	2e 5f       	subi	r18, 0xFE	; 254
    401e:	3f 4f       	sbci	r19, 0xFF	; 255
    4020:	ca 01       	movw	r24, r20
    4022:	b9 01       	movw	r22, r18
    4024:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInsertEnd>
			}
		}
	}
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	cf 91       	pop	r28
    4032:	df 91       	pop	r29
    4034:	08 95       	ret

00004036 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    4036:	df 93       	push	r29
    4038:	cf 93       	push	r28
    403a:	0f 92       	push	r0
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4040:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA7_DIR,PA6_DIR,PA5_DIR,PA4_DIR,PA3_DIR,PA2_DIR,PA1_DIR,PA0_DIR);
    4042:	ea e3       	ldi	r30, 0x3A	; 58
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	85 e7       	ldi	r24, 0x75	; 117
    4048:	80 83       	st	Z, r24

	PORTA = CONC(PA7_INIT_VAL,PA6_INIT_VAL,PA5_INIT_VAL,PA4_INIT_VAL,PA3_INIT_VAL,PA2_INIT_VAL,PA1_INIT_VAL,PA0_INIT_VAL);
    404a:	eb e3       	ldi	r30, 0x3B	; 59
    404c:	f0 e0       	ldi	r31, 0x00	; 0
    404e:	89 ed       	ldi	r24, 0xD9	; 217
    4050:	80 83       	st	Z, r24

#elif PA0_DIR == DIO_u8OUTPUT

#endif
*/
	return Local_enuErrorState;
    4052:	89 81       	ldd	r24, Y+1	; 0x01
}
    4054:	0f 90       	pop	r0
    4056:	cf 91       	pop	r28
    4058:	df 91       	pop	r29
    405a:	08 95       	ret

0000405c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 Copy_u8Direction)
{
    405c:	df 93       	push	r29
    405e:	cf 93       	push	r28
    4060:	00 d0       	rcall	.+0      	; 0x4062 <DIO_enuSetPinDirection+0x6>
    4062:	00 d0       	rcall	.+0      	; 0x4064 <DIO_enuSetPinDirection+0x8>
    4064:	00 d0       	rcall	.+0      	; 0x4066 <DIO_enuSetPinDirection+0xa>
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
    406a:	8a 83       	std	Y+2, r24	; 0x02
    406c:	6b 83       	std	Y+3, r22	; 0x03
    406e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4070:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    4072:	8a 81       	ldd	r24, Y+2	; 0x02
    4074:	84 30       	cpi	r24, 0x04	; 4
    4076:	08 f0       	brcs	.+2      	; 0x407a <DIO_enuSetPinDirection+0x1e>
    4078:	d1 c0       	rjmp	.+418    	; 0x421c <DIO_enuSetPinDirection+0x1c0>
    407a:	8b 81       	ldd	r24, Y+3	; 0x03
    407c:	88 30       	cpi	r24, 0x08	; 8
    407e:	08 f0       	brcs	.+2      	; 0x4082 <DIO_enuSetPinDirection+0x26>
    4080:	cd c0       	rjmp	.+410    	; 0x421c <DIO_enuSetPinDirection+0x1c0>
    4082:	8c 81       	ldd	r24, Y+4	; 0x04
    4084:	82 30       	cpi	r24, 0x02	; 2
    4086:	08 f0       	brcs	.+2      	; 0x408a <DIO_enuSetPinDirection+0x2e>
    4088:	c9 c0       	rjmp	.+402    	; 0x421c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
    408a:	8a 81       	ldd	r24, Y+2	; 0x02
    408c:	28 2f       	mov	r18, r24
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	3e 83       	std	Y+6, r19	; 0x06
    4092:	2d 83       	std	Y+5, r18	; 0x05
    4094:	6d 81       	ldd	r22, Y+5	; 0x05
    4096:	7e 81       	ldd	r23, Y+6	; 0x06
    4098:	61 30       	cpi	r22, 0x01	; 1
    409a:	71 05       	cpc	r23, r1
    409c:	09 f4       	brne	.+2      	; 0x40a0 <DIO_enuSetPinDirection+0x44>
    409e:	41 c0       	rjmp	.+130    	; 0x4122 <DIO_enuSetPinDirection+0xc6>
    40a0:	8d 81       	ldd	r24, Y+5	; 0x05
    40a2:	9e 81       	ldd	r25, Y+6	; 0x06
    40a4:	82 30       	cpi	r24, 0x02	; 2
    40a6:	91 05       	cpc	r25, r1
    40a8:	34 f4       	brge	.+12     	; 0x40b6 <DIO_enuSetPinDirection+0x5a>
    40aa:	2d 81       	ldd	r18, Y+5	; 0x05
    40ac:	3e 81       	ldd	r19, Y+6	; 0x06
    40ae:	21 15       	cp	r18, r1
    40b0:	31 05       	cpc	r19, r1
    40b2:	71 f0       	breq	.+28     	; 0x40d0 <DIO_enuSetPinDirection+0x74>
    40b4:	b0 c0       	rjmp	.+352    	; 0x4216 <DIO_enuSetPinDirection+0x1ba>
    40b6:	6d 81       	ldd	r22, Y+5	; 0x05
    40b8:	7e 81       	ldd	r23, Y+6	; 0x06
    40ba:	62 30       	cpi	r22, 0x02	; 2
    40bc:	71 05       	cpc	r23, r1
    40be:	09 f4       	brne	.+2      	; 0x40c2 <DIO_enuSetPinDirection+0x66>
    40c0:	59 c0       	rjmp	.+178    	; 0x4174 <DIO_enuSetPinDirection+0x118>
    40c2:	8d 81       	ldd	r24, Y+5	; 0x05
    40c4:	9e 81       	ldd	r25, Y+6	; 0x06
    40c6:	83 30       	cpi	r24, 0x03	; 3
    40c8:	91 05       	cpc	r25, r1
    40ca:	09 f4       	brne	.+2      	; 0x40ce <DIO_enuSetPinDirection+0x72>
    40cc:	7c c0       	rjmp	.+248    	; 0x41c6 <DIO_enuSetPinDirection+0x16a>
    40ce:	a3 c0       	rjmp	.+326    	; 0x4216 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    40d0:	aa e3       	ldi	r26, 0x3A	; 58
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	ea e3       	ldi	r30, 0x3A	; 58
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	48 2f       	mov	r20, r24
    40dc:	8b 81       	ldd	r24, Y+3	; 0x03
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	02 c0       	rjmp	.+4      	; 0x40ec <DIO_enuSetPinDirection+0x90>
    40e8:	88 0f       	add	r24, r24
    40ea:	99 1f       	adc	r25, r25
    40ec:	2a 95       	dec	r18
    40ee:	e2 f7       	brpl	.-8      	; 0x40e8 <DIO_enuSetPinDirection+0x8c>
    40f0:	80 95       	com	r24
    40f2:	84 23       	and	r24, r20
    40f4:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction<<Copy_u8PinID);
    40f6:	aa e3       	ldi	r26, 0x3A	; 58
    40f8:	b0 e0       	ldi	r27, 0x00	; 0
    40fa:	ea e3       	ldi	r30, 0x3A	; 58
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	80 81       	ld	r24, Z
    4100:	48 2f       	mov	r20, r24
    4102:	8c 81       	ldd	r24, Y+4	; 0x04
    4104:	28 2f       	mov	r18, r24
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	8b 81       	ldd	r24, Y+3	; 0x03
    410a:	88 2f       	mov	r24, r24
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	b9 01       	movw	r22, r18
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <DIO_enuSetPinDirection+0xba>
    4112:	66 0f       	add	r22, r22
    4114:	77 1f       	adc	r23, r23
    4116:	8a 95       	dec	r24
    4118:	e2 f7       	brpl	.-8      	; 0x4112 <DIO_enuSetPinDirection+0xb6>
    411a:	cb 01       	movw	r24, r22
    411c:	84 2b       	or	r24, r20
    411e:	8c 93       	st	X, r24
    4120:	7a c0       	rjmp	.+244    	; 0x4216 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4122:	a7 e3       	ldi	r26, 0x37	; 55
    4124:	b0 e0       	ldi	r27, 0x00	; 0
    4126:	e7 e3       	ldi	r30, 0x37	; 55
    4128:	f0 e0       	ldi	r31, 0x00	; 0
    412a:	80 81       	ld	r24, Z
    412c:	48 2f       	mov	r20, r24
    412e:	8b 81       	ldd	r24, Y+3	; 0x03
    4130:	28 2f       	mov	r18, r24
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	02 c0       	rjmp	.+4      	; 0x413e <DIO_enuSetPinDirection+0xe2>
    413a:	88 0f       	add	r24, r24
    413c:	99 1f       	adc	r25, r25
    413e:	2a 95       	dec	r18
    4140:	e2 f7       	brpl	.-8      	; 0x413a <DIO_enuSetPinDirection+0xde>
    4142:	80 95       	com	r24
    4144:	84 23       	and	r24, r20
    4146:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction<<Copy_u8PinID);
    4148:	a7 e3       	ldi	r26, 0x37	; 55
    414a:	b0 e0       	ldi	r27, 0x00	; 0
    414c:	e7 e3       	ldi	r30, 0x37	; 55
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	80 81       	ld	r24, Z
    4152:	48 2f       	mov	r20, r24
    4154:	8c 81       	ldd	r24, Y+4	; 0x04
    4156:	28 2f       	mov	r18, r24
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	8b 81       	ldd	r24, Y+3	; 0x03
    415c:	88 2f       	mov	r24, r24
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	b9 01       	movw	r22, r18
    4162:	02 c0       	rjmp	.+4      	; 0x4168 <DIO_enuSetPinDirection+0x10c>
    4164:	66 0f       	add	r22, r22
    4166:	77 1f       	adc	r23, r23
    4168:	8a 95       	dec	r24
    416a:	e2 f7       	brpl	.-8      	; 0x4164 <DIO_enuSetPinDirection+0x108>
    416c:	cb 01       	movw	r24, r22
    416e:	84 2b       	or	r24, r20
    4170:	8c 93       	st	X, r24
    4172:	51 c0       	rjmp	.+162    	; 0x4216 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4174:	a4 e3       	ldi	r26, 0x34	; 52
    4176:	b0 e0       	ldi	r27, 0x00	; 0
    4178:	e4 e3       	ldi	r30, 0x34	; 52
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	80 81       	ld	r24, Z
    417e:	48 2f       	mov	r20, r24
    4180:	8b 81       	ldd	r24, Y+3	; 0x03
    4182:	28 2f       	mov	r18, r24
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	02 c0       	rjmp	.+4      	; 0x4190 <DIO_enuSetPinDirection+0x134>
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	2a 95       	dec	r18
    4192:	e2 f7       	brpl	.-8      	; 0x418c <DIO_enuSetPinDirection+0x130>
    4194:	80 95       	com	r24
    4196:	84 23       	and	r24, r20
    4198:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction<<Copy_u8PinID);
    419a:	a4 e3       	ldi	r26, 0x34	; 52
    419c:	b0 e0       	ldi	r27, 0x00	; 0
    419e:	e4 e3       	ldi	r30, 0x34	; 52
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	80 81       	ld	r24, Z
    41a4:	48 2f       	mov	r20, r24
    41a6:	8c 81       	ldd	r24, Y+4	; 0x04
    41a8:	28 2f       	mov	r18, r24
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	8b 81       	ldd	r24, Y+3	; 0x03
    41ae:	88 2f       	mov	r24, r24
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	b9 01       	movw	r22, r18
    41b4:	02 c0       	rjmp	.+4      	; 0x41ba <DIO_enuSetPinDirection+0x15e>
    41b6:	66 0f       	add	r22, r22
    41b8:	77 1f       	adc	r23, r23
    41ba:	8a 95       	dec	r24
    41bc:	e2 f7       	brpl	.-8      	; 0x41b6 <DIO_enuSetPinDirection+0x15a>
    41be:	cb 01       	movw	r24, r22
    41c0:	84 2b       	or	r24, r20
    41c2:	8c 93       	st	X, r24
    41c4:	28 c0       	rjmp	.+80     	; 0x4216 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    41c6:	a1 e3       	ldi	r26, 0x31	; 49
    41c8:	b0 e0       	ldi	r27, 0x00	; 0
    41ca:	e1 e3       	ldi	r30, 0x31	; 49
    41cc:	f0 e0       	ldi	r31, 0x00	; 0
    41ce:	80 81       	ld	r24, Z
    41d0:	48 2f       	mov	r20, r24
    41d2:	8b 81       	ldd	r24, Y+3	; 0x03
    41d4:	28 2f       	mov	r18, r24
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	02 c0       	rjmp	.+4      	; 0x41e2 <DIO_enuSetPinDirection+0x186>
    41de:	88 0f       	add	r24, r24
    41e0:	99 1f       	adc	r25, r25
    41e2:	2a 95       	dec	r18
    41e4:	e2 f7       	brpl	.-8      	; 0x41de <DIO_enuSetPinDirection+0x182>
    41e6:	80 95       	com	r24
    41e8:	84 23       	and	r24, r20
    41ea:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction<<Copy_u8PinID);
    41ec:	a1 e3       	ldi	r26, 0x31	; 49
    41ee:	b0 e0       	ldi	r27, 0x00	; 0
    41f0:	e1 e3       	ldi	r30, 0x31	; 49
    41f2:	f0 e0       	ldi	r31, 0x00	; 0
    41f4:	80 81       	ld	r24, Z
    41f6:	48 2f       	mov	r20, r24
    41f8:	8c 81       	ldd	r24, Y+4	; 0x04
    41fa:	28 2f       	mov	r18, r24
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4200:	88 2f       	mov	r24, r24
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	b9 01       	movw	r22, r18
    4206:	02 c0       	rjmp	.+4      	; 0x420c <DIO_enuSetPinDirection+0x1b0>
    4208:	66 0f       	add	r22, r22
    420a:	77 1f       	adc	r23, r23
    420c:	8a 95       	dec	r24
    420e:	e2 f7       	brpl	.-8      	; 0x4208 <DIO_enuSetPinDirection+0x1ac>
    4210:	cb 01       	movw	r24, r22
    4212:	84 2b       	or	r24, r20
    4214:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	89 83       	std	Y+1, r24	; 0x01
    421a:	02 c0       	rjmp	.+4      	; 0x4220 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    421c:	82 e0       	ldi	r24, 0x02	; 2
    421e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4220:	89 81       	ldd	r24, Y+1	; 0x01
}
    4222:	26 96       	adiw	r28, 0x06	; 6
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	08 95       	ret

00004234 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 Copy_u8Value)
{
    4234:	df 93       	push	r29
    4236:	cf 93       	push	r28
    4238:	00 d0       	rcall	.+0      	; 0x423a <DIO_enuSetPinValue+0x6>
    423a:	00 d0       	rcall	.+0      	; 0x423c <DIO_enuSetPinValue+0x8>
    423c:	00 d0       	rcall	.+0      	; 0x423e <DIO_enuSetPinValue+0xa>
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	8a 83       	std	Y+2, r24	; 0x02
    4244:	6b 83       	std	Y+3, r22	; 0x03
    4246:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4248:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    424a:	8a 81       	ldd	r24, Y+2	; 0x02
    424c:	84 30       	cpi	r24, 0x04	; 4
    424e:	08 f0       	brcs	.+2      	; 0x4252 <DIO_enuSetPinValue+0x1e>
    4250:	d1 c0       	rjmp	.+418    	; 0x43f4 <DIO_enuSetPinValue+0x1c0>
    4252:	8b 81       	ldd	r24, Y+3	; 0x03
    4254:	88 30       	cpi	r24, 0x08	; 8
    4256:	08 f0       	brcs	.+2      	; 0x425a <DIO_enuSetPinValue+0x26>
    4258:	cd c0       	rjmp	.+410    	; 0x43f4 <DIO_enuSetPinValue+0x1c0>
    425a:	8c 81       	ldd	r24, Y+4	; 0x04
    425c:	82 30       	cpi	r24, 0x02	; 2
    425e:	08 f0       	brcs	.+2      	; 0x4262 <DIO_enuSetPinValue+0x2e>
    4260:	c9 c0       	rjmp	.+402    	; 0x43f4 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Value <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
    4262:	8a 81       	ldd	r24, Y+2	; 0x02
    4264:	28 2f       	mov	r18, r24
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	3e 83       	std	Y+6, r19	; 0x06
    426a:	2d 83       	std	Y+5, r18	; 0x05
    426c:	6d 81       	ldd	r22, Y+5	; 0x05
    426e:	7e 81       	ldd	r23, Y+6	; 0x06
    4270:	61 30       	cpi	r22, 0x01	; 1
    4272:	71 05       	cpc	r23, r1
    4274:	09 f4       	brne	.+2      	; 0x4278 <DIO_enuSetPinValue+0x44>
    4276:	41 c0       	rjmp	.+130    	; 0x42fa <DIO_enuSetPinValue+0xc6>
    4278:	8d 81       	ldd	r24, Y+5	; 0x05
    427a:	9e 81       	ldd	r25, Y+6	; 0x06
    427c:	82 30       	cpi	r24, 0x02	; 2
    427e:	91 05       	cpc	r25, r1
    4280:	34 f4       	brge	.+12     	; 0x428e <DIO_enuSetPinValue+0x5a>
    4282:	2d 81       	ldd	r18, Y+5	; 0x05
    4284:	3e 81       	ldd	r19, Y+6	; 0x06
    4286:	21 15       	cp	r18, r1
    4288:	31 05       	cpc	r19, r1
    428a:	71 f0       	breq	.+28     	; 0x42a8 <DIO_enuSetPinValue+0x74>
    428c:	b0 c0       	rjmp	.+352    	; 0x43ee <DIO_enuSetPinValue+0x1ba>
    428e:	6d 81       	ldd	r22, Y+5	; 0x05
    4290:	7e 81       	ldd	r23, Y+6	; 0x06
    4292:	62 30       	cpi	r22, 0x02	; 2
    4294:	71 05       	cpc	r23, r1
    4296:	09 f4       	brne	.+2      	; 0x429a <DIO_enuSetPinValue+0x66>
    4298:	59 c0       	rjmp	.+178    	; 0x434c <DIO_enuSetPinValue+0x118>
    429a:	8d 81       	ldd	r24, Y+5	; 0x05
    429c:	9e 81       	ldd	r25, Y+6	; 0x06
    429e:	83 30       	cpi	r24, 0x03	; 3
    42a0:	91 05       	cpc	r25, r1
    42a2:	09 f4       	brne	.+2      	; 0x42a6 <DIO_enuSetPinValue+0x72>
    42a4:	7c c0       	rjmp	.+248    	; 0x439e <DIO_enuSetPinValue+0x16a>
    42a6:	a3 c0       	rjmp	.+326    	; 0x43ee <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    42a8:	ab e3       	ldi	r26, 0x3B	; 59
    42aa:	b0 e0       	ldi	r27, 0x00	; 0
    42ac:	eb e3       	ldi	r30, 0x3B	; 59
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	80 81       	ld	r24, Z
    42b2:	48 2f       	mov	r20, r24
    42b4:	8b 81       	ldd	r24, Y+3	; 0x03
    42b6:	28 2f       	mov	r18, r24
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	02 c0       	rjmp	.+4      	; 0x42c4 <DIO_enuSetPinValue+0x90>
    42c0:	88 0f       	add	r24, r24
    42c2:	99 1f       	adc	r25, r25
    42c4:	2a 95       	dec	r18
    42c6:	e2 f7       	brpl	.-8      	; 0x42c0 <DIO_enuSetPinValue+0x8c>
    42c8:	80 95       	com	r24
    42ca:	84 23       	and	r24, r20
    42cc:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value<<Copy_u8PinID);
    42ce:	ab e3       	ldi	r26, 0x3B	; 59
    42d0:	b0 e0       	ldi	r27, 0x00	; 0
    42d2:	eb e3       	ldi	r30, 0x3B	; 59
    42d4:	f0 e0       	ldi	r31, 0x00	; 0
    42d6:	80 81       	ld	r24, Z
    42d8:	48 2f       	mov	r20, r24
    42da:	8c 81       	ldd	r24, Y+4	; 0x04
    42dc:	28 2f       	mov	r18, r24
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	8b 81       	ldd	r24, Y+3	; 0x03
    42e2:	88 2f       	mov	r24, r24
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	b9 01       	movw	r22, r18
    42e8:	02 c0       	rjmp	.+4      	; 0x42ee <DIO_enuSetPinValue+0xba>
    42ea:	66 0f       	add	r22, r22
    42ec:	77 1f       	adc	r23, r23
    42ee:	8a 95       	dec	r24
    42f0:	e2 f7       	brpl	.-8      	; 0x42ea <DIO_enuSetPinValue+0xb6>
    42f2:	cb 01       	movw	r24, r22
    42f4:	84 2b       	or	r24, r20
    42f6:	8c 93       	st	X, r24
    42f8:	7a c0       	rjmp	.+244    	; 0x43ee <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    42fa:	a8 e3       	ldi	r26, 0x38	; 56
    42fc:	b0 e0       	ldi	r27, 0x00	; 0
    42fe:	e8 e3       	ldi	r30, 0x38	; 56
    4300:	f0 e0       	ldi	r31, 0x00	; 0
    4302:	80 81       	ld	r24, Z
    4304:	48 2f       	mov	r20, r24
    4306:	8b 81       	ldd	r24, Y+3	; 0x03
    4308:	28 2f       	mov	r18, r24
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	02 c0       	rjmp	.+4      	; 0x4316 <DIO_enuSetPinValue+0xe2>
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	2a 95       	dec	r18
    4318:	e2 f7       	brpl	.-8      	; 0x4312 <DIO_enuSetPinValue+0xde>
    431a:	80 95       	com	r24
    431c:	84 23       	and	r24, r20
    431e:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value<<Copy_u8PinID);
    4320:	a8 e3       	ldi	r26, 0x38	; 56
    4322:	b0 e0       	ldi	r27, 0x00	; 0
    4324:	e8 e3       	ldi	r30, 0x38	; 56
    4326:	f0 e0       	ldi	r31, 0x00	; 0
    4328:	80 81       	ld	r24, Z
    432a:	48 2f       	mov	r20, r24
    432c:	8c 81       	ldd	r24, Y+4	; 0x04
    432e:	28 2f       	mov	r18, r24
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	8b 81       	ldd	r24, Y+3	; 0x03
    4334:	88 2f       	mov	r24, r24
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	b9 01       	movw	r22, r18
    433a:	02 c0       	rjmp	.+4      	; 0x4340 <DIO_enuSetPinValue+0x10c>
    433c:	66 0f       	add	r22, r22
    433e:	77 1f       	adc	r23, r23
    4340:	8a 95       	dec	r24
    4342:	e2 f7       	brpl	.-8      	; 0x433c <DIO_enuSetPinValue+0x108>
    4344:	cb 01       	movw	r24, r22
    4346:	84 2b       	or	r24, r20
    4348:	8c 93       	st	X, r24
    434a:	51 c0       	rjmp	.+162    	; 0x43ee <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    434c:	a5 e3       	ldi	r26, 0x35	; 53
    434e:	b0 e0       	ldi	r27, 0x00	; 0
    4350:	e5 e3       	ldi	r30, 0x35	; 53
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	80 81       	ld	r24, Z
    4356:	48 2f       	mov	r20, r24
    4358:	8b 81       	ldd	r24, Y+3	; 0x03
    435a:	28 2f       	mov	r18, r24
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	02 c0       	rjmp	.+4      	; 0x4368 <DIO_enuSetPinValue+0x134>
    4364:	88 0f       	add	r24, r24
    4366:	99 1f       	adc	r25, r25
    4368:	2a 95       	dec	r18
    436a:	e2 f7       	brpl	.-8      	; 0x4364 <DIO_enuSetPinValue+0x130>
    436c:	80 95       	com	r24
    436e:	84 23       	and	r24, r20
    4370:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value<<Copy_u8PinID);
    4372:	a5 e3       	ldi	r26, 0x35	; 53
    4374:	b0 e0       	ldi	r27, 0x00	; 0
    4376:	e5 e3       	ldi	r30, 0x35	; 53
    4378:	f0 e0       	ldi	r31, 0x00	; 0
    437a:	80 81       	ld	r24, Z
    437c:	48 2f       	mov	r20, r24
    437e:	8c 81       	ldd	r24, Y+4	; 0x04
    4380:	28 2f       	mov	r18, r24
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	8b 81       	ldd	r24, Y+3	; 0x03
    4386:	88 2f       	mov	r24, r24
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	b9 01       	movw	r22, r18
    438c:	02 c0       	rjmp	.+4      	; 0x4392 <DIO_enuSetPinValue+0x15e>
    438e:	66 0f       	add	r22, r22
    4390:	77 1f       	adc	r23, r23
    4392:	8a 95       	dec	r24
    4394:	e2 f7       	brpl	.-8      	; 0x438e <DIO_enuSetPinValue+0x15a>
    4396:	cb 01       	movw	r24, r22
    4398:	84 2b       	or	r24, r20
    439a:	8c 93       	st	X, r24
    439c:	28 c0       	rjmp	.+80     	; 0x43ee <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    439e:	a2 e3       	ldi	r26, 0x32	; 50
    43a0:	b0 e0       	ldi	r27, 0x00	; 0
    43a2:	e2 e3       	ldi	r30, 0x32	; 50
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	80 81       	ld	r24, Z
    43a8:	48 2f       	mov	r20, r24
    43aa:	8b 81       	ldd	r24, Y+3	; 0x03
    43ac:	28 2f       	mov	r18, r24
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	02 c0       	rjmp	.+4      	; 0x43ba <DIO_enuSetPinValue+0x186>
    43b6:	88 0f       	add	r24, r24
    43b8:	99 1f       	adc	r25, r25
    43ba:	2a 95       	dec	r18
    43bc:	e2 f7       	brpl	.-8      	; 0x43b6 <DIO_enuSetPinValue+0x182>
    43be:	80 95       	com	r24
    43c0:	84 23       	and	r24, r20
    43c2:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value<<Copy_u8PinID);
    43c4:	a2 e3       	ldi	r26, 0x32	; 50
    43c6:	b0 e0       	ldi	r27, 0x00	; 0
    43c8:	e2 e3       	ldi	r30, 0x32	; 50
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	80 81       	ld	r24, Z
    43ce:	48 2f       	mov	r20, r24
    43d0:	8c 81       	ldd	r24, Y+4	; 0x04
    43d2:	28 2f       	mov	r18, r24
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	8b 81       	ldd	r24, Y+3	; 0x03
    43d8:	88 2f       	mov	r24, r24
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	b9 01       	movw	r22, r18
    43de:	02 c0       	rjmp	.+4      	; 0x43e4 <DIO_enuSetPinValue+0x1b0>
    43e0:	66 0f       	add	r22, r22
    43e2:	77 1f       	adc	r23, r23
    43e4:	8a 95       	dec	r24
    43e6:	e2 f7       	brpl	.-8      	; 0x43e0 <DIO_enuSetPinValue+0x1ac>
    43e8:	cb 01       	movw	r24, r22
    43ea:	84 2b       	or	r24, r20
    43ec:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	89 83       	std	Y+1, r24	; 0x01
    43f2:	02 c0       	rjmp	.+4      	; 0x43f8 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    43f4:	82 e0       	ldi	r24, 0x02	; 2
    43f6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    43fa:	26 96       	adiw	r28, 0x06	; 6
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	f8 94       	cli
    4400:	de bf       	out	0x3e, r29	; 62
    4402:	0f be       	out	0x3f, r0	; 63
    4404:	cd bf       	out	0x3d, r28	; 61
    4406:	cf 91       	pop	r28
    4408:	df 91       	pop	r29
    440a:	08 95       	ret

0000440c <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    440c:	df 93       	push	r29
    440e:	cf 93       	push	r28
    4410:	00 d0       	rcall	.+0      	; 0x4412 <DIO_enuTogglePinValue+0x6>
    4412:	00 d0       	rcall	.+0      	; 0x4414 <DIO_enuTogglePinValue+0x8>
    4414:	0f 92       	push	r0
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
    441a:	8a 83       	std	Y+2, r24	; 0x02
    441c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    441e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    4420:	8a 81       	ldd	r24, Y+2	; 0x02
    4422:	84 30       	cpi	r24, 0x04	; 4
    4424:	08 f0       	brcs	.+2      	; 0x4428 <DIO_enuTogglePinValue+0x1c>
    4426:	75 c0       	rjmp	.+234    	; 0x4512 <DIO_enuTogglePinValue+0x106>
    4428:	8b 81       	ldd	r24, Y+3	; 0x03
    442a:	88 30       	cpi	r24, 0x08	; 8
    442c:	08 f0       	brcs	.+2      	; 0x4430 <DIO_enuTogglePinValue+0x24>
    442e:	71 c0       	rjmp	.+226    	; 0x4512 <DIO_enuTogglePinValue+0x106>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	28 2f       	mov	r18, r24
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	3d 83       	std	Y+5, r19	; 0x05
    4438:	2c 83       	std	Y+4, r18	; 0x04
    443a:	8c 81       	ldd	r24, Y+4	; 0x04
    443c:	9d 81       	ldd	r25, Y+5	; 0x05
    443e:	81 30       	cpi	r24, 0x01	; 1
    4440:	91 05       	cpc	r25, r1
    4442:	49 f1       	breq	.+82     	; 0x4496 <DIO_enuTogglePinValue+0x8a>
    4444:	2c 81       	ldd	r18, Y+4	; 0x04
    4446:	3d 81       	ldd	r19, Y+5	; 0x05
    4448:	22 30       	cpi	r18, 0x02	; 2
    444a:	31 05       	cpc	r19, r1
    444c:	2c f4       	brge	.+10     	; 0x4458 <DIO_enuTogglePinValue+0x4c>
    444e:	8c 81       	ldd	r24, Y+4	; 0x04
    4450:	9d 81       	ldd	r25, Y+5	; 0x05
    4452:	00 97       	sbiw	r24, 0x00	; 0
    4454:	61 f0       	breq	.+24     	; 0x446e <DIO_enuTogglePinValue+0x62>
    4456:	5a c0       	rjmp	.+180    	; 0x450c <DIO_enuTogglePinValue+0x100>
    4458:	2c 81       	ldd	r18, Y+4	; 0x04
    445a:	3d 81       	ldd	r19, Y+5	; 0x05
    445c:	22 30       	cpi	r18, 0x02	; 2
    445e:	31 05       	cpc	r19, r1
    4460:	71 f1       	breq	.+92     	; 0x44be <DIO_enuTogglePinValue+0xb2>
    4462:	8c 81       	ldd	r24, Y+4	; 0x04
    4464:	9d 81       	ldd	r25, Y+5	; 0x05
    4466:	83 30       	cpi	r24, 0x03	; 3
    4468:	91 05       	cpc	r25, r1
    446a:	e9 f1       	breq	.+122    	; 0x44e6 <DIO_enuTogglePinValue+0xda>
    446c:	4f c0       	rjmp	.+158    	; 0x450c <DIO_enuTogglePinValue+0x100>
			{
			case DIO_u8GROUP_A:
				PORTA ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    446e:	ab e3       	ldi	r26, 0x3B	; 59
    4470:	b0 e0       	ldi	r27, 0x00	; 0
    4472:	eb e3       	ldi	r30, 0x3B	; 59
    4474:	f0 e0       	ldi	r31, 0x00	; 0
    4476:	80 81       	ld	r24, Z
    4478:	48 2f       	mov	r20, r24
    447a:	8b 81       	ldd	r24, Y+3	; 0x03
    447c:	28 2f       	mov	r18, r24
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	81 e0       	ldi	r24, 0x01	; 1
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	02 2e       	mov	r0, r18
    4486:	02 c0       	rjmp	.+4      	; 0x448c <DIO_enuTogglePinValue+0x80>
    4488:	88 0f       	add	r24, r24
    448a:	99 1f       	adc	r25, r25
    448c:	0a 94       	dec	r0
    448e:	e2 f7       	brpl	.-8      	; 0x4488 <DIO_enuTogglePinValue+0x7c>
    4490:	84 27       	eor	r24, r20
    4492:	8c 93       	st	X, r24
    4494:	3b c0       	rjmp	.+118    	; 0x450c <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_B:
				PORTB ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    4496:	a8 e3       	ldi	r26, 0x38	; 56
    4498:	b0 e0       	ldi	r27, 0x00	; 0
    449a:	e8 e3       	ldi	r30, 0x38	; 56
    449c:	f0 e0       	ldi	r31, 0x00	; 0
    449e:	80 81       	ld	r24, Z
    44a0:	48 2f       	mov	r20, r24
    44a2:	8b 81       	ldd	r24, Y+3	; 0x03
    44a4:	28 2f       	mov	r18, r24
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	02 2e       	mov	r0, r18
    44ae:	02 c0       	rjmp	.+4      	; 0x44b4 <DIO_enuTogglePinValue+0xa8>
    44b0:	88 0f       	add	r24, r24
    44b2:	99 1f       	adc	r25, r25
    44b4:	0a 94       	dec	r0
    44b6:	e2 f7       	brpl	.-8      	; 0x44b0 <DIO_enuTogglePinValue+0xa4>
    44b8:	84 27       	eor	r24, r20
    44ba:	8c 93       	st	X, r24
    44bc:	27 c0       	rjmp	.+78     	; 0x450c <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_C:
				PORTC ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    44be:	a5 e3       	ldi	r26, 0x35	; 53
    44c0:	b0 e0       	ldi	r27, 0x00	; 0
    44c2:	e5 e3       	ldi	r30, 0x35	; 53
    44c4:	f0 e0       	ldi	r31, 0x00	; 0
    44c6:	80 81       	ld	r24, Z
    44c8:	48 2f       	mov	r20, r24
    44ca:	8b 81       	ldd	r24, Y+3	; 0x03
    44cc:	28 2f       	mov	r18, r24
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	02 2e       	mov	r0, r18
    44d6:	02 c0       	rjmp	.+4      	; 0x44dc <DIO_enuTogglePinValue+0xd0>
    44d8:	88 0f       	add	r24, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	0a 94       	dec	r0
    44de:	e2 f7       	brpl	.-8      	; 0x44d8 <DIO_enuTogglePinValue+0xcc>
    44e0:	84 27       	eor	r24, r20
    44e2:	8c 93       	st	X, r24
    44e4:	13 c0       	rjmp	.+38     	; 0x450c <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_D:
				PORTD ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    44e6:	a2 e3       	ldi	r26, 0x32	; 50
    44e8:	b0 e0       	ldi	r27, 0x00	; 0
    44ea:	e2 e3       	ldi	r30, 0x32	; 50
    44ec:	f0 e0       	ldi	r31, 0x00	; 0
    44ee:	80 81       	ld	r24, Z
    44f0:	48 2f       	mov	r20, r24
    44f2:	8b 81       	ldd	r24, Y+3	; 0x03
    44f4:	28 2f       	mov	r18, r24
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	02 2e       	mov	r0, r18
    44fe:	02 c0       	rjmp	.+4      	; 0x4504 <DIO_enuTogglePinValue+0xf8>
    4500:	88 0f       	add	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	0a 94       	dec	r0
    4506:	e2 f7       	brpl	.-8      	; 0x4500 <DIO_enuTogglePinValue+0xf4>
    4508:	84 27       	eor	r24, r20
    450a:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	89 83       	std	Y+1, r24	; 0x01
    4510:	02 c0       	rjmp	.+4      	; 0x4516 <DIO_enuTogglePinValue+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    4512:	82 e0       	ldi	r24, 0x02	; 2
    4514:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
    4516:	89 81       	ldd	r24, Y+1	; 0x01
}
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	cf 91       	pop	r28
    4524:	df 91       	pop	r29
    4526:	08 95       	ret

00004528 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    4528:	df 93       	push	r29
    452a:	cf 93       	push	r28
    452c:	cd b7       	in	r28, 0x3d	; 61
    452e:	de b7       	in	r29, 0x3e	; 62
    4530:	27 97       	sbiw	r28, 0x07	; 7
    4532:	0f b6       	in	r0, 0x3f	; 63
    4534:	f8 94       	cli
    4536:	de bf       	out	0x3e, r29	; 62
    4538:	0f be       	out	0x3f, r0	; 63
    453a:	cd bf       	out	0x3d, r28	; 61
    453c:	8a 83       	std	Y+2, r24	; 0x02
    453e:	6b 83       	std	Y+3, r22	; 0x03
    4540:	5d 83       	std	Y+5, r21	; 0x05
    4542:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4544:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    4546:	8c 81       	ldd	r24, Y+4	; 0x04
    4548:	9d 81       	ldd	r25, Y+5	; 0x05
    454a:	00 97       	sbiw	r24, 0x00	; 0
    454c:	09 f4       	brne	.+2      	; 0x4550 <DIO_enuGetPinValue+0x28>
    454e:	7e c0       	rjmp	.+252    	; 0x464c <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    4550:	8a 81       	ldd	r24, Y+2	; 0x02
    4552:	84 30       	cpi	r24, 0x04	; 4
    4554:	08 f0       	brcs	.+2      	; 0x4558 <DIO_enuGetPinValue+0x30>
    4556:	77 c0       	rjmp	.+238    	; 0x4646 <DIO_enuGetPinValue+0x11e>
    4558:	8b 81       	ldd	r24, Y+3	; 0x03
    455a:	88 30       	cpi	r24, 0x08	; 8
    455c:	08 f0       	brcs	.+2      	; 0x4560 <DIO_enuGetPinValue+0x38>
    455e:	73 c0       	rjmp	.+230    	; 0x4646 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	28 2f       	mov	r18, r24
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	3f 83       	std	Y+7, r19	; 0x07
    4568:	2e 83       	std	Y+6, r18	; 0x06
    456a:	4e 81       	ldd	r20, Y+6	; 0x06
    456c:	5f 81       	ldd	r21, Y+7	; 0x07
    456e:	41 30       	cpi	r20, 0x01	; 1
    4570:	51 05       	cpc	r21, r1
    4572:	59 f1       	breq	.+86     	; 0x45ca <DIO_enuGetPinValue+0xa2>
    4574:	8e 81       	ldd	r24, Y+6	; 0x06
    4576:	9f 81       	ldd	r25, Y+7	; 0x07
    4578:	82 30       	cpi	r24, 0x02	; 2
    457a:	91 05       	cpc	r25, r1
    457c:	34 f4       	brge	.+12     	; 0x458a <DIO_enuGetPinValue+0x62>
    457e:	2e 81       	ldd	r18, Y+6	; 0x06
    4580:	3f 81       	ldd	r19, Y+7	; 0x07
    4582:	21 15       	cp	r18, r1
    4584:	31 05       	cpc	r19, r1
    4586:	69 f0       	breq	.+26     	; 0x45a2 <DIO_enuGetPinValue+0x7a>
    4588:	5b c0       	rjmp	.+182    	; 0x4640 <DIO_enuGetPinValue+0x118>
    458a:	4e 81       	ldd	r20, Y+6	; 0x06
    458c:	5f 81       	ldd	r21, Y+7	; 0x07
    458e:	42 30       	cpi	r20, 0x02	; 2
    4590:	51 05       	cpc	r21, r1
    4592:	79 f1       	breq	.+94     	; 0x45f2 <DIO_enuGetPinValue+0xca>
    4594:	8e 81       	ldd	r24, Y+6	; 0x06
    4596:	9f 81       	ldd	r25, Y+7	; 0x07
    4598:	83 30       	cpi	r24, 0x03	; 3
    459a:	91 05       	cpc	r25, r1
    459c:	09 f4       	brne	.+2      	; 0x45a0 <DIO_enuGetPinValue+0x78>
    459e:	3d c0       	rjmp	.+122    	; 0x461a <DIO_enuGetPinValue+0xf2>
    45a0:	4f c0       	rjmp	.+158    	; 0x4640 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( (PINA>>Copy_u8PinID) & DIO_BIT_MASK);
    45a2:	e9 e3       	ldi	r30, 0x39	; 57
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	80 81       	ld	r24, Z
    45a8:	28 2f       	mov	r18, r24
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	8b 81       	ldd	r24, Y+3	; 0x03
    45ae:	88 2f       	mov	r24, r24
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	a9 01       	movw	r20, r18
    45b4:	02 c0       	rjmp	.+4      	; 0x45ba <DIO_enuGetPinValue+0x92>
    45b6:	55 95       	asr	r21
    45b8:	47 95       	ror	r20
    45ba:	8a 95       	dec	r24
    45bc:	e2 f7       	brpl	.-8      	; 0x45b6 <DIO_enuGetPinValue+0x8e>
    45be:	ca 01       	movw	r24, r20
    45c0:	81 70       	andi	r24, 0x01	; 1
    45c2:	ec 81       	ldd	r30, Y+4	; 0x04
    45c4:	fd 81       	ldd	r31, Y+5	; 0x05
    45c6:	80 83       	st	Z, r24
    45c8:	3b c0       	rjmp	.+118    	; 0x4640 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( (PINB>>Copy_u8PinID) & DIO_BIT_MASK);
    45ca:	e6 e3       	ldi	r30, 0x36	; 54
    45cc:	f0 e0       	ldi	r31, 0x00	; 0
    45ce:	80 81       	ld	r24, Z
    45d0:	28 2f       	mov	r18, r24
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	8b 81       	ldd	r24, Y+3	; 0x03
    45d6:	88 2f       	mov	r24, r24
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	a9 01       	movw	r20, r18
    45dc:	02 c0       	rjmp	.+4      	; 0x45e2 <DIO_enuGetPinValue+0xba>
    45de:	55 95       	asr	r21
    45e0:	47 95       	ror	r20
    45e2:	8a 95       	dec	r24
    45e4:	e2 f7       	brpl	.-8      	; 0x45de <DIO_enuGetPinValue+0xb6>
    45e6:	ca 01       	movw	r24, r20
    45e8:	81 70       	andi	r24, 0x01	; 1
    45ea:	ec 81       	ldd	r30, Y+4	; 0x04
    45ec:	fd 81       	ldd	r31, Y+5	; 0x05
    45ee:	80 83       	st	Z, r24
    45f0:	27 c0       	rjmp	.+78     	; 0x4640 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( (PINC>>Copy_u8PinID) & DIO_BIT_MASK);
    45f2:	e3 e3       	ldi	r30, 0x33	; 51
    45f4:	f0 e0       	ldi	r31, 0x00	; 0
    45f6:	80 81       	ld	r24, Z
    45f8:	28 2f       	mov	r18, r24
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	8b 81       	ldd	r24, Y+3	; 0x03
    45fe:	88 2f       	mov	r24, r24
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	a9 01       	movw	r20, r18
    4604:	02 c0       	rjmp	.+4      	; 0x460a <DIO_enuGetPinValue+0xe2>
    4606:	55 95       	asr	r21
    4608:	47 95       	ror	r20
    460a:	8a 95       	dec	r24
    460c:	e2 f7       	brpl	.-8      	; 0x4606 <DIO_enuGetPinValue+0xde>
    460e:	ca 01       	movw	r24, r20
    4610:	81 70       	andi	r24, 0x01	; 1
    4612:	ec 81       	ldd	r30, Y+4	; 0x04
    4614:	fd 81       	ldd	r31, Y+5	; 0x05
    4616:	80 83       	st	Z, r24
    4618:	13 c0       	rjmp	.+38     	; 0x4640 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( (PIND>>Copy_u8PinID) & DIO_BIT_MASK);
    461a:	e0 e3       	ldi	r30, 0x30	; 48
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	80 81       	ld	r24, Z
    4620:	28 2f       	mov	r18, r24
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	8b 81       	ldd	r24, Y+3	; 0x03
    4626:	88 2f       	mov	r24, r24
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	a9 01       	movw	r20, r18
    462c:	02 c0       	rjmp	.+4      	; 0x4632 <DIO_enuGetPinValue+0x10a>
    462e:	55 95       	asr	r21
    4630:	47 95       	ror	r20
    4632:	8a 95       	dec	r24
    4634:	e2 f7       	brpl	.-8      	; 0x462e <DIO_enuGetPinValue+0x106>
    4636:	ca 01       	movw	r24, r20
    4638:	81 70       	andi	r24, 0x01	; 1
    463a:	ec 81       	ldd	r30, Y+4	; 0x04
    463c:	fd 81       	ldd	r31, Y+5	; 0x05
    463e:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	89 83       	std	Y+1, r24	; 0x01
    4644:	05 c0       	rjmp	.+10     	; 0x4650 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    4646:	82 e0       	ldi	r24, 0x02	; 2
    4648:	89 83       	std	Y+1, r24	; 0x01
    464a:	02 c0       	rjmp	.+4      	; 0x4650 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    464c:	83 e0       	ldi	r24, 0x03	; 3
    464e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4650:	89 81       	ldd	r24, Y+1	; 0x01
}
    4652:	27 96       	adiw	r28, 0x07	; 7
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	f8 94       	cli
    4658:	de bf       	out	0x3e, r29	; 62
    465a:	0f be       	out	0x3f, r0	; 63
    465c:	cd bf       	out	0x3d, r28	; 61
    465e:	cf 91       	pop	r28
    4660:	df 91       	pop	r29
    4662:	08 95       	ret

00004664 <main>:
//void DIO_LED (void *pv);
void LCD_Display (void *pv);
void UartNotificationISR (void);

int main()
{
    4664:	af 92       	push	r10
    4666:	bf 92       	push	r11
    4668:	cf 92       	push	r12
    466a:	df 92       	push	r13
    466c:	ef 92       	push	r14
    466e:	ff 92       	push	r15
    4670:	0f 93       	push	r16
    4672:	df 93       	push	r29
    4674:	cf 93       	push	r28
    4676:	cd b7       	in	r28, 0x3d	; 61
    4678:	de b7       	in	r29, 0x3e	; 62
	/****************** init UART **************************************/
	UART_Init();
    467a:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>
	UART_Callback(UartNotificationISR);
    467e:	8e eb       	ldi	r24, 0xBE	; 190
    4680:	93 e2       	ldi	r25, 0x23	; 35
    4682:	0e 94 2d 06 	call	0xc5a	; 0xc5a <UART_Callback>
	/*************************PIN init ********************************/
	DIO_enuSetPinDirection(DIO_u8GROUP_A, PIN0, DIO_u8OUTPUT);
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	60 e0       	ldi	r22, 0x00	; 0
    468a:	41 e0       	ldi	r20, 0x01	; 1
    468c:	0e 94 2e 20 	call	0x405c	; 0x405c <DIO_enuSetPinDirection>
	/********************************* create semaphore and  queues********/
	UART_Semphr = xSemaphoreCreateCounting(10,0);
    4690:	8a e0       	ldi	r24, 0x0A	; 10
    4692:	60 e0       	ldi	r22, 0x00	; 0
    4694:	0e 94 16 14 	call	0x282c	; 0x282c <xQueueCreateCountingSemaphore>
    4698:	90 93 0c 05 	sts	0x050C, r25
    469c:	80 93 0b 05 	sts	0x050B, r24
	ISR_UART_Handler = xQueueCreate(10, 1);
    46a0:	8a e0       	ldi	r24, 0x0A	; 10
    46a2:	61 e0       	ldi	r22, 0x01	; 1
    46a4:	0e 94 22 13 	call	0x2644	; 0x2644 <xQueueCreate>
    46a8:	90 93 11 05 	sts	0x0511, r25
    46ac:	80 93 10 05 	sts	0x0510, r24
	UART_LCD_Handler = xQueueCreate(10, 1);
    46b0:	8a e0       	ldi	r24, 0x0A	; 10
    46b2:	61 e0       	ldi	r22, 0x01	; 1
    46b4:	0e 94 22 13 	call	0x2644	; 0x2644 <xQueueCreate>
    46b8:	90 93 0f 05 	sts	0x050F, r25
    46bc:	80 93 0e 05 	sts	0x050E, r24
	/***************************** LCD init ***************************/
	LCD_enuInit();
    46c0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <LCD_enuInit>
	 * 3- stack size
	 * 4- parameters
	 * 5- priority
	 * 6- handler
	 */
	xTaskCreate(UartRecieve,NULL,100,NULL,3,NULL);
    46c4:	87 e8       	ldi	r24, 0x87	; 135
    46c6:	93 e2       	ldi	r25, 0x23	; 35
    46c8:	60 e0       	ldi	r22, 0x00	; 0
    46ca:	70 e0       	ldi	r23, 0x00	; 0
    46cc:	44 e6       	ldi	r20, 0x64	; 100
    46ce:	50 e0       	ldi	r21, 0x00	; 0
    46d0:	20 e0       	ldi	r18, 0x00	; 0
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	03 e0       	ldi	r16, 0x03	; 3
    46d6:	ee 24       	eor	r14, r14
    46d8:	ff 24       	eor	r15, r15
    46da:	cc 24       	eor	r12, r12
    46dc:	dd 24       	eor	r13, r13
    46de:	aa 24       	eor	r10, r10
    46e0:	bb 24       	eor	r11, r11
    46e2:	0e 94 3b 18 	call	0x3076	; 0x3076 <xTaskGenericCreate>
	//xTaskCreate(DIO_LED,NULL,100,NULL,2,NULL);
	xTaskCreate(LCD_Display,NULL,200,NULL,1,NULL);
    46e6:	80 ee       	ldi	r24, 0xE0	; 224
    46e8:	93 e2       	ldi	r25, 0x23	; 35
    46ea:	60 e0       	ldi	r22, 0x00	; 0
    46ec:	70 e0       	ldi	r23, 0x00	; 0
    46ee:	48 ec       	ldi	r20, 0xC8	; 200
    46f0:	50 e0       	ldi	r21, 0x00	; 0
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	01 e0       	ldi	r16, 0x01	; 1
    46f8:	ee 24       	eor	r14, r14
    46fa:	ff 24       	eor	r15, r15
    46fc:	cc 24       	eor	r12, r12
    46fe:	dd 24       	eor	r13, r13
    4700:	aa 24       	eor	r10, r10
    4702:	bb 24       	eor	r11, r11
    4704:	0e 94 3b 18 	call	0x3076	; 0x3076 <xTaskGenericCreate>
    /*************************************** start scheduler **************/
	vTaskStartScheduler();
    4708:	0e 94 34 1a 	call	0x3468	; 0x3468 <vTaskStartScheduler>
    470c:	ff cf       	rjmp	.-2      	; 0x470c <main+0xa8>

0000470e <UartRecieve>:
	while(1);
}
void UartRecieve (void *pv)
{
    470e:	df 93       	push	r29
    4710:	cf 93       	push	r28
    4712:	00 d0       	rcall	.+0      	; 0x4714 <UartRecieve+0x6>
    4714:	0f 92       	push	r0
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
    471a:	9b 83       	std	Y+3, r25	; 0x03
    471c:	8a 83       	std	Y+2, r24	; 0x02
	u8 UartValue = 0;
    471e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		if(xSemaphoreTake(UART_Semphr,35) == pdPASS)
    4720:	80 91 0b 05 	lds	r24, 0x050B
    4724:	90 91 0c 05 	lds	r25, 0x050C
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	70 e0       	ldi	r23, 0x00	; 0
    472c:	43 e2       	ldi	r20, 0x23	; 35
    472e:	50 e0       	ldi	r21, 0x00	; 0
    4730:	20 e0       	ldi	r18, 0x00	; 0
    4732:	0e 94 20 15 	call	0x2a40	; 0x2a40 <xQueueGenericReceive>
    4736:	81 30       	cpi	r24, 0x01	; 1
    4738:	e1 f4       	brne	.+56     	; 0x4772 <UartRecieve+0x64>
		{
			if((xQueueReceive(ISR_UART_Handler,&UartValue,5)) == pdPASS)
    473a:	80 91 10 05 	lds	r24, 0x0510
    473e:	90 91 11 05 	lds	r25, 0x0511
    4742:	9e 01       	movw	r18, r28
    4744:	2f 5f       	subi	r18, 0xFF	; 255
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	b9 01       	movw	r22, r18
    474a:	45 e0       	ldi	r20, 0x05	; 5
    474c:	50 e0       	ldi	r21, 0x00	; 0
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	0e 94 20 15 	call	0x2a40	; 0x2a40 <xQueueGenericReceive>
    4754:	81 30       	cpi	r24, 0x01	; 1
    4756:	69 f4       	brne	.+26     	; 0x4772 <UartRecieve+0x64>
			{
				// received  successfully
				if((xQueueSend(UART_LCD_Handler,&UartValue,5)) == pdPASS)
    4758:	80 91 0e 05 	lds	r24, 0x050E
    475c:	90 91 0f 05 	lds	r25, 0x050F
    4760:	9e 01       	movw	r18, r28
    4762:	2f 5f       	subi	r18, 0xFF	; 255
    4764:	3f 4f       	sbci	r19, 0xFF	; 255
    4766:	b9 01       	movw	r22, r18
    4768:	45 e0       	ldi	r20, 0x05	; 5
    476a:	50 e0       	ldi	r21, 0x00	; 0
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
			else
			{
				// didn't receive
			}
		}
		vTaskDelay(10);
    4772:	8a e0       	ldi	r24, 0x0A	; 10
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	0e 94 ff 19 	call	0x33fe	; 0x33fe <vTaskDelay>
    477a:	d2 cf       	rjmp	.-92     	; 0x4720 <UartRecieve+0x12>

0000477c <UartNotificationISR>:
			DIO_enuSetPinValue(DIO_u8GROUP_A, PIN0, DIO_u8LOW);
		vTaskDelay(15);
	}
}*/
void UartNotificationISR (void)
{
    477c:	df 93       	push	r29
    477e:	cf 93       	push	r28
    4780:	cd b7       	in	r28, 0x3d	; 61
    4782:	de b7       	in	r29, 0x3e	; 62
	xSemaphoreGive(UART_Semphr);
    4784:	80 91 0b 05 	lds	r24, 0x050B
    4788:	90 91 0c 05 	lds	r25, 0x050C
    478c:	60 e0       	ldi	r22, 0x00	; 0
    478e:	70 e0       	ldi	r23, 0x00	; 0
    4790:	40 e0       	ldi	r20, 0x00	; 0
    4792:	50 e0       	ldi	r21, 0x00	; 0
    4794:	20 e0       	ldi	r18, 0x00	; 0
    4796:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
	 static u8 valueRecieved = 0;
	 valueRecieved= UART_Receive();
    479a:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_Receive>
    479e:	80 93 0d 05 	sts	0x050D, r24
	if((xQueueSend(ISR_UART_Handler,&valueRecieved,5)) == pdPASS)
    47a2:	80 91 10 05 	lds	r24, 0x0510
    47a6:	90 91 11 05 	lds	r25, 0x0511
    47aa:	2d e0       	ldi	r18, 0x0D	; 13
    47ac:	35 e0       	ldi	r19, 0x05	; 5
    47ae:	b9 01       	movw	r22, r18
    47b0:	45 e0       	ldi	r20, 0x05	; 5
    47b2:	50 e0       	ldi	r21, 0x00	; 0
    47b4:	20 e0       	ldi	r18, 0x00	; 0
    47b6:	0e 94 35 14 	call	0x286a	; 0x286a <xQueueGenericSend>
	}
	else
	{
		// didn't send
	}
}
    47ba:	cf 91       	pop	r28
    47bc:	df 91       	pop	r29
    47be:	08 95       	ret

000047c0 <LCD_Display>:
void LCD_Display (void *pv)
{
    47c0:	df 93       	push	r29
    47c2:	cf 93       	push	r28
    47c4:	00 d0       	rcall	.+0      	; 0x47c6 <LCD_Display+0x6>
    47c6:	00 d0       	rcall	.+0      	; 0x47c8 <LCD_Display+0x8>
    47c8:	0f 92       	push	r0
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
    47ce:	9d 83       	std	Y+5, r25	; 0x05
    47d0:	8c 83       	std	Y+4, r24	; 0x04
	LCD_enuWriteString("values Received: ");
    47d2:	85 e6       	ldi	r24, 0x65	; 101
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <LCD_enuWriteString>
	LCD_enuGoToPosition(2, 1);
    47da:	82 e0       	ldi	r24, 0x02	; 2
    47dc:	61 e0       	ldi	r22, 0x01	; 1
    47de:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_enuGoToPosition>
	u8 counter = 1;
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 DisplayValue;
	while(1)
	{
		if((xQueueReceive(UART_LCD_Handler,&DisplayValue,5)) == pdPASS)
    47e6:	80 91 0e 05 	lds	r24, 0x050E
    47ea:	90 91 0f 05 	lds	r25, 0x050F
    47ee:	9e 01       	movw	r18, r28
    47f0:	2d 5f       	subi	r18, 0xFD	; 253
    47f2:	3f 4f       	sbci	r19, 0xFF	; 255
    47f4:	b9 01       	movw	r22, r18
    47f6:	45 e0       	ldi	r20, 0x05	; 5
    47f8:	50 e0       	ldi	r21, 0x00	; 0
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	0e 94 20 15 	call	0x2a40	; 0x2a40 <xQueueGenericReceive>
    4800:	81 30       	cpi	r24, 0x01	; 1
    4802:	a1 f4       	brne	.+40     	; 0x482c <LCD_Display+0x6c>
		{
			// Received successfully
			LCD_enuWriteData(DisplayValue);
    4804:	8b 81       	ldd	r24, Y+3	; 0x03
    4806:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_enuWriteData>
			counter++;
    480a:	8a 81       	ldd	r24, Y+2	; 0x02
    480c:	8f 5f       	subi	r24, 0xFF	; 255
    480e:	8a 83       	std	Y+2, r24	; 0x02
			if(DisplayValue == '1')
    4810:	8b 81       	ldd	r24, Y+3	; 0x03
    4812:	81 33       	cpi	r24, 0x31	; 49
    4814:	31 f4       	brne	.+12     	; 0x4822 <LCD_Display+0x62>
				DIO_enuSetPinValue(DIO_u8GROUP_A, PIN0, DIO_u8HIGH);
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	60 e0       	ldi	r22, 0x00	; 0
    481a:	41 e0       	ldi	r20, 0x01	; 1
    481c:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
    4820:	05 c0       	rjmp	.+10     	; 0x482c <LCD_Display+0x6c>
			else
				DIO_enuSetPinValue(DIO_u8GROUP_A, PIN0, DIO_u8LOW);
    4822:	80 e0       	ldi	r24, 0x00	; 0
    4824:	60 e0       	ldi	r22, 0x00	; 0
    4826:	40 e0       	ldi	r20, 0x00	; 0
    4828:	0e 94 1a 21 	call	0x4234	; 0x4234 <DIO_enuSetPinValue>
		}
		else
		{
			// didn't Receive
		}
		if (counter >= 16)
    482c:	8a 81       	ldd	r24, Y+2	; 0x02
    482e:	80 31       	cpi	r24, 0x10	; 16
    4830:	a8 f0       	brcs	.+42     	; 0x485c <LCD_Display+0x9c>
		{
			LCD_enuGoToPosition(2, 1);
    4832:	82 e0       	ldi	r24, 0x02	; 2
    4834:	61 e0       	ldi	r22, 0x01	; 1
    4836:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_enuGoToPosition>
			for (u8 i =0 ; i< 15;i++)
    483a:	19 82       	std	Y+1, r1	; 0x01
    483c:	06 c0       	rjmp	.+12     	; 0x484a <LCD_Display+0x8a>
				LCD_enuWriteData(' ');
    483e:	80 e2       	ldi	r24, 0x20	; 32
    4840:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_enuWriteData>
			// didn't Receive
		}
		if (counter >= 16)
		{
			LCD_enuGoToPosition(2, 1);
			for (u8 i =0 ; i< 15;i++)
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	8f 5f       	subi	r24, 0xFF	; 255
    4848:	89 83       	std	Y+1, r24	; 0x01
    484a:	89 81       	ldd	r24, Y+1	; 0x01
    484c:	8f 30       	cpi	r24, 0x0F	; 15
    484e:	b8 f3       	brcs	.-18     	; 0x483e <LCD_Display+0x7e>
				LCD_enuWriteData(' ');
			counter = 1;
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	8a 83       	std	Y+2, r24	; 0x02
			LCD_enuGoToPosition(2, 1);
    4854:	82 e0       	ldi	r24, 0x02	; 2
    4856:	61 e0       	ldi	r22, 0x01	; 1
    4858:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_enuGoToPosition>
		}
		vTaskDelay(15);
    485c:	8f e0       	ldi	r24, 0x0F	; 15
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	0e 94 ff 19 	call	0x33fe	; 0x33fe <vTaskDelay>
    4864:	c0 cf       	rjmp	.-128    	; 0x47e6 <LCD_Display+0x26>

00004866 <__divmodsi4>:
    4866:	97 fb       	bst	r25, 7
    4868:	09 2e       	mov	r0, r25
    486a:	05 26       	eor	r0, r21
    486c:	0e d0       	rcall	.+28     	; 0x488a <__divmodsi4_neg1>
    486e:	57 fd       	sbrc	r21, 7
    4870:	04 d0       	rcall	.+8      	; 0x487a <__divmodsi4_neg2>
    4872:	14 d0       	rcall	.+40     	; 0x489c <__udivmodsi4>
    4874:	0a d0       	rcall	.+20     	; 0x488a <__divmodsi4_neg1>
    4876:	00 1c       	adc	r0, r0
    4878:	38 f4       	brcc	.+14     	; 0x4888 <__divmodsi4_exit>

0000487a <__divmodsi4_neg2>:
    487a:	50 95       	com	r21
    487c:	40 95       	com	r20
    487e:	30 95       	com	r19
    4880:	21 95       	neg	r18
    4882:	3f 4f       	sbci	r19, 0xFF	; 255
    4884:	4f 4f       	sbci	r20, 0xFF	; 255
    4886:	5f 4f       	sbci	r21, 0xFF	; 255

00004888 <__divmodsi4_exit>:
    4888:	08 95       	ret

0000488a <__divmodsi4_neg1>:
    488a:	f6 f7       	brtc	.-4      	; 0x4888 <__divmodsi4_exit>
    488c:	90 95       	com	r25
    488e:	80 95       	com	r24
    4890:	70 95       	com	r23
    4892:	61 95       	neg	r22
    4894:	7f 4f       	sbci	r23, 0xFF	; 255
    4896:	8f 4f       	sbci	r24, 0xFF	; 255
    4898:	9f 4f       	sbci	r25, 0xFF	; 255
    489a:	08 95       	ret

0000489c <__udivmodsi4>:
    489c:	a1 e2       	ldi	r26, 0x21	; 33
    489e:	1a 2e       	mov	r1, r26
    48a0:	aa 1b       	sub	r26, r26
    48a2:	bb 1b       	sub	r27, r27
    48a4:	fd 01       	movw	r30, r26
    48a6:	0d c0       	rjmp	.+26     	; 0x48c2 <__udivmodsi4_ep>

000048a8 <__udivmodsi4_loop>:
    48a8:	aa 1f       	adc	r26, r26
    48aa:	bb 1f       	adc	r27, r27
    48ac:	ee 1f       	adc	r30, r30
    48ae:	ff 1f       	adc	r31, r31
    48b0:	a2 17       	cp	r26, r18
    48b2:	b3 07       	cpc	r27, r19
    48b4:	e4 07       	cpc	r30, r20
    48b6:	f5 07       	cpc	r31, r21
    48b8:	20 f0       	brcs	.+8      	; 0x48c2 <__udivmodsi4_ep>
    48ba:	a2 1b       	sub	r26, r18
    48bc:	b3 0b       	sbc	r27, r19
    48be:	e4 0b       	sbc	r30, r20
    48c0:	f5 0b       	sbc	r31, r21

000048c2 <__udivmodsi4_ep>:
    48c2:	66 1f       	adc	r22, r22
    48c4:	77 1f       	adc	r23, r23
    48c6:	88 1f       	adc	r24, r24
    48c8:	99 1f       	adc	r25, r25
    48ca:	1a 94       	dec	r1
    48cc:	69 f7       	brne	.-38     	; 0x48a8 <__udivmodsi4_loop>
    48ce:	60 95       	com	r22
    48d0:	70 95       	com	r23
    48d2:	80 95       	com	r24
    48d4:	90 95       	com	r25
    48d6:	9b 01       	movw	r18, r22
    48d8:	ac 01       	movw	r20, r24
    48da:	bd 01       	movw	r22, r26
    48dc:	cf 01       	movw	r24, r30
    48de:	08 95       	ret

000048e0 <__prologue_saves__>:
    48e0:	2f 92       	push	r2
    48e2:	3f 92       	push	r3
    48e4:	4f 92       	push	r4
    48e6:	5f 92       	push	r5
    48e8:	6f 92       	push	r6
    48ea:	7f 92       	push	r7
    48ec:	8f 92       	push	r8
    48ee:	9f 92       	push	r9
    48f0:	af 92       	push	r10
    48f2:	bf 92       	push	r11
    48f4:	cf 92       	push	r12
    48f6:	df 92       	push	r13
    48f8:	ef 92       	push	r14
    48fa:	ff 92       	push	r15
    48fc:	0f 93       	push	r16
    48fe:	1f 93       	push	r17
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	cd b7       	in	r28, 0x3d	; 61
    4906:	de b7       	in	r29, 0x3e	; 62
    4908:	ca 1b       	sub	r28, r26
    490a:	db 0b       	sbc	r29, r27
    490c:	0f b6       	in	r0, 0x3f	; 63
    490e:	f8 94       	cli
    4910:	de bf       	out	0x3e, r29	; 62
    4912:	0f be       	out	0x3f, r0	; 63
    4914:	cd bf       	out	0x3d, r28	; 61
    4916:	09 94       	ijmp

00004918 <__epilogue_restores__>:
    4918:	2a 88       	ldd	r2, Y+18	; 0x12
    491a:	39 88       	ldd	r3, Y+17	; 0x11
    491c:	48 88       	ldd	r4, Y+16	; 0x10
    491e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4920:	6e 84       	ldd	r6, Y+14	; 0x0e
    4922:	7d 84       	ldd	r7, Y+13	; 0x0d
    4924:	8c 84       	ldd	r8, Y+12	; 0x0c
    4926:	9b 84       	ldd	r9, Y+11	; 0x0b
    4928:	aa 84       	ldd	r10, Y+10	; 0x0a
    492a:	b9 84       	ldd	r11, Y+9	; 0x09
    492c:	c8 84       	ldd	r12, Y+8	; 0x08
    492e:	df 80       	ldd	r13, Y+7	; 0x07
    4930:	ee 80       	ldd	r14, Y+6	; 0x06
    4932:	fd 80       	ldd	r15, Y+5	; 0x05
    4934:	0c 81       	ldd	r16, Y+4	; 0x04
    4936:	1b 81       	ldd	r17, Y+3	; 0x03
    4938:	aa 81       	ldd	r26, Y+2	; 0x02
    493a:	b9 81       	ldd	r27, Y+1	; 0x01
    493c:	ce 0f       	add	r28, r30
    493e:	d1 1d       	adc	r29, r1
    4940:	0f b6       	in	r0, 0x3f	; 63
    4942:	f8 94       	cli
    4944:	de bf       	out	0x3e, r29	; 62
    4946:	0f be       	out	0x3f, r0	; 63
    4948:	cd bf       	out	0x3d, r28	; 61
    494a:	ed 01       	movw	r28, r26
    494c:	08 95       	ret

0000494e <memcpy>:
    494e:	fb 01       	movw	r30, r22
    4950:	dc 01       	movw	r26, r24
    4952:	02 c0       	rjmp	.+4      	; 0x4958 <memcpy+0xa>
    4954:	01 90       	ld	r0, Z+
    4956:	0d 92       	st	X+, r0
    4958:	41 50       	subi	r20, 0x01	; 1
    495a:	50 40       	sbci	r21, 0x00	; 0
    495c:	d8 f7       	brcc	.-10     	; 0x4954 <memcpy+0x6>
    495e:	08 95       	ret

00004960 <memset>:
    4960:	dc 01       	movw	r26, r24
    4962:	01 c0       	rjmp	.+2      	; 0x4966 <memset+0x6>
    4964:	6d 93       	st	X+, r22
    4966:	41 50       	subi	r20, 0x01	; 1
    4968:	50 40       	sbci	r21, 0x00	; 0
    496a:	e0 f7       	brcc	.-8      	; 0x4964 <memset+0x4>
    496c:	08 95       	ret

0000496e <strncpy>:
    496e:	fb 01       	movw	r30, r22
    4970:	dc 01       	movw	r26, r24
    4972:	41 50       	subi	r20, 0x01	; 1
    4974:	50 40       	sbci	r21, 0x00	; 0
    4976:	48 f0       	brcs	.+18     	; 0x498a <strncpy+0x1c>
    4978:	01 90       	ld	r0, Z+
    497a:	0d 92       	st	X+, r0
    497c:	00 20       	and	r0, r0
    497e:	c9 f7       	brne	.-14     	; 0x4972 <strncpy+0x4>
    4980:	01 c0       	rjmp	.+2      	; 0x4984 <strncpy+0x16>
    4982:	1d 92       	st	X+, r1
    4984:	41 50       	subi	r20, 0x01	; 1
    4986:	50 40       	sbci	r21, 0x00	; 0
    4988:	e0 f7       	brcc	.-8      	; 0x4982 <strncpy+0x14>
    498a:	08 95       	ret

0000498c <_exit>:
    498c:	f8 94       	cli

0000498e <__stop_program>:
    498e:	ff cf       	rjmp	.-2      	; 0x498e <__stop_program>
